<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="915450548799"><g><title>[unknown] (423,917,965 samples, 0.05%)</title><rect x="0.0002%" y="533" width="0.0463%" height="15" fill="rgb(227,0,7)" fg:x="2229390" fg:w="423917965"/><text x="0.2502%" y="543.50"></text></g><g><title>[unknown] (108,029,799 samples, 0.01%)</title><rect x="0.0347%" y="517" width="0.0118%" height="15" fill="rgb(217,0,24)" fg:x="318117556" fg:w="108029799"/><text x="0.2847%" y="527.50"></text></g><g><title>__rdl_alloc (13,392,640,250 samples, 1.46%)</title><rect x="0.5453%" y="69" width="1.4630%" height="15" fill="rgb(221,193,54)" fg:x="4991717356" fg:w="13392640250"/><text x="0.7953%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13,392,640,250 samples, 1.46%)</title><rect x="0.5453%" y="53" width="1.4630%" height="15" fill="rgb(248,212,6)" fg:x="4991717356" fg:w="13392640250"/><text x="0.7953%" y="63.50"></text></g><g><title>malloc (12,391,272,427 samples, 1.35%)</title><rect x="0.6547%" y="37" width="1.3536%" height="15" fill="rgb(208,68,35)" fg:x="5993085179" fg:w="12391272427"/><text x="0.9047%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14,096,332,721 samples, 1.54%)</title><rect x="0.5453%" y="117" width="1.5398%" height="15" fill="rgb(232,128,0)" fg:x="4991717356" fg:w="14096332721"/><text x="0.7953%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14,096,332,721 samples, 1.54%)</title><rect x="0.5453%" y="101" width="1.5398%" height="15" fill="rgb(207,160,47)" fg:x="4991717356" fg:w="14096332721"/><text x="0.7953%" y="111.50"></text></g><g><title>alloc::alloc::alloc (14,096,332,721 samples, 1.54%)</title><rect x="0.5453%" y="85" width="1.5398%" height="15" fill="rgb(228,23,34)" fg:x="4991717356" fg:w="14096332721"/><text x="0.7953%" y="95.50"></text></g><g><title>core::ptr::read_volatile (703,692,471 samples, 0.08%)</title><rect x="2.0082%" y="69" width="0.0769%" height="15" fill="rgb(218,30,26)" fg:x="18384357606" fg:w="703692471"/><text x="2.2582%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14,390,481,842 samples, 1.57%)</title><rect x="0.5193%" y="181" width="1.5720%" height="15" fill="rgb(220,122,19)" fg:x="4753781168" fg:w="14390481842"/><text x="0.7693%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14,390,481,842 samples, 1.57%)</title><rect x="0.5193%" y="165" width="1.5720%" height="15" fill="rgb(250,228,42)" fg:x="4753781168" fg:w="14390481842"/><text x="0.7693%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (14,390,481,842 samples, 1.57%)</title><rect x="0.5193%" y="149" width="1.5720%" height="15" fill="rgb(240,193,28)" fg:x="4753781168" fg:w="14390481842"/><text x="0.7693%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (14,390,481,842 samples, 1.57%)</title><rect x="0.5193%" y="133" width="1.5720%" height="15" fill="rgb(216,20,37)" fg:x="4753781168" fg:w="14390481842"/><text x="0.7693%" y="143.50"></text></g><g><title>[libc.so.6] (5,608,990,159 samples, 0.61%)</title><rect x="2.0930%" y="149" width="0.6127%" height="15" fill="rgb(206,188,39)" fg:x="19160352940" fg:w="5608990159"/><text x="2.3430%" y="159.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (20,168,505,605 samples, 2.20%)</title><rect x="0.5030%" y="325" width="2.2031%" height="15" fill="rgb(217,207,13)" fg:x="4604905566" fg:w="20168505605"/><text x="0.7530%" y="335.50">&lt;..</text></g><g><title>&lt;&amp;str as alloc::string::SpecToString&gt;::spec_to_string (20,168,505,605 samples, 2.20%)</title><rect x="0.5030%" y="309" width="2.2031%" height="15" fill="rgb(231,73,38)" fg:x="4604905566" fg:w="20168505605"/><text x="0.7530%" y="319.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (20,019,630,003 samples, 2.19%)</title><rect x="0.5193%" y="293" width="2.1869%" height="15" fill="rgb(225,20,46)" fg:x="4753781168" fg:w="20019630003"/><text x="0.7693%" y="303.50">&lt;..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (20,019,630,003 samples, 2.19%)</title><rect x="0.5193%" y="277" width="2.1869%" height="15" fill="rgb(210,31,41)" fg:x="4753781168" fg:w="20019630003"/><text x="0.7693%" y="287.50">a..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (20,019,630,003 samples, 2.19%)</title><rect x="0.5193%" y="261" width="2.1869%" height="15" fill="rgb(221,200,47)" fg:x="4753781168" fg:w="20019630003"/><text x="0.7693%" y="271.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20,019,630,003 samples, 2.19%)</title><rect x="0.5193%" y="245" width="2.1869%" height="15" fill="rgb(226,26,5)" fg:x="4753781168" fg:w="20019630003"/><text x="0.7693%" y="255.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20,019,630,003 samples, 2.19%)</title><rect x="0.5193%" y="229" width="2.1869%" height="15" fill="rgb(249,33,26)" fg:x="4753781168" fg:w="20019630003"/><text x="0.7693%" y="239.50">a..</text></g><g><title>alloc::slice::hack::to_vec (20,019,630,003 samples, 2.19%)</title><rect x="0.5193%" y="213" width="2.1869%" height="15" fill="rgb(235,183,28)" fg:x="4753781168" fg:w="20019630003"/><text x="0.7693%" y="223.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20,019,630,003 samples, 2.19%)</title><rect x="0.5193%" y="197" width="2.1869%" height="15" fill="rgb(221,5,38)" fg:x="4753781168" fg:w="20019630003"/><text x="0.7693%" y="207.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5,629,148,161 samples, 0.61%)</title><rect x="2.0912%" y="181" width="0.6149%" height="15" fill="rgb(247,18,42)" fg:x="19144263010" fg:w="5629148161"/><text x="2.3412%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,629,148,161 samples, 0.61%)</title><rect x="2.0912%" y="165" width="0.6149%" height="15" fill="rgb(241,131,45)" fg:x="19144263010" fg:w="5629148161"/><text x="2.3412%" y="175.50"></text></g><g><title>cfree (10,704,476,826 samples, 1.17%)</title><rect x="2.7070%" y="325" width="1.1693%" height="15" fill="rgb(249,31,29)" fg:x="24781471094" fg:w="10704476826"/><text x="2.9570%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,533,075,229 samples, 0.17%)</title><rect x="7.5369%" y="149" width="0.1675%" height="15" fill="rgb(225,111,53)" fg:x="68996218558" fg:w="1533075229"/><text x="7.7869%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,209,221,193 samples, 0.24%)</title><rect x="7.5369%" y="181" width="0.2413%" height="15" fill="rgb(238,160,17)" fg:x="68996218558" fg:w="2209221193"/><text x="7.7869%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,209,221,193 samples, 0.24%)</title><rect x="7.5369%" y="165" width="0.2413%" height="15" fill="rgb(214,148,48)" fg:x="68996218558" fg:w="2209221193"/><text x="7.7869%" y="175.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (676,145,964 samples, 0.07%)</title><rect x="7.7043%" y="149" width="0.0739%" height="15" fill="rgb(232,36,49)" fg:x="70529293787" fg:w="676145964"/><text x="7.9543%" y="159.50"></text></g><g><title>core::slice::index::get_noubcheck (676,145,964 samples, 0.07%)</title><rect x="7.7043%" y="133" width="0.0739%" height="15" fill="rgb(209,103,24)" fg:x="70529293787" fg:w="676145964"/><text x="7.9543%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (11,379,847,724 samples, 1.24%)</title><rect x="7.0868%" y="197" width="1.2431%" height="15" fill="rgb(229,88,8)" fg:x="64876091748" fg:w="11379847724"/><text x="7.3368%" y="207.50"></text></g><g><title>core::slice::memchr::memchr (5,050,499,721 samples, 0.55%)</title><rect x="7.7782%" y="181" width="0.5517%" height="15" fill="rgb(213,181,19)" fg:x="71205439751" fg:w="5050499721"/><text x="8.0282%" y="191.50"></text></g><g><title>core::slice::memchr::memchr_naive (4,021,827,655 samples, 0.44%)</title><rect x="7.8906%" y="165" width="0.4393%" height="15" fill="rgb(254,191,54)" fg:x="72234111817" fg:w="4021827655"/><text x="8.1406%" y="175.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,448,682,003 samples, 3.22%)</title><rect x="5.3395%" y="229" width="3.2169%" height="15" fill="rgb(241,83,37)" fg:x="48880925072" fg:w="29448682003"/><text x="5.5895%" y="239.50">&lt;co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (25,218,057,181 samples, 2.75%)</title><rect x="5.8017%" y="213" width="2.7547%" height="15" fill="rgb(233,36,39)" fg:x="53111549894" fg:w="25218057181"/><text x="6.0517%" y="223.50">co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (2,073,667,603 samples, 0.23%)</title><rect x="8.3299%" y="197" width="0.2265%" height="15" fill="rgb(226,3,54)" fg:x="76255939472" fg:w="2073667603"/><text x="8.5799%" y="207.50"></text></g><g><title>core::ptr::write (1,050,149,869 samples, 0.11%)</title><rect x="8.5568%" y="229" width="0.1147%" height="15" fill="rgb(245,192,40)" fg:x="78333644355" fg:w="1050149869"/><text x="8.8068%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (34,965,482,928 samples, 3.82%)</title><rect x="4.8530%" y="261" width="3.8195%" height="15" fill="rgb(238,167,29)" fg:x="44426371553" fg:w="34965482928"/><text x="5.1030%" y="271.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (34,965,482,928 samples, 3.82%)</title><rect x="4.8530%" y="245" width="3.8195%" height="15" fill="rgb(232,182,51)" fg:x="44426371553" fg:w="34965482928"/><text x="5.1030%" y="255.50">allo..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,894,755,400 samples, 1.08%)</title><rect x="10.8875%" y="213" width="1.0809%" height="15" fill="rgb(231,60,39)" fg:x="99670116840" fg:w="9894755400"/><text x="11.1375%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (9,894,755,400 samples, 1.08%)</title><rect x="10.8875%" y="197" width="1.0809%" height="15" fill="rgb(208,69,12)" fg:x="99670116840" fg:w="9894755400"/><text x="11.1375%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,894,755,400 samples, 1.08%)</title><rect x="10.8875%" y="181" width="1.0809%" height="15" fill="rgb(235,93,37)" fg:x="99670116840" fg:w="9894755400"/><text x="11.1375%" y="191.50"></text></g><g><title>[libc.so.6] (6,654,712,810 samples, 0.73%)</title><rect x="11.2415%" y="165" width="0.7269%" height="15" fill="rgb(213,116,39)" fg:x="102910159430" fg:w="6654712810"/><text x="11.4915%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (309,160,422 samples, 0.03%)</title><rect x="11.9684%" y="181" width="0.0338%" height="15" fill="rgb(222,207,29)" fg:x="109564872240" fg:w="309160422"/><text x="12.2184%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (373,490,246 samples, 0.04%)</title><rect x="11.9684%" y="213" width="0.0408%" height="15" fill="rgb(206,96,30)" fg:x="109564872240" fg:w="373490246"/><text x="12.2184%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (373,490,246 samples, 0.04%)</title><rect x="11.9684%" y="197" width="0.0408%" height="15" fill="rgb(218,138,4)" fg:x="109564872240" fg:w="373490246"/><text x="12.2184%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (462,207,266 samples, 0.05%)</title><rect x="14.5484%" y="165" width="0.0505%" height="15" fill="rgb(250,191,14)" fg:x="133183664421" fg:w="462207266"/><text x="14.7984%" y="175.50"></text></g><g><title>core::ptr::align_offset (462,207,266 samples, 0.05%)</title><rect x="14.5484%" y="149" width="0.0505%" height="15" fill="rgb(239,60,40)" fg:x="133183664421" fg:w="462207266"/><text x="14.7984%" y="159.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (471,407,830 samples, 0.05%)</title><rect x="14.5989%" y="165" width="0.0515%" height="15" fill="rgb(206,27,48)" fg:x="133645871687" fg:w="471407830"/><text x="14.8489%" y="175.50"></text></g><g><title>core::slice::memchr::memchr_aligned (25,373,024,144 samples, 2.77%)</title><rect x="12.1981%" y="197" width="2.7716%" height="15" fill="rgb(225,35,8)" fg:x="111667128214" fg:w="25373024144"/><text x="12.4481%" y="207.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (25,373,024,144 samples, 2.77%)</title><rect x="12.1981%" y="181" width="2.7716%" height="15" fill="rgb(250,213,24)" fg:x="111667128214" fg:w="25373024144"/><text x="12.4481%" y="191.50">co..</text></g><g><title>core::slice::memchr::memchr_naive (2,922,872,841 samples, 0.32%)</title><rect x="14.6504%" y="165" width="0.3193%" height="15" fill="rgb(247,123,22)" fg:x="134117279517" fg:w="2922872841"/><text x="14.9004%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (162,552,085,598 samples, 17.76%)</title><rect x="9.6164%" y="229" width="17.7565%" height="15" fill="rgb(231,138,38)" fg:x="88033079610" fg:w="162552085598"/><text x="9.8664%" y="239.50">&lt;core::str::pattern::CharSea..</text></g><g><title>core::slice::memchr::memchr (140,646,802,722 samples, 15.36%)</title><rect x="12.0092%" y="213" width="15.3637%" height="15" fill="rgb(231,145,46)" fg:x="109938362486" fg:w="140646802722"/><text x="12.2592%" y="223.50">core::slice::memchr::mem..</text></g><g><title>core::slice::memchr::memchr_naive (113,545,012,850 samples, 12.40%)</title><rect x="14.9697%" y="197" width="12.4032%" height="15" fill="rgb(251,118,11)" fg:x="137040152358" fg:w="113545012850"/><text x="15.2197%" y="207.50">core::slice::memchr..</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (172,029,714,738 samples, 18.79%)</title><rect x="8.6724%" y="261" width="18.7918%" height="15" fill="rgb(217,147,25)" fg:x="79391854481" fg:w="172029714738"/><text x="8.9224%" y="271.50">&lt;core::str::iter::Split&lt;P&gt; as..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (168,503,732,032 samples, 18.41%)</title><rect x="9.0576%" y="245" width="18.4066%" height="15" fill="rgb(247,81,37)" fg:x="82917837187" fg:w="168503732032"/><text x="9.3076%" y="255.50">core::str::iter::SplitInterna..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (836,401,033 samples, 0.09%)</title><rect x="27.3729%" y="229" width="0.0914%" height="15" fill="rgb(209,12,38)" fg:x="250585168186" fg:w="836401033"/><text x="27.6229%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (836,401,033 samples, 0.09%)</title><rect x="27.3729%" y="213" width="0.0914%" height="15" fill="rgb(227,1,9)" fg:x="250585168186" fg:w="836401033"/><text x="27.6229%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (539,111,354 samples, 0.06%)</title><rect x="27.4054%" y="197" width="0.0589%" height="15" fill="rgb(248,47,43)" fg:x="250882457865" fg:w="539111354"/><text x="27.6554%" y="207.50"></text></g><g><title>__rdl_alloc (16,290,954,420 samples, 1.78%)</title><rect x="27.5816%" y="133" width="1.7796%" height="15" fill="rgb(221,10,30)" fg:x="252496017135" fg:w="16290954420"/><text x="27.8316%" y="143.50">_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16,290,954,420 samples, 1.78%)</title><rect x="27.5816%" y="117" width="1.7796%" height="15" fill="rgb(210,229,1)" fg:x="252496017135" fg:w="16290954420"/><text x="27.8316%" y="127.50">s..</text></g><g><title>malloc (16,226,366,060 samples, 1.77%)</title><rect x="27.5887%" y="101" width="1.7725%" height="15" fill="rgb(222,148,37)" fg:x="252560605495" fg:w="16226366060"/><text x="27.8387%" y="111.50">m..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17,369,422,652 samples, 1.90%)</title><rect x="27.4656%" y="261" width="1.8974%" height="15" fill="rgb(234,67,33)" fg:x="251433580166" fg:w="17369422652"/><text x="27.7156%" y="271.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17,369,422,652 samples, 1.90%)</title><rect x="27.4656%" y="245" width="1.8974%" height="15" fill="rgb(247,98,35)" fg:x="251433580166" fg:w="17369422652"/><text x="27.7156%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17,369,422,652 samples, 1.90%)</title><rect x="27.4656%" y="229" width="1.8974%" height="15" fill="rgb(247,138,52)" fg:x="251433580166" fg:w="17369422652"/><text x="27.7156%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (17,369,422,652 samples, 1.90%)</title><rect x="27.4656%" y="213" width="1.8974%" height="15" fill="rgb(213,79,30)" fg:x="251433580166" fg:w="17369422652"/><text x="27.7156%" y="223.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17,369,422,652 samples, 1.90%)</title><rect x="27.4656%" y="197" width="1.8974%" height="15" fill="rgb(246,177,23)" fg:x="251433580166" fg:w="17369422652"/><text x="27.7156%" y="207.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16,306,985,683 samples, 1.78%)</title><rect x="27.5816%" y="181" width="1.7813%" height="15" fill="rgb(230,62,27)" fg:x="252496017135" fg:w="16306985683"/><text x="27.8316%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (16,306,985,683 samples, 1.78%)</title><rect x="27.5816%" y="165" width="1.7813%" height="15" fill="rgb(216,154,8)" fg:x="252496017135" fg:w="16306985683"/><text x="27.8316%" y="175.50">a..</text></g><g><title>alloc::alloc::alloc (16,306,985,683 samples, 1.78%)</title><rect x="27.5816%" y="149" width="1.7813%" height="15" fill="rgb(244,35,45)" fg:x="252496017135" fg:w="16306985683"/><text x="27.8316%" y="159.50">a..</text></g><g><title>core::ptr::write (249,260,925 samples, 0.03%)</title><rect x="29.3634%" y="261" width="0.0272%" height="15" fill="rgb(251,115,12)" fg:x="268806993715" fg:w="249260925"/><text x="29.6134%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (233,578,200,336 samples, 25.52%)</title><rect x="3.8763%" y="325" width="25.5151%" height="15" fill="rgb(240,54,50)" fg:x="35485947920" fg:w="233578200336"/><text x="4.1263%" y="335.50">core::iter::traits::iterator::Iterator::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (233,578,200,336 samples, 25.52%)</title><rect x="3.8763%" y="309" width="25.5151%" height="15" fill="rgb(233,84,52)" fg:x="35485947920" fg:w="233578200336"/><text x="4.1263%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (233,578,200,336 samples, 25.52%)</title><rect x="3.8763%" y="293" width="25.5151%" height="15" fill="rgb(207,117,47)" fg:x="35485947920" fg:w="233578200336"/><text x="4.1263%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (233,578,200,336 samples, 25.52%)</title><rect x="3.8763%" y="277" width="25.5151%" height="15" fill="rgb(249,43,39)" fg:x="35485947920" fg:w="233578200336"/><text x="4.1263%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_f..</text></g><g><title>[libc.so.6] (63,921,646,884 samples, 6.98%)</title><rect x="31.7797%" y="165" width="6.9825%" height="15" fill="rgb(209,38,44)" fg:x="290927339419" fg:w="63921646884"/><text x="32.0297%" y="175.50">[libc.so...</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (85,615,700,724 samples, 9.35%)</title><rect x="29.4108%" y="245" width="9.3523%" height="15" fill="rgb(236,212,23)" fg:x="269241280599" fg:w="85615700724"/><text x="29.6608%" y="255.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::dealloc (85,615,700,724 samples, 9.35%)</title><rect x="29.4108%" y="229" width="9.3523%" height="15" fill="rgb(242,79,21)" fg:x="269241280599" fg:w="85615700724"/><text x="29.6608%" y="239.50">alloc::alloc:..</text></g><g><title>__rdl_dealloc (85,615,700,724 samples, 9.35%)</title><rect x="29.4108%" y="213" width="9.3523%" height="15" fill="rgb(211,96,35)" fg:x="269241280599" fg:w="85615700724"/><text x="29.6608%" y="223.50">__rdl_dealloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (85,615,700,724 samples, 9.35%)</title><rect x="29.4108%" y="197" width="9.3523%" height="15" fill="rgb(253,215,40)" fg:x="269241280599" fg:w="85615700724"/><text x="29.6608%" y="207.50">std::sys::all..</text></g><g><title>cfree (85,159,642,546 samples, 9.30%)</title><rect x="29.4606%" y="181" width="9.3025%" height="15" fill="rgb(211,81,21)" fg:x="269697338777" fg:w="85159642546"/><text x="29.7106%" y="191.50">cfree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (86,135,047,911 samples, 9.41%)</title><rect x="29.3923%" y="325" width="9.4090%" height="15" fill="rgb(208,190,38)" fg:x="269072167742" fg:w="86135047911"/><text x="29.6423%" y="335.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (86,135,047,911 samples, 9.41%)</title><rect x="29.3923%" y="309" width="9.4090%" height="15" fill="rgb(235,213,38)" fg:x="269072167742" fg:w="86135047911"/><text x="29.6423%" y="319.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (86,135,047,911 samples, 9.41%)</title><rect x="29.3923%" y="293" width="9.4090%" height="15" fill="rgb(237,122,38)" fg:x="269072167742" fg:w="86135047911"/><text x="29.6423%" y="303.50">core::ptr::dr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (86,135,047,911 samples, 9.41%)</title><rect x="29.3923%" y="277" width="9.4090%" height="15" fill="rgb(244,218,35)" fg:x="269072167742" fg:w="86135047911"/><text x="29.6423%" y="287.50">&lt;alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (86,135,047,911 samples, 9.41%)</title><rect x="29.3923%" y="261" width="9.4090%" height="15" fill="rgb(240,68,47)" fg:x="269072167742" fg:w="86135047911"/><text x="29.6423%" y="271.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (350,234,330 samples, 0.04%)</title><rect x="38.7631%" y="245" width="0.0383%" height="15" fill="rgb(210,16,53)" fg:x="354856981323" fg:w="350234330"/><text x="39.0131%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,295,251,006 samples, 1.23%)</title><rect x="38.8044%" y="261" width="1.2338%" height="15" fill="rgb(235,124,12)" fg:x="355235223500" fg:w="11295251006"/><text x="39.0544%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (11,295,251,006 samples, 1.23%)</title><rect x="38.8044%" y="245" width="1.2338%" height="15" fill="rgb(224,169,11)" fg:x="355235223500" fg:w="11295251006"/><text x="39.0544%" y="255.50"></text></g><g><title>__rdl_dealloc (11,295,251,006 samples, 1.23%)</title><rect x="38.8044%" y="229" width="1.2338%" height="15" fill="rgb(250,166,2)" fg:x="355235223500" fg:w="11295251006"/><text x="39.0544%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11,295,251,006 samples, 1.23%)</title><rect x="38.8044%" y="213" width="1.2338%" height="15" fill="rgb(242,216,29)" fg:x="355235223500" fg:w="11295251006"/><text x="39.0544%" y="223.50"></text></g><g><title>cfree (11,251,411,464 samples, 1.23%)</title><rect x="38.8092%" y="197" width="1.2291%" height="15" fill="rgb(230,116,27)" fg:x="355279063042" fg:w="11251411464"/><text x="39.0592%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (11,970,322,072 samples, 1.31%)</title><rect x="38.8014%" y="325" width="1.3076%" height="15" fill="rgb(228,99,48)" fg:x="355207215653" fg:w="11970322072"/><text x="39.0514%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (11,970,322,072 samples, 1.31%)</title><rect x="38.8014%" y="309" width="1.3076%" height="15" fill="rgb(253,11,6)" fg:x="355207215653" fg:w="11970322072"/><text x="39.0514%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,970,322,072 samples, 1.31%)</title><rect x="38.8014%" y="293" width="1.3076%" height="15" fill="rgb(247,143,39)" fg:x="355207215653" fg:w="11970322072"/><text x="39.0514%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,970,322,072 samples, 1.31%)</title><rect x="38.8014%" y="277" width="1.3076%" height="15" fill="rgb(236,97,10)" fg:x="355207215653" fg:w="11970322072"/><text x="39.0514%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (647,063,219 samples, 0.07%)</title><rect x="40.0383%" y="261" width="0.0707%" height="15" fill="rgb(233,208,19)" fg:x="366530474506" fg:w="647063219"/><text x="40.2883%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (152,473,999 samples, 0.02%)</title><rect x="40.1089%" y="325" width="0.0167%" height="15" fill="rgb(216,164,2)" fg:x="367177537725" fg:w="152473999"/><text x="40.3589%" y="335.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (277,494,821 samples, 0.03%)</title><rect x="42.3338%" y="261" width="0.0303%" height="15" fill="rgb(220,129,5)" fg:x="387544911985" fg:w="277494821"/><text x="42.5838%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (212,811,437 samples, 0.02%)</title><rect x="42.3641%" y="261" width="0.0232%" height="15" fill="rgb(242,17,10)" fg:x="387822406806" fg:w="212811437"/><text x="42.6141%" y="271.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (2,524,789,679 samples, 0.28%)</title><rect x="42.2237%" y="277" width="0.2758%" height="15" fill="rgb(242,107,0)" fg:x="386537546399" fg:w="2524789679"/><text x="42.4737%" y="287.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (1,027,117,835 samples, 0.11%)</title><rect x="42.3873%" y="261" width="0.1122%" height="15" fill="rgb(251,28,31)" fg:x="388035218243" fg:w="1027117835"/><text x="42.6373%" y="271.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (172,570,132 samples, 0.02%)</title><rect x="43.1980%" y="213" width="0.0189%" height="15" fill="rgb(233,223,10)" fg:x="395456662141" fg:w="172570132"/><text x="43.4480%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (711,385,565 samples, 0.08%)</title><rect x="43.3322%" y="197" width="0.0777%" height="15" fill="rgb(215,21,27)" fg:x="396685184571" fg:w="711385565"/><text x="43.5822%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (2,113,446,601 samples, 0.23%)</title><rect x="43.2169%" y="213" width="0.2309%" height="15" fill="rgb(232,23,21)" fg:x="395629232273" fg:w="2113446601"/><text x="43.4669%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (346,108,738 samples, 0.04%)</title><rect x="43.4099%" y="197" width="0.0378%" height="15" fill="rgb(244,5,23)" fg:x="397396570136" fg:w="346108738"/><text x="43.6599%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (5,159,705,063 samples, 0.56%)</title><rect x="42.9760%" y="245" width="0.5636%" height="15" fill="rgb(226,81,46)" fg:x="393424171804" fg:w="5159705063"/><text x="43.2260%" y="255.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (4,778,980,045 samples, 0.52%)</title><rect x="43.0176%" y="229" width="0.5220%" height="15" fill="rgb(247,70,30)" fg:x="393804896822" fg:w="4778980045"/><text x="43.2676%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (841,197,993 samples, 0.09%)</title><rect x="43.4478%" y="213" width="0.0919%" height="15" fill="rgb(212,68,19)" fg:x="397742678874" fg:w="841197993"/><text x="43.6978%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (9,791,506,161 samples, 1.07%)</title><rect x="42.4995%" y="277" width="1.0696%" height="15" fill="rgb(240,187,13)" fg:x="389062336078" fg:w="9791506161"/><text x="42.7495%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (9,787,442,766 samples, 1.07%)</title><rect x="42.5000%" y="261" width="1.0691%" height="15" fill="rgb(223,113,26)" fg:x="389066399473" fg:w="9787442766"/><text x="42.7500%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (269,965,372 samples, 0.03%)</title><rect x="43.5396%" y="245" width="0.0295%" height="15" fill="rgb(206,192,2)" fg:x="398583876867" fg:w="269965372"/><text x="43.7896%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (31,535,910,729 samples, 3.44%)</title><rect x="40.1256%" y="325" width="3.4449%" height="15" fill="rgb(241,108,4)" fg:x="367330011724" fg:w="31535910729"/><text x="40.3756%" y="335.50">cor..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (31,435,141,254 samples, 3.43%)</title><rect x="40.1366%" y="309" width="3.4338%" height="15" fill="rgb(247,173,49)" fg:x="367430781199" fg:w="31435141254"/><text x="40.3866%" y="319.50">cor..</text></g><g><title>core::num::dec2flt::dec2flt (29,360,756,584 samples, 3.21%)</title><rect x="40.3632%" y="293" width="3.2072%" height="15" fill="rgb(224,114,35)" fg:x="369505165869" fg:w="29360756584"/><text x="40.6132%" y="303.50">cor..</text></g><g><title>core::str::&lt;impl str&gt;::split (1,054,377,352 samples, 0.12%)</title><rect x="43.5704%" y="325" width="0.1152%" height="15" fill="rgb(245,159,27)" fg:x="398865922453" fg:w="1054377352"/><text x="43.8204%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (612,316,935 samples, 0.07%)</title><rect x="44.0413%" y="309" width="0.0669%" height="15" fill="rgb(245,172,44)" fg:x="403176558479" fg:w="612316935"/><text x="44.2913%" y="319.50"></text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (12,342,445,638 samples, 1.35%)</title><rect x="44.1205%" y="293" width="1.3482%" height="15" fill="rgb(236,23,11)" fg:x="403901802294" fg:w="12342445638"/><text x="44.3705%" y="303.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (3,132,866,869 samples, 0.34%)</title><rect x="45.4782%" y="293" width="0.3422%" height="15" fill="rgb(205,117,38)" fg:x="416330222745" fg:w="3132866869"/><text x="45.7282%" y="303.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (2,506,070,099 samples, 0.27%)</title><rect x="45.5466%" y="277" width="0.2738%" height="15" fill="rgb(237,72,25)" fg:x="416957019515" fg:w="2506070099"/><text x="45.7966%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1,479,451,143 samples, 0.16%)</title><rect x="45.6588%" y="261" width="0.1616%" height="15" fill="rgb(244,70,9)" fg:x="417983638471" fg:w="1479451143"/><text x="45.9088%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (1,479,451,143 samples, 0.16%)</title><rect x="45.6588%" y="245" width="0.1616%" height="15" fill="rgb(217,125,39)" fg:x="417983638471" fg:w="1479451143"/><text x="45.9088%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (418,020,049 samples, 0.05%)</title><rect x="46.3698%" y="277" width="0.0457%" height="15" fill="rgb(235,36,10)" fg:x="424492697037" fg:w="418020049"/><text x="46.6198%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (521,715,557 samples, 0.06%)</title><rect x="46.4155%" y="277" width="0.0570%" height="15" fill="rgb(251,123,47)" fg:x="424910717086" fg:w="521715557"/><text x="46.6655%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (521,715,557 samples, 0.06%)</title><rect x="46.4155%" y="261" width="0.0570%" height="15" fill="rgb(221,13,13)" fg:x="424910717086" fg:w="521715557"/><text x="46.6655%" y="271.50"></text></g><g><title>core::slice::index::get_noubcheck (521,715,557 samples, 0.06%)</title><rect x="46.4155%" y="245" width="0.0570%" height="15" fill="rgb(238,131,9)" fg:x="424910717086" fg:w="521715557"/><text x="46.6655%" y="255.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (26,493,887,101 samples, 2.89%)</title><rect x="43.6856%" y="325" width="2.8941%" height="15" fill="rgb(211,50,8)" fg:x="399920299805" fg:w="26493887101"/><text x="43.9356%" y="335.50">cr..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (22,625,311,492 samples, 2.47%)</title><rect x="44.1082%" y="309" width="2.4715%" height="15" fill="rgb(245,182,24)" fg:x="403788875414" fg:w="22625311492"/><text x="44.3582%" y="319.50">cr..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_recv (6,951,097,292 samples, 0.76%)</title><rect x="45.8204%" y="293" width="0.7593%" height="15" fill="rgb(242,14,37)" fg:x="419463089614" fg:w="6951097292"/><text x="46.0704%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (981,754,263 samples, 0.11%)</title><rect x="46.4725%" y="277" width="0.1072%" height="15" fill="rgb(246,228,12)" fg:x="425432432643" fg:w="981754263"/><text x="46.7225%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (981,754,263 samples, 0.11%)</title><rect x="46.4725%" y="261" width="0.1072%" height="15" fill="rgb(213,55,15)" fg:x="425432432643" fg:w="981754263"/><text x="46.7225%" y="271.50"></text></g><g><title>one_brc::station::StationAverage::update_values (2,793,184,285 samples, 0.31%)</title><rect x="46.5797%" y="325" width="0.3051%" height="15" fill="rgb(209,9,3)" fg:x="426414186906" fg:w="2793184285"/><text x="46.8297%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,134,301,888 samples, 0.23%)</title><rect x="48.5276%" y="181" width="0.2331%" height="15" fill="rgb(230,59,30)" fg:x="444245738148" fg:w="2134301888"/><text x="48.7776%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,219,639,598 samples, 0.35%)</title><rect x="48.4309%" y="197" width="0.3517%" height="15" fill="rgb(209,121,21)" fg:x="443361159316" fg:w="3219639598"/><text x="48.6809%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (200,758,878 samples, 0.02%)</title><rect x="48.7607%" y="181" width="0.0219%" height="15" fill="rgb(220,109,13)" fg:x="446380040036" fg:w="200758878"/><text x="49.0107%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,620,963,458 samples, 0.72%)</title><rect x="48.9845%" y="181" width="0.7232%" height="15" fill="rgb(232,18,1)" fg:x="448428584776" fg:w="6620963458"/><text x="49.2345%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (26,610,394,995 samples, 2.91%)</title><rect x="47.2269%" y="245" width="2.9068%" height="15" fill="rgb(215,41,42)" fg:x="432339181431" fg:w="26610394995"/><text x="47.4769%" y="255.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (26,610,394,995 samples, 2.91%)</title><rect x="47.2269%" y="229" width="2.9068%" height="15" fill="rgb(224,123,36)" fg:x="432339181431" fg:w="26610394995"/><text x="47.4769%" y="239.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (26,610,394,995 samples, 2.91%)</title><rect x="47.2269%" y="213" width="2.9068%" height="15" fill="rgb(240,125,3)" fg:x="432339181431" fg:w="26610394995"/><text x="47.4769%" y="223.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12,368,777,512 samples, 1.35%)</title><rect x="48.7826%" y="197" width="1.3511%" height="15" fill="rgb(205,98,50)" fg:x="446580798914" fg:w="12368777512"/><text x="49.0326%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,900,028,192 samples, 0.43%)</title><rect x="49.7077%" y="181" width="0.4260%" height="15" fill="rgb(205,185,37)" fg:x="455049548234" fg:w="3900028192"/><text x="49.9577%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,043,238,212 samples, 0.22%)</title><rect x="50.1337%" y="245" width="0.2232%" height="15" fill="rgb(238,207,15)" fg:x="458949576426" fg:w="2043238212"/><text x="50.3837%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,054,305,496 samples, 0.12%)</title><rect x="50.2418%" y="229" width="0.1152%" height="15" fill="rgb(213,199,42)" fg:x="459938509142" fg:w="1054305496"/><text x="50.4918%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,054,305,496 samples, 0.12%)</title><rect x="50.2418%" y="213" width="0.1152%" height="15" fill="rgb(235,201,11)" fg:x="459938509142" fg:w="1054305496"/><text x="50.4918%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,054,305,496 samples, 0.12%)</title><rect x="50.2418%" y="197" width="0.1152%" height="15" fill="rgb(207,46,11)" fg:x="459938509142" fg:w="1054305496"/><text x="50.4918%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (457,701,529 samples, 0.05%)</title><rect x="50.7029%" y="117" width="0.0500%" height="15" fill="rgb(241,35,35)" fg:x="464159857299" fg:w="457701529"/><text x="50.9529%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,568,989,296 samples, 0.17%)</title><rect x="50.5907%" y="133" width="0.1714%" height="15" fill="rgb(243,32,47)" fg:x="463132833911" fg:w="1568989296"/><text x="50.8407%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,289,087,266 samples, 0.69%)</title><rect x="50.4651%" y="149" width="0.6870%" height="15" fill="rgb(247,202,23)" fg:x="461983236334" fg:w="6289087266"/><text x="50.7151%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (3,570,500,393 samples, 0.39%)</title><rect x="50.7621%" y="133" width="0.3900%" height="15" fill="rgb(219,102,11)" fg:x="464701823207" fg:w="3570500393"/><text x="51.0121%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (591,978,076 samples, 0.06%)</title><rect x="51.0875%" y="117" width="0.0647%" height="15" fill="rgb(243,110,44)" fg:x="467680345524" fg:w="591978076"/><text x="51.3375%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (249,595,792 samples, 0.03%)</title><rect x="51.8552%" y="101" width="0.0273%" height="15" fill="rgb(222,74,54)" fg:x="474708281706" fg:w="249595792"/><text x="52.1052%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (748,449,542 samples, 0.08%)</title><rect x="51.8204%" y="117" width="0.0818%" height="15" fill="rgb(216,99,12)" fg:x="474390492055" fg:w="748449542"/><text x="52.0704%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (181,064,099 samples, 0.02%)</title><rect x="51.8824%" y="101" width="0.0198%" height="15" fill="rgb(226,22,26)" fg:x="474957877498" fg:w="181064099"/><text x="52.1324%" y="111.50"></text></g><g><title>core::cmp::min (479,320,291 samples, 0.05%)</title><rect x="51.9022%" y="117" width="0.0524%" height="15" fill="rgb(217,163,10)" fg:x="475138941597" fg:w="479320291"/><text x="52.1522%" y="127.50"></text></g><g><title>core::cmp::Ord::min (479,320,291 samples, 0.05%)</title><rect x="51.9022%" y="101" width="0.0524%" height="15" fill="rgb(213,25,53)" fg:x="475138941597" fg:w="479320291"/><text x="52.1522%" y="111.50"></text></g><g><title>core::cmp::min_by (479,320,291 samples, 0.05%)</title><rect x="51.9022%" y="85" width="0.0524%" height="15" fill="rgb(252,105,26)" fg:x="475138941597" fg:w="479320291"/><text x="52.1522%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (48,626,346,492 samples, 5.31%)</title><rect x="47.0032%" y="277" width="5.3117%" height="15" fill="rgb(220,39,43)" fg:x="430290988986" fg:w="48626346492"/><text x="47.2532%" y="287.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (48,569,837,381 samples, 5.31%)</title><rect x="47.0094%" y="261" width="5.3056%" height="15" fill="rgb(229,68,48)" fg:x="430347498097" fg:w="48569837381"/><text x="47.2594%" y="271.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17,924,520,840 samples, 1.96%)</title><rect x="50.3569%" y="245" width="1.9580%" height="15" fill="rgb(252,8,32)" fg:x="460992814638" fg:w="17924520840"/><text x="50.6069%" y="255.50">c..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (17,924,520,840 samples, 1.96%)</title><rect x="50.3569%" y="229" width="1.9580%" height="15" fill="rgb(223,20,43)" fg:x="460992814638" fg:w="17924520840"/><text x="50.6069%" y="239.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (17,924,520,840 samples, 1.96%)</title><rect x="50.3569%" y="213" width="1.9580%" height="15" fill="rgb(229,81,49)" fg:x="460992814638" fg:w="17924520840"/><text x="50.6069%" y="223.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (17,924,520,840 samples, 1.96%)</title><rect x="50.3569%" y="197" width="1.9580%" height="15" fill="rgb(236,28,36)" fg:x="460992814638" fg:w="17924520840"/><text x="50.6069%" y="207.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (17,924,520,840 samples, 1.96%)</title><rect x="50.3569%" y="181" width="1.9580%" height="15" fill="rgb(249,185,26)" fg:x="460992814638" fg:w="17924520840"/><text x="50.6069%" y="191.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (17,924,520,840 samples, 1.96%)</title><rect x="50.3569%" y="165" width="1.9580%" height="15" fill="rgb(249,174,33)" fg:x="460992814638" fg:w="17924520840"/><text x="50.6069%" y="175.50">&lt;..</text></g><g><title>core::hash::Hasher::write_u8 (10,645,011,878 samples, 1.16%)</title><rect x="51.1521%" y="149" width="1.1628%" height="15" fill="rgb(233,201,37)" fg:x="468272323600" fg:w="10645011878"/><text x="51.4021%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,448,617,049 samples, 1.03%)</title><rect x="51.2828%" y="133" width="1.0321%" height="15" fill="rgb(221,78,26)" fg:x="469468718429" fg:w="9448617049"/><text x="51.5328%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (3,299,073,590 samples, 0.36%)</title><rect x="51.9546%" y="117" width="0.3604%" height="15" fill="rgb(250,127,30)" fg:x="475618261888" fg:w="3299073590"/><text x="52.2046%" y="127.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5,070,815,197 samples, 0.55%)</title><rect x="52.5978%" y="229" width="0.5539%" height="15" fill="rgb(230,49,44)" fg:x="481506810733" fg:w="5070815197"/><text x="52.8478%" y="239.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (5,070,815,197 samples, 0.55%)</title><rect x="52.5978%" y="213" width="0.5539%" height="15" fill="rgb(229,67,23)" fg:x="481506810733" fg:w="5070815197"/><text x="52.8478%" y="223.50"></text></g><g><title>core::intrinsics::likely (479,875,040 samples, 0.05%)</title><rect x="53.1517%" y="229" width="0.0524%" height="15" fill="rgb(249,83,47)" fg:x="486577625930" fg:w="479875040"/><text x="53.4017%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (406,011,763 samples, 0.04%)</title><rect x="53.2041%" y="229" width="0.0444%" height="15" fill="rgb(215,43,3)" fg:x="487057500970" fg:w="406011763"/><text x="53.4541%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (406,011,763 samples, 0.04%)</title><rect x="53.2041%" y="213" width="0.0444%" height="15" fill="rgb(238,154,13)" fg:x="487057500970" fg:w="406011763"/><text x="53.4541%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (406,011,763 samples, 0.04%)</title><rect x="53.2041%" y="197" width="0.0444%" height="15" fill="rgb(219,56,2)" fg:x="487057500970" fg:w="406011763"/><text x="53.4541%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,970,597,858 samples, 0.22%)</title><rect x="53.2485%" y="229" width="0.2153%" height="15" fill="rgb(233,0,4)" fg:x="487463512733" fg:w="1970597858"/><text x="53.4985%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,970,597,858 samples, 0.22%)</title><rect x="53.2485%" y="213" width="0.2153%" height="15" fill="rgb(235,30,7)" fg:x="487463512733" fg:w="1970597858"/><text x="53.4985%" y="223.50"></text></g><g><title>hashbrown::control::tag::Tag::full (5,873,288,823 samples, 0.64%)</title><rect x="53.4637%" y="229" width="0.6416%" height="15" fill="rgb(250,79,13)" fg:x="489434110591" fg:w="5873288823"/><text x="53.7137%" y="239.50"></text></g><g><title>[libc.so.6] (25,871,219,585 samples, 2.83%)</title><rect x="55.7275%" y="101" width="2.8261%" height="15" fill="rgb(211,146,34)" fg:x="510157666441" fg:w="25871219585"/><text x="55.9775%" y="111.50">[l..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (39,979,547,304 samples, 4.37%)</title><rect x="54.1885%" y="213" width="4.3672%" height="15" fill="rgb(228,22,38)" fg:x="496069207492" fg:w="39979547304"/><text x="54.4385%" y="223.50">hashb..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (39,979,547,304 samples, 4.37%)</title><rect x="54.1885%" y="197" width="4.3672%" height="15" fill="rgb(235,168,5)" fg:x="496069207492" fg:w="39979547304"/><text x="54.4385%" y="207.50">&lt;Q as..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39,979,547,304 samples, 4.37%)</title><rect x="54.1885%" y="181" width="4.3672%" height="15" fill="rgb(221,155,16)" fg:x="496069207492" fg:w="39979547304"/><text x="54.4385%" y="191.50">core:..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (39,979,547,304 samples, 4.37%)</title><rect x="54.1885%" y="165" width="4.3672%" height="15" fill="rgb(215,215,53)" fg:x="496069207492" fg:w="39979547304"/><text x="54.4385%" y="175.50">&lt;allo..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (39,979,547,304 samples, 4.37%)</title><rect x="54.1885%" y="149" width="4.3672%" height="15" fill="rgb(223,4,10)" fg:x="496069207492" fg:w="39979547304"/><text x="54.4385%" y="159.50">alloc..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (39,979,547,304 samples, 4.37%)</title><rect x="54.1885%" y="133" width="4.3672%" height="15" fill="rgb(234,103,6)" fg:x="496069207492" fg:w="39979547304"/><text x="54.4385%" y="143.50">core:..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (39,979,547,304 samples, 4.37%)</title><rect x="54.1885%" y="117" width="4.3672%" height="15" fill="rgb(227,97,0)" fg:x="496069207492" fg:w="39979547304"/><text x="54.4385%" y="127.50">&lt;[A] ..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (42,741,399,801 samples, 4.67%)</title><rect x="54.1075%" y="229" width="4.6689%" height="15" fill="rgb(234,150,53)" fg:x="495327675758" fg:w="42741399801"/><text x="54.3575%" y="239.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2,020,320,763 samples, 0.22%)</title><rect x="58.5557%" y="213" width="0.2207%" height="15" fill="rgb(228,201,54)" fg:x="536048754796" fg:w="2020320763"/><text x="58.8057%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2,020,320,763 samples, 0.22%)</title><rect x="58.5557%" y="197" width="0.2207%" height="15" fill="rgb(222,22,37)" fg:x="536048754796" fg:w="2020320763"/><text x="58.8057%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2,020,320,763 samples, 0.22%)</title><rect x="58.5557%" y="181" width="0.2207%" height="15" fill="rgb(237,53,32)" fg:x="536048754796" fg:w="2020320763"/><text x="58.8057%" y="191.50"></text></g><g><title>[libc.so.6] (539,073,776,052 samples, 58.89%)</title><rect x="0.0002%" y="549" width="58.8862%" height="15" fill="rgb(233,25,53)" fg:x="2220231" fg:w="539073776052"/><text x="0.2502%" y="559.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="533" width="58.8399%" height="15" fill="rgb(210,40,34)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="543.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="517" width="58.8399%" height="15" fill="rgb(241,220,44)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="501" width="58.8399%" height="15" fill="rgb(235,28,35)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="485" width="58.8399%" height="15" fill="rgb(210,56,17)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="469" width="58.8399%" height="15" fill="rgb(224,130,29)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="479.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="453" width="58.8399%" height="15" fill="rgb(235,212,8)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="437" width="58.8399%" height="15" fill="rgb(223,33,50)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="421" width="58.8399%" height="15" fill="rgb(219,149,13)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="431.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="405" width="58.8399%" height="15" fill="rgb(250,156,29)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="415.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="389" width="58.8399%" height="15" fill="rgb(216,193,19)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="399.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="373" width="58.8399%" height="15" fill="rgb(216,135,14)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="383.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}} (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="357" width="58.8399%" height="15" fill="rgb(241,47,5)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="367.50">one_brc::main::_{{closure}}</text></g><g><title>one_brc::worker_pool::Worker::listen (538,649,848,927 samples, 58.84%)</title><rect x="0.0466%" y="341" width="58.8399%" height="15" fill="rgb(233,42,35)" fg:x="426147356" fg:w="538649848927"/><text x="0.2966%" y="351.50">one_brc::worker_pool::Worker::listen</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (109,868,625,092 samples, 12.00%)</title><rect x="46.8848%" y="325" width="12.0016%" height="15" fill="rgb(231,13,6)" fg:x="429207371191" fg:w="109868625092"/><text x="47.1348%" y="335.50">std::collections::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (109,868,625,092 samples, 12.00%)</title><rect x="46.8848%" y="309" width="12.0016%" height="15" fill="rgb(207,181,40)" fg:x="429207371191" fg:w="109868625092"/><text x="47.1348%" y="319.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (109,868,625,092 samples, 12.00%)</title><rect x="46.8848%" y="293" width="12.0016%" height="15" fill="rgb(254,173,49)" fg:x="429207371191" fg:w="109868625092"/><text x="47.1348%" y="303.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (60,158,660,805 samples, 6.57%)</title><rect x="52.3149%" y="277" width="6.5715%" height="15" fill="rgb(221,1,38)" fg:x="478917335478" fg:w="60158660805"/><text x="52.5649%" y="287.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (60,158,660,805 samples, 6.57%)</title><rect x="52.3149%" y="261" width="6.5715%" height="15" fill="rgb(206,124,46)" fg:x="478917335478" fg:w="60158660805"/><text x="52.5649%" y="271.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (60,158,660,805 samples, 6.57%)</title><rect x="52.3149%" y="245" width="6.5715%" height="15" fill="rgb(249,21,11)" fg:x="478917335478" fg:w="60158660805"/><text x="52.5649%" y="255.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1,006,920,724 samples, 0.11%)</title><rect x="58.7764%" y="229" width="0.1100%" height="15" fill="rgb(222,201,40)" fg:x="538069075559" fg:w="1006920724"/><text x="59.0264%" y="239.50"></text></g><g><title>[libc.so.6] (539,077,813,907 samples, 58.89%)</title><rect x="0.0002%" y="565" width="58.8866%" height="15" fill="rgb(235,61,29)" fg:x="2220231" fg:w="539077813907"/><text x="0.2502%" y="575.50">[libc.so.6]</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (414,734,890 samples, 0.05%)</title><rect x="58.9022%" y="245" width="0.0453%" height="15" fill="rgb(219,207,3)" fg:x="539220539550" fg:w="414734890"/><text x="59.1522%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (414,734,890 samples, 0.05%)</title><rect x="58.9022%" y="229" width="0.0453%" height="15" fill="rgb(222,56,46)" fg:x="539220539550" fg:w="414734890"/><text x="59.1522%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (414,734,890 samples, 0.05%)</title><rect x="58.9022%" y="213" width="0.0453%" height="15" fill="rgb(239,76,54)" fg:x="539220539550" fg:w="414734890"/><text x="59.1522%" y="223.50"></text></g><g><title>core::ptr::write (414,734,890 samples, 0.05%)</title><rect x="58.9022%" y="197" width="0.0453%" height="15" fill="rgb(231,124,27)" fg:x="539220539550" fg:w="414734890"/><text x="59.1522%" y="207.50"></text></g><g><title>[unknown] (320,597,728 samples, 0.04%)</title><rect x="58.9125%" y="181" width="0.0350%" height="15" fill="rgb(249,195,6)" fg:x="539314676712" fg:w="320597728"/><text x="59.1625%" y="191.50"></text></g><g><title>[unknown] (320,597,698 samples, 0.04%)</title><rect x="58.9125%" y="165" width="0.0350%" height="15" fill="rgb(237,174,47)" fg:x="539314676742" fg:w="320597698"/><text x="59.1625%" y="175.50"></text></g><g><title>[unknown] (318,985,254 samples, 0.03%)</title><rect x="58.9127%" y="149" width="0.0348%" height="15" fill="rgb(206,201,31)" fg:x="539316289186" fg:w="318985254"/><text x="59.1627%" y="159.50"></text></g><g><title>[unknown] (299,978,184 samples, 0.03%)</title><rect x="58.9147%" y="133" width="0.0328%" height="15" fill="rgb(231,57,52)" fg:x="539335296256" fg:w="299978184"/><text x="59.1647%" y="143.50"></text></g><g><title>[unknown] (220,889,585 samples, 0.02%)</title><rect x="58.9234%" y="117" width="0.0241%" height="15" fill="rgb(248,177,22)" fg:x="539414384855" fg:w="220889585"/><text x="59.1734%" y="127.50"></text></g><g><title>crossbeam_channel::channel::bounded (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="453" width="0.0472%" height="15" fill="rgb(215,211,37)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="463.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::with_capacity (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="437" width="0.0472%" height="15" fill="rgb(241,128,51)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="421" width="0.0472%" height="15" fill="rgb(227,165,31)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="431.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;I&gt; for alloc::boxed::Box&lt;[I]&gt;&gt;::from_iter (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="405" width="0.0472%" height="15" fill="rgb(228,167,24)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="389" width="0.0472%" height="15" fill="rgb(228,143,12)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="373" width="0.0472%" height="15" fill="rgb(249,149,8)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="357" width="0.0472%" height="15" fill="rgb(243,35,44)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="341" width="0.0472%" height="15" fill="rgb(246,89,9)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="325" width="0.0472%" height="15" fill="rgb(233,213,13)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="309" width="0.0472%" height="15" fill="rgb(233,141,41)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="293" width="0.0472%" height="15" fill="rgb(239,167,4)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="277" width="0.0472%" height="15" fill="rgb(209,217,16)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (432,294,886 samples, 0.05%)</title><rect x="58.9022%" y="261" width="0.0472%" height="15" fill="rgb(219,88,35)" fg:x="539220539550" fg:w="432294886"/><text x="59.1522%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (127,488,150 samples, 0.01%)</title><rect x="59.6152%" y="421" width="0.0139%" height="15" fill="rgb(220,193,23)" fg:x="545747717738" fg:w="127488150"/><text x="59.8652%" y="431.50"></text></g><g><title>alloc::string::String::as_str (127,488,150 samples, 0.01%)</title><rect x="59.6152%" y="405" width="0.0139%" height="15" fill="rgb(230,90,52)" fg:x="545747717738" fg:w="127488150"/><text x="59.8652%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (127,488,150 samples, 0.01%)</title><rect x="59.6152%" y="389" width="0.0139%" height="15" fill="rgb(252,106,19)" fg:x="545747717738" fg:w="127488150"/><text x="59.8652%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (127,488,150 samples, 0.01%)</title><rect x="59.6152%" y="373" width="0.0139%" height="15" fill="rgb(206,74,20)" fg:x="545747717738" fg:w="127488150"/><text x="59.8652%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (127,488,150 samples, 0.01%)</title><rect x="59.6152%" y="357" width="0.0139%" height="15" fill="rgb(230,138,44)" fg:x="545747717738" fg:w="127488150"/><text x="59.8652%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (127,488,150 samples, 0.01%)</title><rect x="59.6152%" y="341" width="0.0139%" height="15" fill="rgb(235,182,43)" fg:x="545747717738" fg:w="127488150"/><text x="59.8652%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (127,488,150 samples, 0.01%)</title><rect x="59.6152%" y="325" width="0.0139%" height="15" fill="rgb(242,16,51)" fg:x="545747717738" fg:w="127488150"/><text x="59.8652%" y="335.50"></text></g><g><title>alloc::string::String::new (1,517,011,852 samples, 0.17%)</title><rect x="59.6295%" y="421" width="0.1657%" height="15" fill="rgb(248,9,4)" fg:x="545878860904" fg:w="1517011852"/><text x="59.8795%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (1,161,780,001 samples, 0.13%)</title><rect x="59.7952%" y="421" width="0.1269%" height="15" fill="rgb(210,31,22)" fg:x="547395872756" fg:w="1161780001"/><text x="60.0452%" y="431.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (1,161,780,001 samples, 0.13%)</title><rect x="59.7952%" y="405" width="0.1269%" height="15" fill="rgb(239,54,39)" fg:x="547395872756" fg:w="1161780001"/><text x="60.0452%" y="415.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,161,780,001 samples, 0.13%)</title><rect x="59.7952%" y="389" width="0.1269%" height="15" fill="rgb(230,99,41)" fg:x="547395872756" fg:w="1161780001"/><text x="60.0452%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,161,780,001 samples, 0.13%)</title><rect x="59.7952%" y="373" width="0.1269%" height="15" fill="rgb(253,106,12)" fg:x="547395872756" fg:w="1161780001"/><text x="60.0452%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (100,291,048 samples, 0.01%)</title><rect x="59.9112%" y="357" width="0.0110%" height="15" fill="rgb(213,46,41)" fg:x="548457361709" fg:w="100291048"/><text x="60.1612%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (100,291,048 samples, 0.01%)</title><rect x="59.9112%" y="341" width="0.0110%" height="15" fill="rgb(215,133,35)" fg:x="548457361709" fg:w="100291048"/><text x="60.1612%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (100,291,048 samples, 0.01%)</title><rect x="59.9112%" y="325" width="0.0110%" height="15" fill="rgb(213,28,5)" fg:x="548457361709" fg:w="100291048"/><text x="60.1612%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (100,893,232 samples, 0.01%)</title><rect x="60.4341%" y="389" width="0.0110%" height="15" fill="rgb(215,77,49)" fg:x="553244283842" fg:w="100893232"/><text x="60.6841%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (100,893,232 samples, 0.01%)</title><rect x="60.4341%" y="373" width="0.0110%" height="15" fill="rgb(248,100,22)" fg:x="553244283842" fg:w="100893232"/><text x="60.6841%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (23,691,275,203 samples, 2.59%)</title><rect x="60.4451%" y="389" width="2.5879%" height="15" fill="rgb(208,67,9)" fg:x="553345177074" fg:w="23691275203"/><text x="60.6951%" y="399.50">co..</text></g><g><title>core::str::validations::run_utf8_validation (19,568,102,358 samples, 2.14%)</title><rect x="60.8955%" y="373" width="2.1375%" height="15" fill="rgb(219,133,21)" fg:x="557468349919" fg:w="19568102358"/><text x="61.1455%" y="383.50">c..</text></g><g><title>core::str::validations::utf8_char_width (240,856,303 samples, 0.03%)</title><rect x="63.0067%" y="357" width="0.0263%" height="15" fill="rgb(246,46,29)" fg:x="576795595974" fg:w="240856303"/><text x="63.2567%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1,131,473,115 samples, 0.12%)</title><rect x="63.0413%" y="357" width="0.1236%" height="15" fill="rgb(246,185,52)" fg:x="577112142148" fg:w="1131473115"/><text x="63.2913%" y="367.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1,131,473,115 samples, 0.12%)</title><rect x="63.0413%" y="341" width="0.1236%" height="15" fill="rgb(252,136,11)" fg:x="577112142148" fg:w="1131473115"/><text x="63.2913%" y="351.50"></text></g><g><title>core::cmp::min (678,915,054 samples, 0.07%)</title><rect x="63.0908%" y="325" width="0.0742%" height="15" fill="rgb(219,138,53)" fg:x="577564700209" fg:w="678915054"/><text x="63.3408%" y="335.50"></text></g><g><title>core::cmp::Ord::min (678,915,054 samples, 0.07%)</title><rect x="63.0908%" y="309" width="0.0742%" height="15" fill="rgb(211,51,23)" fg:x="577564700209" fg:w="678915054"/><text x="63.3408%" y="319.50"></text></g><g><title>core::cmp::min_by (678,915,054 samples, 0.07%)</title><rect x="63.0908%" y="293" width="0.0742%" height="15" fill="rgb(247,221,28)" fg:x="577564700209" fg:w="678915054"/><text x="63.3408%" y="303.50"></text></g><g><title>read (1,951,599,655 samples, 0.21%)</title><rect x="63.2368%" y="245" width="0.2132%" height="15" fill="rgb(251,222,45)" fg:x="578901367065" fg:w="1951599655"/><text x="63.4868%" y="255.50"></text></g><g><title>[libc.so.6] (1,929,653,075 samples, 0.21%)</title><rect x="63.2392%" y="229" width="0.2108%" height="15" fill="rgb(217,162,53)" fg:x="578923313645" fg:w="1929653075"/><text x="63.4892%" y="239.50"></text></g><g><title>[libc.so.6] (1,915,356,994 samples, 0.21%)</title><rect x="63.2407%" y="213" width="0.2092%" height="15" fill="rgb(229,93,14)" fg:x="578937609726" fg:w="1915356994"/><text x="63.4907%" y="223.50"></text></g><g><title>[libc.so.6] (1,901,037,716 samples, 0.21%)</title><rect x="63.2423%" y="197" width="0.2077%" height="15" fill="rgb(209,67,49)" fg:x="578951929004" fg:w="1901037716"/><text x="63.4923%" y="207.50"></text></g><g><title>[unknown] (1,893,977,959 samples, 0.21%)</title><rect x="63.2431%" y="181" width="0.2069%" height="15" fill="rgb(213,87,29)" fg:x="578958988761" fg:w="1893977959"/><text x="63.4931%" y="191.50"></text></g><g><title>[unknown] (1,720,483,196 samples, 0.19%)</title><rect x="63.2620%" y="165" width="0.1879%" height="15" fill="rgb(205,151,52)" fg:x="579132483524" fg:w="1720483196"/><text x="63.5120%" y="175.50"></text></g><g><title>[unknown] (1,629,302,418 samples, 0.18%)</title><rect x="63.2720%" y="149" width="0.1780%" height="15" fill="rgb(253,215,39)" fg:x="579223664302" fg:w="1629302418"/><text x="63.5220%" y="159.50"></text></g><g><title>[unknown] (1,491,915,096 samples, 0.16%)</title><rect x="63.2870%" y="133" width="0.1630%" height="15" fill="rgb(221,220,41)" fg:x="579361051624" fg:w="1491915096"/><text x="63.5370%" y="143.50"></text></g><g><title>[unknown] (1,036,125,242 samples, 0.11%)</title><rect x="63.3368%" y="117" width="0.1132%" height="15" fill="rgb(218,133,21)" fg:x="579816841478" fg:w="1036125242"/><text x="63.5868%" y="127.50"></text></g><g><title>[unknown] (665,018,645 samples, 0.07%)</title><rect x="63.3773%" y="101" width="0.0726%" height="15" fill="rgb(221,193,43)" fg:x="580187948075" fg:w="665018645"/><text x="63.6273%" y="111.50"></text></g><g><title>[unknown] (592,404,837 samples, 0.06%)</title><rect x="63.3852%" y="85" width="0.0647%" height="15" fill="rgb(240,128,52)" fg:x="580260561883" fg:w="592404837"/><text x="63.6352%" y="95.50"></text></g><g><title>[unknown] (369,469,150 samples, 0.04%)</title><rect x="63.4096%" y="69" width="0.0404%" height="15" fill="rgb(253,114,12)" fg:x="580483497570" fg:w="369469150"/><text x="63.6596%" y="79.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2,609,351,459 samples, 0.29%)</title><rect x="63.1649%" y="357" width="0.2850%" height="15" fill="rgb(215,223,47)" fg:x="578243615263" fg:w="2609351459"/><text x="63.4149%" y="367.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2,609,351,459 samples, 0.29%)</title><rect x="63.1649%" y="341" width="0.2850%" height="15" fill="rgb(248,225,23)" fg:x="578243615263" fg:w="2609351459"/><text x="63.4149%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1,962,542,885 samples, 0.21%)</title><rect x="63.2356%" y="325" width="0.2144%" height="15" fill="rgb(250,108,0)" fg:x="578890423837" fg:w="1962542885"/><text x="63.4856%" y="335.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1,962,542,885 samples, 0.21%)</title><rect x="63.2356%" y="309" width="0.2144%" height="15" fill="rgb(228,208,7)" fg:x="578890423837" fg:w="1962542885"/><text x="63.4856%" y="319.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1,962,542,885 samples, 0.21%)</title><rect x="63.2356%" y="293" width="0.2144%" height="15" fill="rgb(244,45,10)" fg:x="578890423837" fg:w="1962542885"/><text x="63.4856%" y="303.50"></text></g><g><title>std::sys::pal::unix::fs::File::read_buf (1,962,542,885 samples, 0.21%)</title><rect x="63.2356%" y="277" width="0.2144%" height="15" fill="rgb(207,125,25)" fg:x="578890423837" fg:w="1962542885"/><text x="63.4856%" y="287.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (1,962,542,885 samples, 0.21%)</title><rect x="63.2356%" y="261" width="0.2144%" height="15" fill="rgb(210,195,18)" fg:x="578890423837" fg:w="1962542885"/><text x="63.4856%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3,801,597,871 samples, 0.42%)</title><rect x="63.5772%" y="309" width="0.4153%" height="15" fill="rgb(249,80,12)" fg:x="582018255212" fg:w="3801597871"/><text x="63.8272%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,801,597,871 samples, 0.42%)</title><rect x="63.5772%" y="293" width="0.4153%" height="15" fill="rgb(221,65,9)" fg:x="582018255212" fg:w="3801597871"/><text x="63.8272%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,801,597,871 samples, 0.42%)</title><rect x="63.5772%" y="277" width="0.4153%" height="15" fill="rgb(235,49,36)" fg:x="582018255212" fg:w="3801597871"/><text x="63.8272%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,801,597,871 samples, 0.42%)</title><rect x="63.5772%" y="261" width="0.4153%" height="15" fill="rgb(225,32,20)" fg:x="582018255212" fg:w="3801597871"/><text x="63.8272%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (201,072,923 samples, 0.02%)</title><rect x="63.9925%" y="309" width="0.0220%" height="15" fill="rgb(215,141,46)" fg:x="585819853083" fg:w="201072923"/><text x="64.2425%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (2,552,287,938 samples, 0.28%)</title><rect x="64.2144%" y="245" width="0.2788%" height="15" fill="rgb(250,160,47)" fg:x="587850702369" fg:w="2552287938"/><text x="64.4644%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (3,501,564,899 samples, 0.38%)</title><rect x="64.1128%" y="261" width="0.3825%" height="15" fill="rgb(216,222,40)" fg:x="586921250347" fg:w="3501564899"/><text x="64.3628%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1,023,665,304 samples, 0.11%)</title><rect x="64.7413%" y="229" width="0.1118%" height="15" fill="rgb(234,217,39)" fg:x="592674134866" fg:w="1023665304"/><text x="64.9913%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (793,471,094 samples, 0.09%)</title><rect x="64.8589%" y="229" width="0.0867%" height="15" fill="rgb(207,178,40)" fg:x="593751287511" fg:w="793471094"/><text x="65.1089%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (112,513,533 samples, 0.01%)</title><rect x="65.5227%" y="213" width="0.0123%" height="15" fill="rgb(221,136,13)" fg:x="599827559563" fg:w="112513533"/><text x="65.7727%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (112,513,533 samples, 0.01%)</title><rect x="65.5227%" y="197" width="0.0123%" height="15" fill="rgb(249,199,10)" fg:x="599827559563" fg:w="112513533"/><text x="65.7727%" y="207.50"></text></g><g><title>alloc::alloc::realloc (112,513,533 samples, 0.01%)</title><rect x="65.5227%" y="181" width="0.0123%" height="15" fill="rgb(249,222,13)" fg:x="599827559563" fg:w="112513533"/><text x="65.7727%" y="191.50"></text></g><g><title>__rdl_realloc (112,513,533 samples, 0.01%)</title><rect x="65.5227%" y="165" width="0.0123%" height="15" fill="rgb(244,185,38)" fg:x="599827559563" fg:w="112513533"/><text x="65.7727%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (112,513,533 samples, 0.01%)</title><rect x="65.5227%" y="149" width="0.0123%" height="15" fill="rgb(236,202,9)" fg:x="599827559563" fg:w="112513533"/><text x="65.7727%" y="159.50"></text></g><g><title>realloc (112,513,533 samples, 0.01%)</title><rect x="65.5227%" y="133" width="0.0123%" height="15" fill="rgb(250,229,37)" fg:x="599827559563" fg:w="112513533"/><text x="65.7727%" y="143.50"></text></g><g><title>[libc.so.6] (112,513,415 samples, 0.01%)</title><rect x="65.5227%" y="117" width="0.0123%" height="15" fill="rgb(206,174,23)" fg:x="599827559681" fg:w="112513415"/><text x="65.7727%" y="127.50"></text></g><g><title>[libc.so.6] (105,356,268 samples, 0.01%)</title><rect x="65.5234%" y="101" width="0.0115%" height="15" fill="rgb(211,33,43)" fg:x="599834716828" fg:w="105356268"/><text x="65.7734%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1,063,392,741 samples, 0.12%)</title><rect x="65.5354%" y="213" width="0.1162%" height="15" fill="rgb(245,58,50)" fg:x="599943730496" fg:w="1063392741"/><text x="65.7854%" y="223.50"></text></g><g><title>[libc.so.6] (185,954,539,107 samples, 20.31%)</title><rect x="71.3383%" y="197" width="20.3129%" height="15" fill="rgb(244,68,36)" fg:x="653067272173" fg:w="185954539107"/><text x="71.5883%" y="207.50">[libc.so.6]</text></g><g><title>[unknown] (434,245,220 samples, 0.05%)</title><rect x="91.6038%" y="181" width="0.0474%" height="15" fill="rgb(232,229,15)" fg:x="838587566060" fg:w="434245220"/><text x="91.8538%" y="191.50"></text></g><g><title>[unknown] (364,158,726 samples, 0.04%)</title><rect x="91.6115%" y="165" width="0.0398%" height="15" fill="rgb(254,30,23)" fg:x="838657652554" fg:w="364158726"/><text x="91.8615%" y="175.50"></text></g><g><title>[unknown] (304,587,424 samples, 0.03%)</title><rect x="91.6180%" y="149" width="0.0333%" height="15" fill="rgb(235,160,14)" fg:x="838717223856" fg:w="304587424"/><text x="91.8680%" y="159.50"></text></g><g><title>[unknown] (233,128,473 samples, 0.03%)</title><rect x="91.6258%" y="133" width="0.0255%" height="15" fill="rgb(212,155,44)" fg:x="838788682807" fg:w="233128473"/><text x="91.8758%" y="143.50"></text></g><g><title>[unknown] (148,139,713 samples, 0.02%)</title><rect x="91.6351%" y="117" width="0.0162%" height="15" fill="rgb(226,2,50)" fg:x="838873671567" fg:w="148139713"/><text x="91.8851%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (244,501,409,632 samples, 26.71%)</title><rect x="64.9456%" y="229" width="26.7083%" height="15" fill="rgb(234,177,6)" fg:x="594544758605" fg:w="244501409632"/><text x="65.1956%" y="239.50">alloc::raw_vec::finish_grow</text></g><g><title>malloc (238,039,045,000 samples, 26.00%)</title><rect x="65.6515%" y="213" width="26.0024%" height="15" fill="rgb(217,24,9)" fg:x="601007123237" fg:w="238039045000"/><text x="65.9015%" y="223.50">malloc</text></g><g><title>alloc::raw_vec::layout_array (1,780,384,709 samples, 0.19%)</title><rect x="91.6539%" y="229" width="0.1945%" height="15" fill="rgb(220,13,46)" fg:x="839046168237" fg:w="1780384709"/><text x="91.9039%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1,780,384,709 samples, 0.19%)</title><rect x="91.6539%" y="213" width="0.1945%" height="15" fill="rgb(239,221,27)" fg:x="839046168237" fg:w="1780384709"/><text x="91.9039%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (901,810,915 samples, 0.10%)</title><rect x="91.7499%" y="197" width="0.0985%" height="15" fill="rgb(222,198,25)" fg:x="839924742031" fg:w="901810915"/><text x="91.9999%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (901,810,915 samples, 0.10%)</title><rect x="91.7499%" y="181" width="0.0985%" height="15" fill="rgb(211,99,13)" fg:x="839924742031" fg:w="901810915"/><text x="91.9999%" y="191.50"></text></g><g><title>core::intrinsics::unlikely (901,810,915 samples, 0.10%)</title><rect x="91.7499%" y="165" width="0.0985%" height="15" fill="rgb(232,111,31)" fg:x="839924742031" fg:w="901810915"/><text x="91.9999%" y="175.50"></text></g><g><title>core::cmp::max (3,512,863,710 samples, 0.38%)</title><rect x="91.8484%" y="229" width="0.3837%" height="15" fill="rgb(245,82,37)" fg:x="840826552946" fg:w="3512863710"/><text x="92.0984%" y="239.50"></text></g><g><title>core::cmp::Ord::max (3,512,863,710 samples, 0.38%)</title><rect x="91.8484%" y="213" width="0.3837%" height="15" fill="rgb(227,149,46)" fg:x="840826552946" fg:w="3512863710"/><text x="92.0984%" y="223.50"></text></g><g><title>core::cmp::max_by (3,512,863,710 samples, 0.38%)</title><rect x="91.8484%" y="197" width="0.3837%" height="15" fill="rgb(218,36,50)" fg:x="840826552946" fg:w="3512863710"/><text x="92.0984%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (259,322,539,636 samples, 28.33%)</title><rect x="64.0145%" y="309" width="28.3273%" height="15" fill="rgb(226,80,48)" fg:x="586020926006" fg:w="259322539636"/><text x="64.2645%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (259,322,539,636 samples, 28.33%)</title><rect x="64.0145%" y="293" width="28.3273%" height="15" fill="rgb(238,224,15)" fg:x="586020926006" fg:w="259322539636"/><text x="64.2645%" y="303.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (259,322,539,636 samples, 28.33%)</title><rect x="64.0145%" y="277" width="28.3273%" height="15" fill="rgb(241,136,10)" fg:x="586020926006" fg:w="259322539636"/><text x="64.2645%" y="287.50">alloc::raw_vec::RawVecInner&lt;A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (254,920,650,396 samples, 27.85%)</title><rect x="64.4953%" y="261" width="27.8465%" height="15" fill="rgb(208,32,45)" fg:x="590422815246" fg:w="254920650396"/><text x="64.7453%" y="271.50">alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (254,518,983,631 samples, 27.80%)</title><rect x="64.5392%" y="245" width="27.8026%" height="15" fill="rgb(207,135,9)" fg:x="590824482011" fg:w="254518983631"/><text x="64.7892%" y="255.50">alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1,004,048,986 samples, 0.11%)</title><rect x="92.2321%" y="229" width="0.1097%" height="15" fill="rgb(206,86,44)" fg:x="844339416656" fg:w="1004048986"/><text x="92.4821%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,638,658,347 samples, 0.62%)</title><rect x="92.3418%" y="309" width="0.6159%" height="15" fill="rgb(245,177,15)" fg:x="845343465642" fg:w="5638658347"/><text x="92.5918%" y="319.50"></text></g><g><title>[libc.so.6] (5,335,139,545 samples, 0.58%)</title><rect x="92.3749%" y="293" width="0.5828%" height="15" fill="rgb(206,64,50)" fg:x="845646984444" fg:w="5335139545"/><text x="92.6249%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (270,285,084,715 samples, 29.52%)</title><rect x="63.4500%" y="357" width="29.5248%" height="15" fill="rgb(234,36,40)" fg:x="580852966722" fg:w="270285084715"/><text x="63.7000%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::extend_from_slice</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (270,285,084,715 samples, 29.52%)</title><rect x="63.4500%" y="341" width="29.5248%" height="15" fill="rgb(213,64,8)" fg:x="580852966722" fg:w="270285084715"/><text x="63.7000%" y="351.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (270,285,084,715 samples, 29.52%)</title><rect x="63.4500%" y="325" width="29.5248%" height="15" fill="rgb(210,75,36)" fg:x="580852966722" fg:w="270285084715"/><text x="63.7000%" y="335.50">alloc::vec::Vec&lt;T,A&gt;::append_elements</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (155,927,448 samples, 0.02%)</title><rect x="92.9577%" y="309" width="0.0170%" height="15" fill="rgb(229,88,21)" fg:x="850982123989" fg:w="155927448"/><text x="93.2077%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11,566,334,844 samples, 1.26%)</title><rect x="92.9748%" y="357" width="1.2635%" height="15" fill="rgb(252,204,47)" fg:x="851138051437" fg:w="11566334844"/><text x="93.2248%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11,566,334,844 samples, 1.26%)</title><rect x="92.9748%" y="341" width="1.2635%" height="15" fill="rgb(208,77,27)" fg:x="851138051437" fg:w="11566334844"/><text x="93.2248%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11,566,334,844 samples, 1.26%)</title><rect x="92.9748%" y="325" width="1.2635%" height="15" fill="rgb(221,76,26)" fg:x="851138051437" fg:w="11566334844"/><text x="93.2248%" y="335.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (2,279,101,705 samples, 0.25%)</title><rect x="95.3920%" y="309" width="0.2490%" height="15" fill="rgb(225,139,18)" fg:x="873266749233" fg:w="2279101705"/><text x="95.6420%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (29,757,151,586 samples, 3.25%)</title><rect x="94.3566%" y="341" width="3.2505%" height="15" fill="rgb(230,137,11)" fg:x="863787657209" fg:w="29757151586"/><text x="94.6066%" y="351.50">cor..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (29,757,151,586 samples, 3.25%)</title><rect x="94.3566%" y="325" width="3.2505%" height="15" fill="rgb(212,28,1)" fg:x="863787657209" fg:w="29757151586"/><text x="94.6066%" y="335.50">cor..</text></g><g><title>core::slice::memchr::memchr_naive (17,998,957,857 samples, 1.97%)</title><rect x="95.6410%" y="309" width="1.9661%" height="15" fill="rgb(248,164,17)" fg:x="875545850938" fg:w="17998957857"/><text x="95.8910%" y="319.50">c..</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (352,776,563,612 samples, 38.54%)</title><rect x="59.0754%" y="437" width="38.5358%" height="15" fill="rgb(222,171,42)" fg:x="540806442343" fg:w="352776563612"/><text x="59.3254%" y="447.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>std::io::BufRead::read_line (345,025,353,198 samples, 37.69%)</title><rect x="59.9222%" y="421" width="37.6891%" height="15" fill="rgb(243,84,45)" fg:x="548557652757" fg:w="345025353198"/><text x="60.1722%" y="431.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (345,025,353,198 samples, 37.69%)</title><rect x="59.9222%" y="405" width="37.6891%" height="15" fill="rgb(252,49,23)" fg:x="548557652757" fg:w="345025353198"/><text x="60.1722%" y="415.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::_{{closure}} (316,546,553,678 samples, 34.58%)</title><rect x="63.0331%" y="389" width="34.5782%" height="15" fill="rgb(215,19,7)" fg:x="577036452277" fg:w="316546553678"/><text x="63.2831%" y="399.50">std::io::BufRead::read_line::_{{closure}}</text></g><g><title>std::io::read_until (316,546,553,678 samples, 34.58%)</title><rect x="63.0331%" y="373" width="34.5782%" height="15" fill="rgb(238,81,41)" fg:x="577036452277" fg:w="316546553678"/><text x="63.2831%" y="383.50">std::io::read_until</text></g><g><title>core::slice::memchr::memchr (30,878,619,674 samples, 3.37%)</title><rect x="94.2382%" y="357" width="3.3731%" height="15" fill="rgb(210,199,37)" fg:x="862704386281" fg:w="30878619674"/><text x="94.4882%" y="367.50">cor..</text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (859,095,502 samples, 0.09%)</title><rect x="97.6113%" y="405" width="0.0938%" height="15" fill="rgb(244,192,49)" fg:x="893583005955" fg:w="859095502"/><text x="97.8613%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (9,299,171,410 samples, 1.02%)</title><rect x="98.3721%" y="389" width="1.0158%" height="15" fill="rgb(226,211,11)" fg:x="900547643888" fg:w="9299171410"/><text x="98.6221%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9,299,171,410 samples, 1.02%)</title><rect x="98.3721%" y="373" width="1.0158%" height="15" fill="rgb(236,162,54)" fg:x="900547643888" fg:w="9299171410"/><text x="98.6221%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (15,982,110,384 samples, 1.75%)</title><rect x="97.7051%" y="405" width="1.7458%" height="15" fill="rgb(220,229,9)" fg:x="894442101457" fg:w="15982110384"/><text x="97.9551%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (577,396,543 samples, 0.06%)</title><rect x="99.3879%" y="389" width="0.0631%" height="15" fill="rgb(250,87,22)" fg:x="909846815298" fg:w="577396543"/><text x="99.6379%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (577,396,543 samples, 0.06%)</title><rect x="99.3879%" y="373" width="0.0631%" height="15" fill="rgb(239,43,17)" fg:x="909846815298" fg:w="577396543"/><text x="99.6379%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (344,092,779 samples, 0.04%)</title><rect x="99.5335%" y="389" width="0.0376%" height="15" fill="rgb(231,177,25)" fg:x="911180381239" fg:w="344092779"/><text x="99.7835%" y="399.50"></text></g><g><title>core::ptr::write (344,092,779 samples, 0.04%)</title><rect x="99.5335%" y="373" width="0.0376%" height="15" fill="rgb(219,179,1)" fg:x="911180381239" fg:w="344092779"/><text x="99.7835%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (20,038,937,531 samples, 2.19%)</title><rect x="97.6113%" y="437" width="2.1890%" height="15" fill="rgb(238,219,53)" fg:x="893583005955" fg:w="20038937531"/><text x="97.8613%" y="447.50">c..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (20,038,937,531 samples, 2.19%)</title><rect x="97.6113%" y="421" width="2.1890%" height="15" fill="rgb(232,167,36)" fg:x="893583005955" fg:w="20038937531"/><text x="97.8613%" y="431.50">c..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::write (3,197,731,645 samples, 0.35%)</title><rect x="99.4509%" y="405" width="0.3493%" height="15" fill="rgb(244,19,51)" fg:x="910424211841" fg:w="3197731645"/><text x="99.7009%" y="415.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (2,062,396,681 samples, 0.23%)</title><rect x="99.5750%" y="389" width="0.2253%" height="15" fill="rgb(224,6,22)" fg:x="911559546805" fg:w="2062396681"/><text x="99.8250%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (977,696,846 samples, 0.11%)</title><rect x="99.6935%" y="373" width="0.1068%" height="15" fill="rgb(224,145,5)" fg:x="912644246640" fg:w="977696846"/><text x="99.9435%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (977,696,846 samples, 0.11%)</title><rect x="99.6935%" y="357" width="0.1068%" height="15" fill="rgb(234,130,49)" fg:x="912644246640" fg:w="977696846"/><text x="99.9435%" y="367.50"></text></g><g><title>_start (374,674,841,709 samples, 40.93%)</title><rect x="58.8948%" y="565" width="40.9279%" height="15" fill="rgb(254,6,2)" fg:x="539153072741" fg:w="374674841709"/><text x="59.1448%" y="575.50">_start</text></g><g><title>__libc_start_main (374,674,841,709 samples, 40.93%)</title><rect x="58.8948%" y="549" width="40.9279%" height="15" fill="rgb(208,96,46)" fg:x="539153072741" fg:w="374674841709"/><text x="59.1448%" y="559.50">__libc_start_main</text></g><g><title>[libc.so.6] (374,674,841,709 samples, 40.93%)</title><rect x="58.8948%" y="533" width="40.9279%" height="15" fill="rgb(239,3,39)" fg:x="539153072741" fg:w="374674841709"/><text x="59.1448%" y="543.50">[libc.so.6]</text></g><g><title>main (374,674,841,709 samples, 40.93%)</title><rect x="58.8948%" y="517" width="40.9279%" height="15" fill="rgb(233,210,1)" fg:x="539153072741" fg:w="374674841709"/><text x="59.1448%" y="527.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (374,674,841,709 samples, 40.93%)</title><rect x="58.8948%" y="501" width="40.9279%" height="15" fill="rgb(244,137,37)" fg:x="539153072741" fg:w="374674841709"/><text x="59.1448%" y="511.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (374,674,841,709 samples, 40.93%)</title><rect x="58.8948%" y="485" width="40.9279%" height="15" fill="rgb(240,136,2)" fg:x="539153072741" fg:w="374674841709"/><text x="59.1448%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>one_brc::main (374,607,374,900 samples, 40.92%)</title><rect x="58.9022%" y="469" width="40.9205%" height="15" fill="rgb(239,18,37)" fg:x="539220539550" fg:w="374607374900"/><text x="59.1522%" y="479.50">one_brc::main</text></g><g><title>one_brc::reader::parse_file (374,175,080,014 samples, 40.87%)</title><rect x="58.9494%" y="453" width="40.8733%" height="15" fill="rgb(218,185,22)" fg:x="539652834436" fg:w="374175080014"/><text x="59.1994%" y="463.50">one_brc::reader::parse_file</text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::new (205,970,964 samples, 0.02%)</title><rect x="99.8003%" y="437" width="0.0225%" height="15" fill="rgb(225,218,4)" fg:x="913621943486" fg:w="205970964"/><text x="100.0503%" y="447.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::with_capacity (205,970,964 samples, 0.02%)</title><rect x="99.8003%" y="421" width="0.0225%" height="15" fill="rgb(230,182,32)" fg:x="913621943486" fg:w="205970964"/><text x="100.0503%" y="431.50"></text></g><g><title>cfree (1,001,113,517 samples, 0.11%)</title><rect x="99.8228%" y="565" width="0.1094%" height="15" fill="rgb(242,56,43)" fg:x="913827914450" fg:w="1001113517"/><text x="100.0728%" y="575.50"></text></g><g><title>[libc.so.6] (1,001,113,517 samples, 0.11%)</title><rect x="99.8228%" y="549" width="0.1094%" height="15" fill="rgb(233,99,24)" fg:x="913827914450" fg:w="1001113517"/><text x="100.0728%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (521,307,962 samples, 0.06%)</title><rect x="99.9403%" y="357" width="0.0569%" height="15" fill="rgb(234,209,42)" fg:x="914904218626" fg:w="521307962"/><text x="100.1903%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (521,307,962 samples, 0.06%)</title><rect x="99.9403%" y="341" width="0.0569%" height="15" fill="rgb(227,7,12)" fg:x="914904218626" fg:w="521307962"/><text x="100.1903%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (521,307,962 samples, 0.06%)</title><rect x="99.9403%" y="325" width="0.0569%" height="15" fill="rgb(245,203,43)" fg:x="914904218626" fg:w="521307962"/><text x="100.1903%" y="335.50"></text></g><g><title>malloc (521,307,962 samples, 0.06%)</title><rect x="99.9403%" y="309" width="0.0569%" height="15" fill="rgb(238,205,33)" fg:x="914904218626" fg:w="521307962"/><text x="100.1903%" y="319.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (600,078,636 samples, 0.07%)</title><rect x="99.9321%" y="533" width="0.0656%" height="15" fill="rgb(231,56,7)" fg:x="914829027967" fg:w="600078636"/><text x="100.1821%" y="543.50"></text></g><g><title>std::io::BufRead::read_line (600,078,636 samples, 0.07%)</title><rect x="99.9321%" y="517" width="0.0656%" height="15" fill="rgb(244,186,29)" fg:x="914829027967" fg:w="600078636"/><text x="100.1821%" y="527.50"></text></g><g><title>std::io::append_to_string (600,078,636 samples, 0.07%)</title><rect x="99.9321%" y="501" width="0.0656%" height="15" fill="rgb(234,111,31)" fg:x="914829027967" fg:w="600078636"/><text x="100.1821%" y="511.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (528,490,880 samples, 0.06%)</title><rect x="99.9399%" y="485" width="0.0577%" height="15" fill="rgb(241,149,10)" fg:x="914900615723" fg:w="528490880"/><text x="100.1899%" y="495.50"></text></g><g><title>std::io::read_until (528,490,880 samples, 0.06%)</title><rect x="99.9399%" y="469" width="0.0577%" height="15" fill="rgb(249,206,44)" fg:x="914900615723" fg:w="528490880"/><text x="100.1899%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (524,887,977 samples, 0.06%)</title><rect x="99.9403%" y="453" width="0.0573%" height="15" fill="rgb(251,153,30)" fg:x="914904218626" fg:w="524887977"/><text x="100.1903%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (524,887,977 samples, 0.06%)</title><rect x="99.9403%" y="437" width="0.0573%" height="15" fill="rgb(239,152,38)" fg:x="914904218626" fg:w="524887977"/><text x="100.1903%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (524,887,977 samples, 0.06%)</title><rect x="99.9403%" y="421" width="0.0573%" height="15" fill="rgb(249,139,47)" fg:x="914904218626" fg:w="524887977"/><text x="100.1903%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (524,887,977 samples, 0.06%)</title><rect x="99.9403%" y="405" width="0.0573%" height="15" fill="rgb(244,64,35)" fg:x="914904218626" fg:w="524887977"/><text x="100.1903%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (524,887,977 samples, 0.06%)</title><rect x="99.9403%" y="389" width="0.0573%" height="15" fill="rgb(216,46,15)" fg:x="914904218626" fg:w="524887977"/><text x="100.1903%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (524,887,977 samples, 0.06%)</title><rect x="99.9403%" y="373" width="0.0573%" height="15" fill="rgb(250,74,19)" fg:x="914904218626" fg:w="524887977"/><text x="100.1903%" y="383.50"></text></g><g><title>all (915,450,548,799 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="915450548799"/><text x="0.2500%" y="607.50"></text></g><g><title>one_brc (915,450,548,799 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="915450548799"/><text x="0.2500%" y="591.50">one_brc</text></g><g><title>one_brc::main (621,520,832 samples, 0.07%)</title><rect x="99.9321%" y="565" width="0.0679%" height="15" fill="rgb(244,29,21)" fg:x="914829027967" fg:w="621520832"/><text x="100.1821%" y="575.50"></text></g><g><title>one_brc::reader::parse_file (621,520,832 samples, 0.07%)</title><rect x="99.9321%" y="549" width="0.0679%" height="15" fill="rgb(220,130,37)" fg:x="914829027967" fg:w="621520832"/><text x="100.1821%" y="559.50"></text></g></svg></svg>