<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="762944084793"><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,489,941,371 samples, 2.69%)</title><rect x="0.2639%" y="133" width="2.6856%" height="15" fill="rgb(227,0,7)" fg:x="2013594102" fg:w="20489941371"/><text x="0.5139%" y="143.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (20,489,941,371 samples, 2.69%)</title><rect x="0.2639%" y="117" width="2.6856%" height="15" fill="rgb(217,0,24)" fg:x="2013594102" fg:w="20489941371"/><text x="0.5139%" y="127.50">al..</text></g><g><title>alloc::alloc::alloc (20,489,941,371 samples, 2.69%)</title><rect x="0.2639%" y="101" width="2.6856%" height="15" fill="rgb(221,193,54)" fg:x="2013594102" fg:w="20489941371"/><text x="0.5139%" y="111.50">al..</text></g><g><title>__rdl_alloc (20,489,941,371 samples, 2.69%)</title><rect x="0.2639%" y="85" width="2.6856%" height="15" fill="rgb(248,212,6)" fg:x="2013594102" fg:w="20489941371"/><text x="0.5139%" y="95.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20,489,941,371 samples, 2.69%)</title><rect x="0.2639%" y="69" width="2.6856%" height="15" fill="rgb(208,68,35)" fg:x="2013594102" fg:w="20489941371"/><text x="0.5139%" y="79.50">st..</text></g><g><title>malloc (20,426,640,283 samples, 2.68%)</title><rect x="0.2722%" y="53" width="2.6773%" height="15" fill="rgb(232,128,0)" fg:x="2076895190" fg:w="20426640283"/><text x="0.5222%" y="63.50">ma..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21,618,521,744 samples, 2.83%)</title><rect x="0.1165%" y="197" width="2.8336%" height="15" fill="rgb(207,160,47)" fg:x="889072452" fg:w="21618521744"/><text x="0.3665%" y="207.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21,618,521,744 samples, 2.83%)</title><rect x="0.1165%" y="181" width="2.8336%" height="15" fill="rgb(228,23,34)" fg:x="889072452" fg:w="21618521744"/><text x="0.3665%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (21,618,521,744 samples, 2.83%)</title><rect x="0.1165%" y="165" width="2.8336%" height="15" fill="rgb(218,30,26)" fg:x="889072452" fg:w="21618521744"/><text x="0.3665%" y="175.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (21,618,521,744 samples, 2.83%)</title><rect x="0.1165%" y="149" width="2.8336%" height="15" fill="rgb(220,122,19)" fg:x="889072452" fg:w="21618521744"/><text x="0.3665%" y="159.50">al..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="341" width="3.8955%" height="15" fill="rgb(250,228,42)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="351.50">&lt;T a..</text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="325" width="3.8955%" height="15" fill="rgb(240,193,28)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="335.50">&lt;str..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="309" width="3.8955%" height="15" fill="rgb(216,20,37)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="319.50">&lt;all..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="293" width="3.8955%" height="15" fill="rgb(206,188,39)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="303.50">allo..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="277" width="3.8955%" height="15" fill="rgb(217,207,13)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="287.50">allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="261" width="3.8955%" height="15" fill="rgb(231,73,38)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="271.50">allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="245" width="3.8955%" height="15" fill="rgb(225,20,46)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="255.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="229" width="3.8955%" height="15" fill="rgb(210,31,41)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="239.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29,720,526,265 samples, 3.90%)</title><rect x="0.1140%" y="213" width="3.8955%" height="15" fill="rgb(221,200,47)" fg:x="870034310" fg:w="29720526265"/><text x="0.3640%" y="223.50">&lt;T a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8,082,966,379 samples, 1.06%)</title><rect x="2.9501%" y="197" width="1.0594%" height="15" fill="rgb(226,26,5)" fg:x="22507594196" fg:w="8082966379"/><text x="3.2001%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,082,966,379 samples, 1.06%)</title><rect x="2.9501%" y="181" width="1.0594%" height="15" fill="rgb(249,33,26)" fg:x="22507594196" fg:w="8082966379"/><text x="3.2001%" y="191.50"></text></g><g><title>[libc.so.6] (8,063,797,959 samples, 1.06%)</title><rect x="2.9526%" y="165" width="1.0569%" height="15" fill="rgb(235,183,28)" fg:x="22526762616" fg:w="8063797959"/><text x="3.2026%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (915,549,178 samples, 0.12%)</title><rect x="4.0095%" y="325" width="0.1200%" height="15" fill="rgb(221,5,38)" fg:x="30590560575" fg:w="915549178"/><text x="4.2595%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (915,549,178 samples, 0.12%)</title><rect x="4.0095%" y="309" width="0.1200%" height="15" fill="rgb(247,18,42)" fg:x="30590560575" fg:w="915549178"/><text x="4.2595%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (885,098,679 samples, 0.12%)</title><rect x="4.0135%" y="293" width="0.1160%" height="15" fill="rgb(241,131,45)" fg:x="30621011074" fg:w="885098679"/><text x="4.2635%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (885,098,679 samples, 0.12%)</title><rect x="4.0135%" y="277" width="0.1160%" height="15" fill="rgb(249,31,29)" fg:x="30621011074" fg:w="885098679"/><text x="4.2635%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (885,098,679 samples, 0.12%)</title><rect x="4.0135%" y="261" width="0.1160%" height="15" fill="rgb(225,111,53)" fg:x="30621011074" fg:w="885098679"/><text x="4.2635%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (16,704,577,878 samples, 2.19%)</title><rect x="4.0095%" y="341" width="2.1895%" height="15" fill="rgb(238,160,17)" fg:x="30590560575" fg:w="16704577878"/><text x="4.2595%" y="351.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (15,789,028,700 samples, 2.07%)</title><rect x="4.1295%" y="325" width="2.0695%" height="15" fill="rgb(214,148,48)" fg:x="31506109753" fg:w="15789028700"/><text x="4.3795%" y="335.50">c..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (15,789,028,700 samples, 2.07%)</title><rect x="4.1295%" y="309" width="2.0695%" height="15" fill="rgb(232,36,49)" fg:x="31506109753" fg:w="15789028700"/><text x="4.3795%" y="319.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (12,315,355,270 samples, 1.61%)</title><rect x="4.5848%" y="293" width="1.6142%" height="15" fill="rgb(209,103,24)" fg:x="34979783183" fg:w="12315355270"/><text x="4.8348%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,919,488,459 samples, 0.51%)</title><rect x="15.7075%" y="325" width="0.5137%" height="15" fill="rgb(229,88,8)" fg:x="119839282333" fg:w="3919488459"/><text x="15.9575%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,406,640,746 samples, 0.45%)</title><rect x="15.7747%" y="309" width="0.4465%" height="15" fill="rgb(213,181,19)" fg:x="120352130046" fg:w="3406640746"/><text x="16.0247%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (76,486,572,760 samples, 10.03%)</title><rect x="6.1990%" y="341" width="10.0252%" height="15" fill="rgb(254,191,54)" fg:x="47295138453" fg:w="76486572760"/><text x="6.4490%" y="351.50">&lt;core::slice::..</text></g><g><title>cfree (10,074,022,982 samples, 1.32%)</title><rect x="16.2242%" y="341" width="1.3204%" height="15" fill="rgb(241,83,37)" fg:x="123781711213" fg:w="10074022982"/><text x="16.4742%" y="351.50"></text></g><g><title>[libc.so.6] (52,132,626,117 samples, 6.83%)</title><rect x="18.7388%" y="181" width="6.8331%" height="15" fill="rgb(233,36,39)" fg:x="142966395082" fg:w="52132626117"/><text x="18.9888%" y="191.50">[libc.so...</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (61,243,287,005 samples, 8.03%)</title><rect x="17.5446%" y="261" width="8.0272%" height="15" fill="rgb(226,3,54)" fg:x="133855734195" fg:w="61243287005"/><text x="17.7946%" y="271.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (61,243,287,005 samples, 8.03%)</title><rect x="17.5446%" y="245" width="8.0272%" height="15" fill="rgb(245,192,40)" fg:x="133855734195" fg:w="61243287005"/><text x="17.7946%" y="255.50">alloc::allo..</text></g><g><title>__rdl_dealloc (61,243,287,005 samples, 8.03%)</title><rect x="17.5446%" y="229" width="8.0272%" height="15" fill="rgb(238,167,29)" fg:x="133855734195" fg:w="61243287005"/><text x="17.7946%" y="239.50">__rdl_deall..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (61,243,287,005 samples, 8.03%)</title><rect x="17.5446%" y="213" width="8.0272%" height="15" fill="rgb(232,182,51)" fg:x="133855734195" fg:w="61243287005"/><text x="17.7946%" y="223.50">std::sys::a..</text></g><g><title>cfree (61,116,077,512 samples, 8.01%)</title><rect x="17.5613%" y="197" width="8.0106%" height="15" fill="rgb(231,60,39)" fg:x="133982943688" fg:w="61116077512"/><text x="17.8113%" y="207.50">cfree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (62,852,111,912 samples, 8.24%)</title><rect x="17.5446%" y="341" width="8.2381%" height="15" fill="rgb(208,69,12)" fg:x="133855734195" fg:w="62852111912"/><text x="17.7946%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (62,852,111,912 samples, 8.24%)</title><rect x="17.5446%" y="325" width="8.2381%" height="15" fill="rgb(235,93,37)" fg:x="133855734195" fg:w="62852111912"/><text x="17.7946%" y="335.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (62,852,111,912 samples, 8.24%)</title><rect x="17.5446%" y="309" width="8.2381%" height="15" fill="rgb(213,116,39)" fg:x="133855734195" fg:w="62852111912"/><text x="17.7946%" y="319.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62,852,111,912 samples, 8.24%)</title><rect x="17.5446%" y="293" width="8.2381%" height="15" fill="rgb(222,207,29)" fg:x="133855734195" fg:w="62852111912"/><text x="17.7946%" y="303.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (62,852,111,912 samples, 8.24%)</title><rect x="17.5446%" y="277" width="8.2381%" height="15" fill="rgb(206,96,30)" fg:x="133855734195" fg:w="62852111912"/><text x="17.7946%" y="287.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1,608,824,907 samples, 0.21%)</title><rect x="25.5719%" y="261" width="0.2109%" height="15" fill="rgb(218,138,4)" fg:x="195099021200" fg:w="1608824907"/><text x="25.8219%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (411,650,154 samples, 0.05%)</title><rect x="25.9570%" y="325" width="0.0540%" height="15" fill="rgb(250,191,14)" fg:x="198037044667" fg:w="411650154"/><text x="26.2070%" y="335.50"></text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (6,170,132,785 samples, 0.81%)</title><rect x="26.0152%" y="309" width="0.8087%" height="15" fill="rgb(239,60,40)" fg:x="198481538390" fg:w="6170132785"/><text x="26.2652%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1,164,296,335 samples, 0.15%)</title><rect x="26.8239%" y="309" width="0.1526%" height="15" fill="rgb(206,27,48)" fg:x="204651671175" fg:w="1164296335"/><text x="27.0739%" y="319.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (87,810,120 samples, 0.01%)</title><rect x="26.9770%" y="229" width="0.0115%" height="15" fill="rgb(225,35,8)" fg:x="205819706699" fg:w="87810120"/><text x="27.2270%" y="239.50"></text></g><g><title>std::thread::park (87,810,118 samples, 0.01%)</title><rect x="26.9770%" y="213" width="0.0115%" height="15" fill="rgb(250,213,24)" fg:x="205819706701" fg:w="87810118"/><text x="27.2270%" y="223.50"></text></g><g><title>std::thread::Thread::park (87,810,116 samples, 0.01%)</title><rect x="26.9770%" y="197" width="0.0115%" height="15" fill="rgb(247,123,22)" fg:x="205819706703" fg:w="87810116"/><text x="27.2270%" y="207.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (87,810,116 samples, 0.01%)</title><rect x="26.9770%" y="181" width="0.0115%" height="15" fill="rgb(231,138,38)" fg:x="205819706703" fg:w="87810116"/><text x="27.2270%" y="191.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (87,810,116 samples, 0.01%)</title><rect x="26.9770%" y="165" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="205819706703" fg:w="87810116"/><text x="27.2270%" y="175.50"></text></g><g><title>syscall (87,810,116 samples, 0.01%)</title><rect x="26.9770%" y="149" width="0.0115%" height="15" fill="rgb(251,118,11)" fg:x="205819706703" fg:w="87810116"/><text x="27.2270%" y="159.50"></text></g><g><title>[unknown] (87,810,116 samples, 0.01%)</title><rect x="26.9770%" y="133" width="0.0115%" height="15" fill="rgb(217,147,25)" fg:x="205819706703" fg:w="87810116"/><text x="27.2270%" y="143.50"></text></g><g><title>[unknown] (87,810,116 samples, 0.01%)</title><rect x="26.9770%" y="117" width="0.0115%" height="15" fill="rgb(247,81,37)" fg:x="205819706703" fg:w="87810116"/><text x="27.2270%" y="127.50"></text></g><g><title>[unknown] (87,810,116 samples, 0.01%)</title><rect x="26.9770%" y="101" width="0.0115%" height="15" fill="rgb(209,12,38)" fg:x="205819706703" fg:w="87810116"/><text x="27.2270%" y="111.50"></text></g><g><title>[unknown] (84,114,526 samples, 0.01%)</title><rect x="26.9775%" y="85" width="0.0110%" height="15" fill="rgb(227,1,9)" fg:x="205823402293" fg:w="84114526"/><text x="27.2275%" y="95.50"></text></g><g><title>[unknown] (84,114,526 samples, 0.01%)</title><rect x="26.9775%" y="69" width="0.0110%" height="15" fill="rgb(248,47,43)" fg:x="205823402293" fg:w="84114526"/><text x="27.2275%" y="79.50"></text></g><g><title>[unknown] (84,114,526 samples, 0.01%)</title><rect x="26.9775%" y="53" width="0.0110%" height="15" fill="rgb(221,10,30)" fg:x="205823402293" fg:w="84114526"/><text x="27.2275%" y="63.50"></text></g><g><title>[unknown] (76,353,765 samples, 0.01%)</title><rect x="26.9785%" y="37" width="0.0100%" height="15" fill="rgb(210,229,1)" fg:x="205831163054" fg:w="76353765"/><text x="27.2285%" y="47.50"></text></g><g><title>crossbeam_channel::context::Context::with (98,687,686 samples, 0.01%)</title><rect x="26.9765%" y="309" width="0.0129%" height="15" fill="rgb(222,148,37)" fg:x="205815967510" fg:w="98687686"/><text x="27.2265%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (98,687,686 samples, 0.01%)</title><rect x="26.9765%" y="293" width="0.0129%" height="15" fill="rgb(234,67,33)" fg:x="205815967510" fg:w="98687686"/><text x="27.2265%" y="303.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (94,948,497 samples, 0.01%)</title><rect x="26.9770%" y="277" width="0.0124%" height="15" fill="rgb(247,98,35)" fg:x="205819706699" fg:w="94948497"/><text x="27.2270%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (94,948,497 samples, 0.01%)</title><rect x="26.9770%" y="261" width="0.0124%" height="15" fill="rgb(247,138,52)" fg:x="205819706699" fg:w="94948497"/><text x="27.2270%" y="271.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::_{{closure}} (94,948,497 samples, 0.01%)</title><rect x="26.9770%" y="245" width="0.0124%" height="15" fill="rgb(213,79,30)" fg:x="205819706699" fg:w="94948497"/><text x="27.2270%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (16,841,898,942 samples, 2.21%)</title><rect x="27.0326%" y="293" width="2.2075%" height="15" fill="rgb(246,177,23)" fg:x="206243286419" fg:w="16841898942"/><text x="27.2826%" y="303.50">c..</text></g><g><title>core::ptr::read (16,841,898,942 samples, 2.21%)</title><rect x="27.0326%" y="277" width="2.2075%" height="15" fill="rgb(230,62,27)" fg:x="206243286419" fg:w="16841898942"/><text x="27.2826%" y="287.50">c..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (19,645,911,042 samples, 2.58%)</title><rect x="26.9895%" y="309" width="2.5750%" height="15" fill="rgb(216,154,8)" fg:x="205914655196" fg:w="19645911042"/><text x="27.2395%" y="319.50">cr..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (2,419,372,502 samples, 0.32%)</title><rect x="29.2474%" y="293" width="0.3171%" height="15" fill="rgb(244,35,45)" fg:x="223141193736" fg:w="2419372502"/><text x="29.4974%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1,344,848,523 samples, 0.18%)</title><rect x="29.3882%" y="277" width="0.1763%" height="15" fill="rgb(251,115,12)" fg:x="224215717715" fg:w="1344848523"/><text x="29.6382%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (1,344,848,523 samples, 0.18%)</title><rect x="29.3882%" y="261" width="0.1763%" height="15" fill="rgb(240,54,50)" fg:x="224215717715" fg:w="1344848523"/><text x="29.6382%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (404,333,483 samples, 0.05%)</title><rect x="30.3541%" y="293" width="0.0530%" height="15" fill="rgb(233,84,52)" fg:x="231584507104" fg:w="404333483"/><text x="30.6041%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (437,255,966 samples, 0.06%)</title><rect x="30.4071%" y="293" width="0.0573%" height="15" fill="rgb(207,117,47)" fg:x="231988840587" fg:w="437255966"/><text x="30.6571%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (437,255,966 samples, 0.06%)</title><rect x="30.4071%" y="277" width="0.0573%" height="15" fill="rgb(249,43,39)" fg:x="231988840587" fg:w="437255966"/><text x="30.6571%" y="287.50"></text></g><g><title>core::slice::index::get_noubcheck (437,255,966 samples, 0.06%)</title><rect x="30.4071%" y="261" width="0.0573%" height="15" fill="rgb(209,38,44)" fg:x="231988840587" fg:w="437255966"/><text x="30.6571%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,479,284,390 samples, 0.19%)</title><rect x="30.4674%" y="293" width="0.1939%" height="15" fill="rgb(236,212,23)" fg:x="232448962997" fg:w="1479284390"/><text x="30.7174%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (1,479,284,390 samples, 0.19%)</title><rect x="30.4674%" y="277" width="0.1939%" height="15" fill="rgb(242,79,21)" fg:x="232448962997" fg:w="1479284390"/><text x="30.7174%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_recv (8,497,077,217 samples, 1.11%)</title><rect x="29.5645%" y="309" width="1.1137%" height="15" fill="rgb(211,96,35)" fg:x="225560566238" fg:w="8497077217"/><text x="29.8145%" y="319.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::spin (129,396,068 samples, 0.02%)</title><rect x="30.6613%" y="293" width="0.0170%" height="15" fill="rgb(253,215,40)" fg:x="233928247387" fg:w="129396068"/><text x="30.9113%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (117,617,518 samples, 0.02%)</title><rect x="30.6628%" y="277" width="0.0154%" height="15" fill="rgb(211,81,21)" fg:x="233940025937" fg:w="117617518"/><text x="30.9128%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (117,617,518 samples, 0.02%)</title><rect x="30.6628%" y="261" width="0.0154%" height="15" fill="rgb(208,190,38)" fg:x="233940025937" fg:w="117617518"/><text x="30.9128%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (109,549,049 samples, 0.01%)</title><rect x="30.6639%" y="245" width="0.0144%" height="15" fill="rgb(235,213,38)" fg:x="233948094406" fg:w="109549049"/><text x="30.9139%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14,085,919,731 samples, 1.85%)</title><rect x="30.6782%" y="293" width="1.8463%" height="15" fill="rgb(237,122,38)" fg:x="234057643455" fg:w="14085919731"/><text x="30.9282%" y="303.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14,085,919,731 samples, 1.85%)</title><rect x="30.6782%" y="277" width="1.8463%" height="15" fill="rgb(244,218,35)" fg:x="234057643455" fg:w="14085919731"/><text x="30.9282%" y="287.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (13,230,897,847 samples, 1.73%)</title><rect x="30.7903%" y="261" width="1.7342%" height="15" fill="rgb(240,68,47)" fg:x="234912665339" fg:w="13230897847"/><text x="31.0403%" y="271.50"></text></g><g><title>__sched_yield (513,768,068 samples, 0.07%)</title><rect x="32.5245%" y="261" width="0.0673%" height="15" fill="rgb(210,16,53)" fg:x="248143563186" fg:w="513768068"/><text x="32.7745%" y="271.50"></text></g><g><title>[unknown] (506,226,089 samples, 0.07%)</title><rect x="32.5255%" y="245" width="0.0664%" height="15" fill="rgb(235,124,12)" fg:x="248151105165" fg:w="506226089"/><text x="32.7755%" y="255.50"></text></g><g><title>[unknown] (449,456,991 samples, 0.06%)</title><rect x="32.5329%" y="229" width="0.0589%" height="15" fill="rgb(224,169,11)" fg:x="248207874263" fg:w="449456991"/><text x="32.7829%" y="239.50"></text></g><g><title>[unknown] (418,277,832 samples, 0.05%)</title><rect x="32.5370%" y="213" width="0.0548%" height="15" fill="rgb(250,166,2)" fg:x="248239053422" fg:w="418277832"/><text x="32.7870%" y="223.50"></text></g><g><title>[unknown] (418,277,832 samples, 0.05%)</title><rect x="32.5370%" y="197" width="0.0548%" height="15" fill="rgb(242,216,29)" fg:x="248239053422" fg:w="418277832"/><text x="32.7870%" y="207.50"></text></g><g><title>[unknown] (370,896,877 samples, 0.05%)</title><rect x="32.5432%" y="181" width="0.0486%" height="15" fill="rgb(230,116,27)" fg:x="248286434377" fg:w="370896877"/><text x="32.7932%" y="191.50"></text></g><g><title>[unknown] (291,934,632 samples, 0.04%)</title><rect x="32.5536%" y="165" width="0.0383%" height="15" fill="rgb(228,99,48)" fg:x="248365396622" fg:w="291934632"/><text x="32.8036%" y="175.50"></text></g><g><title>[unknown] (172,176,495 samples, 0.02%)</title><rect x="32.5692%" y="149" width="0.0226%" height="15" fill="rgb(253,11,6)" fg:x="248485154759" fg:w="172176495"/><text x="32.8192%" y="159.50"></text></g><g><title>[unknown] (161,521,493 samples, 0.02%)</title><rect x="32.5706%" y="133" width="0.0212%" height="15" fill="rgb(247,143,39)" fg:x="248495809761" fg:w="161521493"/><text x="32.8206%" y="143.50"></text></g><g><title>[unknown] (96,121,264 samples, 0.01%)</title><rect x="32.5792%" y="117" width="0.0126%" height="15" fill="rgb(236,97,10)" fg:x="248561209990" fg:w="96121264"/><text x="32.8292%" y="127.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (51,976,572,970 samples, 6.81%)</title><rect x="25.7827%" y="341" width="6.8126%" height="15" fill="rgb(233,208,19)" fg:x="196707846107" fg:w="51976572970"/><text x="26.0327%" y="351.50">crossbeam..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (50,235,724,256 samples, 6.58%)</title><rect x="26.0109%" y="325" width="6.5845%" height="15" fill="rgb(216,164,2)" fg:x="198448694821" fg:w="50235724256"/><text x="26.2609%" y="335.50">crossbeam..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (14,626,775,622 samples, 1.92%)</title><rect x="30.6782%" y="309" width="1.9171%" height="15" fill="rgb(220,129,5)" fg:x="234057643455" fg:w="14626775622"/><text x="30.9282%" y="319.50">c..</text></g><g><title>std::thread::yield_now (540,855,891 samples, 0.07%)</title><rect x="32.5245%" y="293" width="0.0709%" height="15" fill="rgb(242,17,10)" fg:x="248143563186" fg:w="540855891"/><text x="32.7745%" y="303.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (540,855,891 samples, 0.07%)</title><rect x="32.5245%" y="277" width="0.0709%" height="15" fill="rgb(242,107,0)" fg:x="248143563186" fg:w="540855891"/><text x="32.7745%" y="287.50"></text></g><g><title>one_brc::station::StationAverage::update_values (2,617,370,148 samples, 0.34%)</title><rect x="32.5954%" y="341" width="0.3431%" height="15" fill="rgb(251,28,31)" fg:x="248684419077" fg:w="2617370148"/><text x="32.8454%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,537,986,521 samples, 0.33%)</title><rect x="34.3004%" y="293" width="0.3327%" height="15" fill="rgb(233,223,10)" fg:x="261692949579" fg:w="2537986521"/><text x="34.5504%" y="303.50"></text></g><g><title>one_brc::worker_pool::Worker::parse_string_to_int (12,932,993,553 samples, 1.70%)</title><rect x="32.9384%" y="341" width="1.6951%" height="15" fill="rgb(215,21,27)" fg:x="251301789225" fg:w="12932993553"/><text x="33.1884%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (5,522,106,996 samples, 0.72%)</title><rect x="33.9098%" y="325" width="0.7238%" height="15" fill="rgb(232,23,21)" fg:x="258712675782" fg:w="5522106996"/><text x="34.1598%" y="335.50"></text></g><g><title>core::str::validations::next_code_point (5,522,106,996 samples, 0.72%)</title><rect x="33.9098%" y="309" width="0.7238%" height="15" fill="rgb(244,5,23)" fg:x="258712675782" fg:w="5522106996"/><text x="34.1598%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,886,414,842 samples, 0.25%)</title><rect x="36.9694%" y="197" width="0.2473%" height="15" fill="rgb(226,81,46)" fg:x="282056040720" fg:w="1886414842"/><text x="37.2194%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,075,499,963 samples, 0.40%)</title><rect x="36.8569%" y="213" width="0.4031%" height="15" fill="rgb(247,70,30)" fg:x="281197359962" fg:w="3075499963"/><text x="37.1069%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (330,404,363 samples, 0.04%)</title><rect x="37.2167%" y="197" width="0.0433%" height="15" fill="rgb(212,68,19)" fg:x="283942455562" fg:w="330404363"/><text x="37.4667%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,379,584,254 samples, 0.97%)</title><rect x="37.4836%" y="197" width="0.9673%" height="15" fill="rgb(240,187,13)" fg:x="285979244328" fg:w="7379584254"/><text x="37.7336%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (26,296,927,209 samples, 3.45%)</title><rect x="35.4849%" y="261" width="3.4468%" height="15" fill="rgb(223,113,26)" fg:x="270729577562" fg:w="26296927209"/><text x="35.7349%" y="271.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (26,296,927,209 samples, 3.45%)</title><rect x="35.4849%" y="245" width="3.4468%" height="15" fill="rgb(206,192,2)" fg:x="270729577562" fg:w="26296927209"/><text x="35.7349%" y="255.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (26,296,927,209 samples, 3.45%)</title><rect x="35.4849%" y="229" width="3.4468%" height="15" fill="rgb(241,108,4)" fg:x="270729577562" fg:w="26296927209"/><text x="35.7349%" y="239.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12,753,644,846 samples, 1.67%)</title><rect x="37.2600%" y="213" width="1.6716%" height="15" fill="rgb(247,173,49)" fg:x="284272859925" fg:w="12753644846"/><text x="37.5100%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,667,676,189 samples, 0.48%)</title><rect x="38.4509%" y="197" width="0.4807%" height="15" fill="rgb(224,114,35)" fg:x="293358828582" fg:w="3667676189"/><text x="38.7009%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,615,912,347 samples, 0.34%)</title><rect x="38.9316%" y="261" width="0.3429%" height="15" fill="rgb(245,159,27)" fg:x="297026504771" fg:w="2615912347"/><text x="39.1816%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (891,831,326 samples, 0.12%)</title><rect x="39.1576%" y="245" width="0.1169%" height="15" fill="rgb(245,172,44)" fg:x="298750585792" fg:w="891831326"/><text x="39.4076%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (891,831,326 samples, 0.12%)</title><rect x="39.1576%" y="229" width="0.1169%" height="15" fill="rgb(236,23,11)" fg:x="298750585792" fg:w="891831326"/><text x="39.4076%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (891,831,326 samples, 0.12%)</title><rect x="39.1576%" y="213" width="0.1169%" height="15" fill="rgb(205,117,38)" fg:x="298750585792" fg:w="891831326"/><text x="39.4076%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (601,079,306 samples, 0.08%)</title><rect x="40.7702%" y="133" width="0.0788%" height="15" fill="rgb(237,72,25)" fg:x="311053873278" fg:w="601079306"/><text x="41.0202%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,721,517,193 samples, 0.23%)</title><rect x="40.6975%" y="149" width="0.2256%" height="15" fill="rgb(244,70,9)" fg:x="310499070900" fg:w="1721517193"/><text x="40.9475%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (565,635,509 samples, 0.07%)</title><rect x="40.8490%" y="133" width="0.0741%" height="15" fill="rgb(217,125,39)" fg:x="311654952584" fg:w="565635509"/><text x="41.0990%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (2,988,716,136 samples, 0.39%)</title><rect x="40.9231%" y="149" width="0.3917%" height="15" fill="rgb(235,36,10)" fg:x="312220619912" fg:w="2988716136"/><text x="41.1731%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (332,815,815 samples, 0.04%)</title><rect x="41.2712%" y="133" width="0.0436%" height="15" fill="rgb(251,123,47)" fg:x="314876520233" fg:w="332815815"/><text x="41.5212%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15,516,066,005 samples, 2.03%)</title><rect x="39.2826%" y="165" width="2.0337%" height="15" fill="rgb(221,13,13)" fg:x="299704138920" fg:w="15516066005"/><text x="39.5326%" y="175.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (156,824,158 samples, 0.02%)</title><rect x="42.3053%" y="117" width="0.0206%" height="15" fill="rgb(238,131,9)" fg:x="322765603723" fg:w="156824158"/><text x="42.5553%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (565,166,068 samples, 0.07%)</title><rect x="42.2942%" y="133" width="0.0741%" height="15" fill="rgb(211,50,8)" fg:x="322680949664" fg:w="565166068"/><text x="42.5442%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (323,687,851 samples, 0.04%)</title><rect x="42.3258%" y="117" width="0.0424%" height="15" fill="rgb(245,182,24)" fg:x="322922427881" fg:w="323687851"/><text x="42.5758%" y="127.50"></text></g><g><title>core::cmp::min (791,730,053 samples, 0.10%)</title><rect x="42.3688%" y="133" width="0.1038%" height="15" fill="rgb(242,14,37)" fg:x="323250129506" fg:w="791730053"/><text x="42.6188%" y="143.50"></text></g><g><title>core::cmp::Ord::min (791,730,053 samples, 0.10%)</title><rect x="42.3688%" y="117" width="0.1038%" height="15" fill="rgb(246,228,12)" fg:x="323250129506" fg:w="791730053"/><text x="42.6188%" y="127.50"></text></g><g><title>core::cmp::min_by (791,730,053 samples, 0.10%)</title><rect x="42.3688%" y="101" width="0.1038%" height="15" fill="rgb(213,55,15)" fg:x="323250129506" fg:w="791730053"/><text x="42.6188%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11,222,530,712 samples, 1.47%)</title><rect x="41.4391%" y="149" width="1.4710%" height="15" fill="rgb(209,9,3)" fg:x="316157437327" fg:w="11222530712"/><text x="41.6891%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (3,338,108,480 samples, 0.44%)</title><rect x="42.4726%" y="133" width="0.4375%" height="15" fill="rgb(230,59,30)" fg:x="324041859559" fg:w="3338108480"/><text x="42.7226%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (58,698,076,477 samples, 7.69%)</title><rect x="35.2170%" y="277" width="7.6936%" height="15" fill="rgb(209,121,21)" fg:x="268685638367" fg:w="58698076477"/><text x="35.4670%" y="287.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27,741,297,726 samples, 3.64%)</title><rect x="39.2745%" y="261" width="3.6361%" height="15" fill="rgb(220,109,13)" fg:x="299642417118" fg:w="27741297726"/><text x="39.5245%" y="271.50">core..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (27,741,297,726 samples, 3.64%)</title><rect x="39.2745%" y="245" width="3.6361%" height="15" fill="rgb(232,18,1)" fg:x="299642417118" fg:w="27741297726"/><text x="39.5245%" y="255.50">&lt;all..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (27,741,297,726 samples, 3.64%)</title><rect x="39.2745%" y="229" width="3.6361%" height="15" fill="rgb(215,41,42)" fg:x="299642417118" fg:w="27741297726"/><text x="39.5245%" y="239.50">core..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (27,741,297,726 samples, 3.64%)</title><rect x="39.2745%" y="213" width="3.6361%" height="15" fill="rgb(224,123,36)" fg:x="299642417118" fg:w="27741297726"/><text x="39.5245%" y="223.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (27,741,297,726 samples, 3.64%)</title><rect x="39.2745%" y="197" width="3.6361%" height="15" fill="rgb(240,125,3)" fg:x="299642417118" fg:w="27741297726"/><text x="39.5245%" y="207.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (27,741,297,726 samples, 3.64%)</title><rect x="39.2745%" y="181" width="3.6361%" height="15" fill="rgb(205,98,50)" fg:x="299642417118" fg:w="27741297726"/><text x="39.5245%" y="191.50">&lt;cor..</text></g><g><title>core::hash::Hasher::write_u8 (12,163,509,919 samples, 1.59%)</title><rect x="41.3163%" y="165" width="1.5943%" height="15" fill="rgb(205,185,37)" fg:x="315220204925" fg:w="12163509919"/><text x="41.5663%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (59,930,809,032 samples, 7.86%)</title><rect x="35.0559%" y="293" width="7.8552%" height="15" fill="rgb(238,207,15)" fg:x="267456635708" fg:w="59930809032"/><text x="35.3059%" y="303.50">hashbrown::..</text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,840,079,155 samples, 0.63%)</title><rect x="43.2512%" y="245" width="0.6344%" height="15" fill="rgb(213,199,42)" fg:x="329982730646" fg:w="4840079155"/><text x="43.5012%" y="255.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (4,840,079,155 samples, 0.63%)</title><rect x="43.2512%" y="229" width="0.6344%" height="15" fill="rgb(235,201,11)" fg:x="329982730646" fg:w="4840079155"/><text x="43.5012%" y="239.50"></text></g><g><title>core::intrinsics::likely (351,949,502 samples, 0.05%)</title><rect x="43.8861%" y="245" width="0.0461%" height="15" fill="rgb(207,46,11)" fg:x="334826626077" fg:w="351949502"/><text x="44.1361%" y="255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (603,180,463 samples, 0.08%)</title><rect x="43.9323%" y="245" width="0.0791%" height="15" fill="rgb(241,35,35)" fg:x="335178575579" fg:w="603180463"/><text x="44.1823%" y="255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (603,180,463 samples, 0.08%)</title><rect x="43.9323%" y="229" width="0.0791%" height="15" fill="rgb(243,32,47)" fg:x="335178575579" fg:w="603180463"/><text x="44.1823%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (603,180,463 samples, 0.08%)</title><rect x="43.9323%" y="213" width="0.0791%" height="15" fill="rgb(247,202,23)" fg:x="335178575579" fg:w="603180463"/><text x="44.1823%" y="223.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,157,446,275 samples, 0.41%)</title><rect x="44.0113%" y="245" width="0.4139%" height="15" fill="rgb(219,102,11)" fg:x="335781756042" fg:w="3157446275"/><text x="44.2613%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,157,446,275 samples, 0.41%)</title><rect x="44.0113%" y="229" width="0.4139%" height="15" fill="rgb(243,110,44)" fg:x="335781756042" fg:w="3157446275"/><text x="44.2613%" y="239.50"></text></g><g><title>hashbrown::control::tag::Tag::full (6,339,123,774 samples, 0.83%)</title><rect x="44.4252%" y="245" width="0.8309%" height="15" fill="rgb(222,74,54)" fg:x="338939202317" fg:w="6339123774"/><text x="44.6752%" y="255.50"></text></g><g><title>[libc.so.6] (24,147,069,918 samples, 3.16%)</title><rect x="47.1987%" y="117" width="3.1650%" height="15" fill="rgb(216,99,12)" fg:x="360099711694" fg:w="24147069918"/><text x="47.4487%" y="127.50">[li..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (37,887,505,088 samples, 4.97%)</title><rect x="45.4002%" y="229" width="4.9660%" height="15" fill="rgb(226,22,26)" fg:x="346378262639" fg:w="37887505088"/><text x="45.6502%" y="239.50">hashbr..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (37,887,505,088 samples, 4.97%)</title><rect x="45.4002%" y="213" width="4.9660%" height="15" fill="rgb(217,163,10)" fg:x="346378262639" fg:w="37887505088"/><text x="45.6502%" y="223.50">&lt;Q as ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (37,887,505,088 samples, 4.97%)</title><rect x="45.4002%" y="197" width="4.9660%" height="15" fill="rgb(213,25,53)" fg:x="346378262639" fg:w="37887505088"/><text x="45.6502%" y="207.50">core::..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (37,887,505,088 samples, 4.97%)</title><rect x="45.4002%" y="181" width="4.9660%" height="15" fill="rgb(252,105,26)" fg:x="346378262639" fg:w="37887505088"/><text x="45.6502%" y="191.50">&lt;alloc..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (37,887,505,088 samples, 4.97%)</title><rect x="45.4002%" y="165" width="4.9660%" height="15" fill="rgb(220,39,43)" fg:x="346378262639" fg:w="37887505088"/><text x="45.6502%" y="175.50">alloc:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (37,887,505,088 samples, 4.97%)</title><rect x="45.4002%" y="149" width="4.9660%" height="15" fill="rgb(229,68,48)" fg:x="346378262639" fg:w="37887505088"/><text x="45.6502%" y="159.50">core::..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (37,887,505,088 samples, 4.97%)</title><rect x="45.4002%" y="133" width="4.9660%" height="15" fill="rgb(252,8,32)" fg:x="346378262639" fg:w="37887505088"/><text x="45.6502%" y="143.50">&lt;[A] a..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (41,130,206,994 samples, 5.39%)</title><rect x="45.2630%" y="245" width="5.3910%" height="15" fill="rgb(223,20,43)" fg:x="345331514044" fg:w="41130206994"/><text x="45.5130%" y="255.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2,195,953,311 samples, 0.29%)</title><rect x="50.3662%" y="229" width="0.2878%" height="15" fill="rgb(229,81,49)" fg:x="384265767727" fg:w="2195953311"/><text x="50.6162%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2,195,953,311 samples, 0.29%)</title><rect x="50.3662%" y="213" width="0.2878%" height="15" fill="rgb(236,28,36)" fg:x="384265767727" fg:w="2195953311"/><text x="50.6162%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2,195,953,311 samples, 0.29%)</title><rect x="50.3662%" y="197" width="0.2878%" height="15" fill="rgb(249,185,26)" fg:x="384265767727" fg:w="2195953311"/><text x="50.6162%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (123,657,750,451 samples, 16.21%)</title><rect x="34.6336%" y="341" width="16.2080%" height="15" fill="rgb(249,174,33)" fg:x="264234782778" fg:w="123657750451"/><text x="34.8836%" y="351.50">std::collections::hash::m..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (123,657,750,451 samples, 16.21%)</title><rect x="34.6336%" y="325" width="16.2080%" height="15" fill="rgb(233,201,37)" fg:x="264234782778" fg:w="123657750451"/><text x="34.8836%" y="335.50">hashbrown::map::HashMap&lt;K..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (123,657,750,451 samples, 16.21%)</title><rect x="34.6336%" y="309" width="16.2080%" height="15" fill="rgb(221,78,26)" fg:x="264234782778" fg:w="123657750451"/><text x="34.8836%" y="319.50">hashbrown::map::HashMap&lt;K..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (60,505,088,489 samples, 7.93%)</title><rect x="42.9111%" y="293" width="7.9305%" height="15" fill="rgb(250,127,30)" fg:x="327387444740" fg:w="60505088489"/><text x="43.1611%" y="303.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (60,505,088,489 samples, 7.93%)</title><rect x="42.9111%" y="277" width="7.9305%" height="15" fill="rgb(230,49,44)" fg:x="327387444740" fg:w="60505088489"/><text x="43.1611%" y="287.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (60,505,088,489 samples, 7.93%)</title><rect x="42.9111%" y="261" width="7.9305%" height="15" fill="rgb(229,67,23)" fg:x="327387444740" fg:w="60505088489"/><text x="43.1611%" y="271.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1,430,812,191 samples, 0.19%)</title><rect x="50.6540%" y="245" width="0.1875%" height="15" fill="rgb(249,83,47)" fg:x="386461721038" fg:w="1430812191"/><text x="50.9040%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="533" width="50.8352%" height="15" fill="rgb(215,43,3)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="517" width="50.8352%" height="15" fill="rgb(238,154,13)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="501" width="50.8352%" height="15" fill="rgb(219,56,2)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="485" width="50.8352%" height="15" fill="rgb(233,0,4)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="495.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="469" width="50.8352%" height="15" fill="rgb(235,30,7)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="453" width="50.8352%" height="15" fill="rgb(250,79,13)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="437" width="50.8352%" height="15" fill="rgb(211,146,34)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="447.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="421" width="50.8352%" height="15" fill="rgb(228,22,38)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="431.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="405" width="50.8352%" height="15" fill="rgb(235,168,5)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="415.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="389" width="50.8352%" height="15" fill="rgb(221,155,16)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="399.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}} (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="373" width="50.8352%" height="15" fill="rgb(215,215,53)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="383.50">one_brc::main::_{{closure}}</text></g><g><title>one_brc::worker_pool::Worker::listen (387,843,938,584 samples, 50.84%)</title><rect x="0.0065%" y="357" width="50.8352%" height="15" fill="rgb(223,4,10)" fg:x="49270366" fg:w="387843938584"/><text x="0.2565%" y="367.50">one_brc::worker_pool::Worker::listen</text></g><g><title>[libc.so.6] (387,892,761,153 samples, 50.84%)</title><rect x="0.0001%" y="581" width="50.8416%" height="15" fill="rgb(234,103,6)" fg:x="634682" fg:w="387892761153"/><text x="0.2501%" y="591.50">[libc.so.6]</text></g><g><title>[libc.so.6] (387,892,761,153 samples, 50.84%)</title><rect x="0.0001%" y="565" width="50.8416%" height="15" fill="rgb(227,97,0)" fg:x="634682" fg:w="387892761153"/><text x="0.2501%" y="575.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (387,844,125,469 samples, 50.84%)</title><rect x="0.0065%" y="549" width="50.8352%" height="15" fill="rgb(234,150,53)" fg:x="49270366" fg:w="387844125469"/><text x="0.2565%" y="559.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (439,660,351 samples, 0.06%)</title><rect x="50.8504%" y="261" width="0.0576%" height="15" fill="rgb(228,201,54)" fg:x="387960204307" fg:w="439660351"/><text x="51.1004%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (439,660,351 samples, 0.06%)</title><rect x="50.8504%" y="245" width="0.0576%" height="15" fill="rgb(222,22,37)" fg:x="387960204307" fg:w="439660351"/><text x="51.1004%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (439,660,351 samples, 0.06%)</title><rect x="50.8504%" y="229" width="0.0576%" height="15" fill="rgb(237,53,32)" fg:x="387960204307" fg:w="439660351"/><text x="51.1004%" y="239.50"></text></g><g><title>core::ptr::write (439,660,351 samples, 0.06%)</title><rect x="50.8504%" y="213" width="0.0576%" height="15" fill="rgb(233,25,53)" fg:x="387960204307" fg:w="439660351"/><text x="51.1004%" y="223.50"></text></g><g><title>[unknown] (383,823,240 samples, 0.05%)</title><rect x="50.8577%" y="197" width="0.0503%" height="15" fill="rgb(210,40,34)" fg:x="388016041418" fg:w="383823240"/><text x="51.1077%" y="207.50"></text></g><g><title>[unknown] (382,853,432 samples, 0.05%)</title><rect x="50.8579%" y="181" width="0.0502%" height="15" fill="rgb(241,220,44)" fg:x="388017011226" fg:w="382853432"/><text x="51.1079%" y="191.50"></text></g><g><title>[unknown] (382,330,832 samples, 0.05%)</title><rect x="50.8579%" y="165" width="0.0501%" height="15" fill="rgb(235,28,35)" fg:x="388017533826" fg:w="382330832"/><text x="51.1079%" y="175.50"></text></g><g><title>[unknown] (359,616,778 samples, 0.05%)</title><rect x="50.8609%" y="149" width="0.0471%" height="15" fill="rgb(210,56,17)" fg:x="388040247880" fg:w="359616778"/><text x="51.1109%" y="159.50"></text></g><g><title>[unknown] (270,581,719 samples, 0.04%)</title><rect x="50.8726%" y="133" width="0.0355%" height="15" fill="rgb(224,130,29)" fg:x="388129282939" fg:w="270581719"/><text x="51.1226%" y="143.50"></text></g><g><title>[unknown] (91,046,042 samples, 0.01%)</title><rect x="50.8961%" y="117" width="0.0119%" height="15" fill="rgb(235,212,8)" fg:x="388308818616" fg:w="91046042"/><text x="51.1461%" y="127.50"></text></g><g><title>crossbeam_channel::channel::bounded (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="469" width="0.0600%" height="15" fill="rgb(223,33,50)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="479.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::with_capacity (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="453" width="0.0600%" height="15" fill="rgb(219,149,13)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="437" width="0.0600%" height="15" fill="rgb(250,156,29)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="447.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;I&gt; for alloc::boxed::Box&lt;[I]&gt;&gt;::from_iter (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="421" width="0.0600%" height="15" fill="rgb(216,193,19)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="405" width="0.0600%" height="15" fill="rgb(216,135,14)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="389" width="0.0600%" height="15" fill="rgb(241,47,5)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="373" width="0.0600%" height="15" fill="rgb(233,42,35)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="357" width="0.0600%" height="15" fill="rgb(231,13,6)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="341" width="0.0600%" height="15" fill="rgb(207,181,40)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="325" width="0.0600%" height="15" fill="rgb(254,173,49)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="309" width="0.0600%" height="15" fill="rgb(221,1,38)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="293" width="0.0600%" height="15" fill="rgb(206,124,46)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (457,903,041 samples, 0.06%)</title><rect x="50.8504%" y="277" width="0.0600%" height="15" fill="rgb(249,21,11)" fg:x="387960204307" fg:w="457903041"/><text x="51.1004%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (87,678,390 samples, 0.01%)</title><rect x="51.6785%" y="437" width="0.0115%" height="15" fill="rgb(222,201,40)" fg:x="394278407255" fg:w="87678390"/><text x="51.9285%" y="447.50"></text></g><g><title>alloc::string::String::as_str (87,678,390 samples, 0.01%)</title><rect x="51.6785%" y="421" width="0.0115%" height="15" fill="rgb(235,61,29)" fg:x="394278407255" fg:w="87678390"/><text x="51.9285%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (87,678,390 samples, 0.01%)</title><rect x="51.6785%" y="405" width="0.0115%" height="15" fill="rgb(219,207,3)" fg:x="394278407255" fg:w="87678390"/><text x="51.9285%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (87,678,390 samples, 0.01%)</title><rect x="51.6785%" y="389" width="0.0115%" height="15" fill="rgb(222,56,46)" fg:x="394278407255" fg:w="87678390"/><text x="51.9285%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (87,678,390 samples, 0.01%)</title><rect x="51.6785%" y="373" width="0.0115%" height="15" fill="rgb(239,76,54)" fg:x="394278407255" fg:w="87678390"/><text x="51.9285%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (87,678,390 samples, 0.01%)</title><rect x="51.6785%" y="357" width="0.0115%" height="15" fill="rgb(231,124,27)" fg:x="394278407255" fg:w="87678390"/><text x="51.9285%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (87,678,390 samples, 0.01%)</title><rect x="51.6785%" y="341" width="0.0115%" height="15" fill="rgb(249,195,6)" fg:x="394278407255" fg:w="87678390"/><text x="51.9285%" y="351.50"></text></g><g><title>alloc::string::String::new (1,287,510,830 samples, 0.17%)</title><rect x="51.6905%" y="437" width="0.1688%" height="15" fill="rgb(237,174,47)" fg:x="394369720074" fg:w="1287510830"/><text x="51.9405%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (1,307,917,826 samples, 0.17%)</title><rect x="51.8593%" y="437" width="0.1714%" height="15" fill="rgb(206,201,31)" fg:x="395657230904" fg:w="1307917826"/><text x="52.1093%" y="447.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (1,307,917,826 samples, 0.17%)</title><rect x="51.8593%" y="421" width="0.1714%" height="15" fill="rgb(231,57,52)" fg:x="395657230904" fg:w="1307917826"/><text x="52.1093%" y="431.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,307,917,826 samples, 0.17%)</title><rect x="51.8593%" y="405" width="0.1714%" height="15" fill="rgb(248,177,22)" fg:x="395657230904" fg:w="1307917826"/><text x="52.1093%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,307,917,826 samples, 0.17%)</title><rect x="51.8593%" y="389" width="0.1714%" height="15" fill="rgb(215,211,37)" fg:x="395657230904" fg:w="1307917826"/><text x="52.1093%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (187,291,605 samples, 0.02%)</title><rect x="52.0062%" y="373" width="0.0245%" height="15" fill="rgb(241,128,51)" fg:x="396777857125" fg:w="187291605"/><text x="52.2562%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (187,291,605 samples, 0.02%)</title><rect x="52.0062%" y="357" width="0.0245%" height="15" fill="rgb(227,165,31)" fg:x="396777857125" fg:w="187291605"/><text x="52.2562%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (187,291,605 samples, 0.02%)</title><rect x="52.0062%" y="341" width="0.0245%" height="15" fill="rgb(228,167,24)" fg:x="396777857125" fg:w="187291605"/><text x="52.2562%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (92,437,103 samples, 0.01%)</title><rect x="52.5758%" y="405" width="0.0121%" height="15" fill="rgb(228,143,12)" fg:x="401123590173" fg:w="92437103"/><text x="52.8258%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (92,437,103 samples, 0.01%)</title><rect x="52.5758%" y="389" width="0.0121%" height="15" fill="rgb(249,149,8)" fg:x="401123590173" fg:w="92437103"/><text x="52.8258%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (38,578,689,512 samples, 5.06%)</title><rect x="52.5879%" y="405" width="5.0566%" height="15" fill="rgb(243,35,44)" fg:x="401216027276" fg:w="38578689512"/><text x="52.8379%" y="415.50">core::..</text></g><g><title>core::str::validations::run_utf8_validation (22,211,618,803 samples, 2.91%)</title><rect x="54.7331%" y="389" width="2.9113%" height="15" fill="rgb(246,89,9)" fg:x="417583097985" fg:w="22211618803"/><text x="54.9831%" y="399.50">co..</text></g><g><title>core::str::validations::utf8_char_width (267,409,141 samples, 0.04%)</title><rect x="57.6094%" y="373" width="0.0350%" height="15" fill="rgb(233,213,13)" fg:x="439527307647" fg:w="267409141"/><text x="57.8594%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1,278,393,451 samples, 0.17%)</title><rect x="57.6521%" y="373" width="0.1676%" height="15" fill="rgb(233,141,41)" fg:x="439853162673" fg:w="1278393451"/><text x="57.9021%" y="383.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1,278,393,451 samples, 0.17%)</title><rect x="57.6521%" y="357" width="0.1676%" height="15" fill="rgb(239,167,4)" fg:x="439853162673" fg:w="1278393451"/><text x="57.9021%" y="367.50"></text></g><g><title>core::cmp::min (820,926,747 samples, 0.11%)</title><rect x="57.7120%" y="341" width="0.1076%" height="15" fill="rgb(209,217,16)" fg:x="440310629377" fg:w="820926747"/><text x="57.9620%" y="351.50"></text></g><g><title>core::cmp::Ord::min (820,926,747 samples, 0.11%)</title><rect x="57.7120%" y="325" width="0.1076%" height="15" fill="rgb(219,88,35)" fg:x="440310629377" fg:w="820926747"/><text x="57.9620%" y="335.50"></text></g><g><title>core::cmp::min_by (820,926,747 samples, 0.11%)</title><rect x="57.7120%" y="309" width="0.1076%" height="15" fill="rgb(220,193,23)" fg:x="440310629377" fg:w="820926747"/><text x="57.9620%" y="319.50"></text></g><g><title>read (1,840,989,873 samples, 0.24%)</title><rect x="57.9120%" y="261" width="0.2413%" height="15" fill="rgb(230,90,52)" fg:x="441836237817" fg:w="1840989873"/><text x="58.1620%" y="271.50"></text></g><g><title>[libc.so.6] (1,816,136,405 samples, 0.24%)</title><rect x="57.9153%" y="245" width="0.2380%" height="15" fill="rgb(252,106,19)" fg:x="441861091285" fg:w="1816136405"/><text x="58.1653%" y="255.50"></text></g><g><title>[libc.so.6] (1,812,435,696 samples, 0.24%)</title><rect x="57.9158%" y="229" width="0.2376%" height="15" fill="rgb(206,74,20)" fg:x="441864791994" fg:w="1812435696"/><text x="58.1658%" y="239.50"></text></g><g><title>[libc.so.6] (1,795,200,619 samples, 0.24%)</title><rect x="57.9180%" y="213" width="0.2353%" height="15" fill="rgb(230,138,44)" fg:x="441882027071" fg:w="1795200619"/><text x="58.1680%" y="223.50"></text></g><g><title>[unknown] (1,791,737,726 samples, 0.23%)</title><rect x="57.9185%" y="197" width="0.2348%" height="15" fill="rgb(235,182,43)" fg:x="441885489964" fg:w="1791737726"/><text x="58.1685%" y="207.50"></text></g><g><title>[unknown] (1,631,801,492 samples, 0.21%)</title><rect x="57.9394%" y="181" width="0.2139%" height="15" fill="rgb(242,16,51)" fg:x="442045426198" fg:w="1631801492"/><text x="58.1894%" y="191.50"></text></g><g><title>[unknown] (1,546,055,533 samples, 0.20%)</title><rect x="57.9507%" y="165" width="0.2026%" height="15" fill="rgb(248,9,4)" fg:x="442131172157" fg:w="1546055533"/><text x="58.2007%" y="175.50"></text></g><g><title>[unknown] (1,415,123,723 samples, 0.19%)</title><rect x="57.9678%" y="149" width="0.1855%" height="15" fill="rgb(210,31,22)" fg:x="442262103967" fg:w="1415123723"/><text x="58.2178%" y="159.50"></text></g><g><title>[unknown] (1,086,643,637 samples, 0.14%)</title><rect x="58.0109%" y="133" width="0.1424%" height="15" fill="rgb(239,54,39)" fg:x="442590584053" fg:w="1086643637"/><text x="58.2609%" y="143.50"></text></g><g><title>[unknown] (723,792,156 samples, 0.09%)</title><rect x="58.0584%" y="117" width="0.0949%" height="15" fill="rgb(230,99,41)" fg:x="442953435534" fg:w="723792156"/><text x="58.3084%" y="127.50"></text></g><g><title>[unknown] (572,690,955 samples, 0.08%)</title><rect x="58.0782%" y="101" width="0.0751%" height="15" fill="rgb(253,106,12)" fg:x="443104536735" fg:w="572690955"/><text x="58.3282%" y="111.50"></text></g><g><title>[unknown] (280,950,040 samples, 0.04%)</title><rect x="58.1165%" y="85" width="0.0368%" height="15" fill="rgb(213,46,41)" fg:x="443396277650" fg:w="280950040"/><text x="58.3665%" y="95.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2,545,671,567 samples, 0.33%)</title><rect x="57.8196%" y="373" width="0.3337%" height="15" fill="rgb(215,133,35)" fg:x="441131556124" fg:w="2545671567"/><text x="58.0696%" y="383.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2,545,671,567 samples, 0.33%)</title><rect x="57.8196%" y="357" width="0.3337%" height="15" fill="rgb(213,28,5)" fg:x="441131556124" fg:w="2545671567"/><text x="58.0696%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1,844,677,764 samples, 0.24%)</title><rect x="57.9115%" y="341" width="0.2418%" height="15" fill="rgb(215,77,49)" fg:x="441832549927" fg:w="1844677764"/><text x="58.1615%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1,844,677,764 samples, 0.24%)</title><rect x="57.9115%" y="325" width="0.2418%" height="15" fill="rgb(248,100,22)" fg:x="441832549927" fg:w="1844677764"/><text x="58.1615%" y="335.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1,844,677,764 samples, 0.24%)</title><rect x="57.9115%" y="309" width="0.2418%" height="15" fill="rgb(208,67,9)" fg:x="441832549927" fg:w="1844677764"/><text x="58.1615%" y="319.50"></text></g><g><title>std::sys::pal::unix::fs::File::read_buf (1,844,677,764 samples, 0.24%)</title><rect x="57.9115%" y="293" width="0.2418%" height="15" fill="rgb(219,133,21)" fg:x="441832549927" fg:w="1844677764"/><text x="58.1615%" y="303.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (1,844,677,764 samples, 0.24%)</title><rect x="57.9115%" y="277" width="0.2418%" height="15" fill="rgb(246,46,29)" fg:x="441832549927" fg:w="1844677764"/><text x="58.1615%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2,658,765,559 samples, 0.35%)</title><rect x="58.2273%" y="325" width="0.3485%" height="15" fill="rgb(246,185,52)" fg:x="444241729821" fg:w="2658765559"/><text x="58.4773%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,658,765,559 samples, 0.35%)</title><rect x="58.2273%" y="309" width="0.3485%" height="15" fill="rgb(252,136,11)" fg:x="444241729821" fg:w="2658765559"/><text x="58.4773%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2,658,765,559 samples, 0.35%)</title><rect x="58.2273%" y="293" width="0.3485%" height="15" fill="rgb(219,138,53)" fg:x="444241729821" fg:w="2658765559"/><text x="58.4773%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2,658,765,559 samples, 0.35%)</title><rect x="58.2273%" y="277" width="0.3485%" height="15" fill="rgb(211,51,23)" fg:x="444241729821" fg:w="2658765559"/><text x="58.4773%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (227,422,262 samples, 0.03%)</title><rect x="58.5758%" y="325" width="0.0298%" height="15" fill="rgb(247,221,28)" fg:x="446900495380" fg:w="227422262"/><text x="58.8258%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (2,564,214,514 samples, 0.34%)</title><rect x="58.8558%" y="261" width="0.3361%" height="15" fill="rgb(251,222,45)" fg:x="449037181923" fg:w="2564214514"/><text x="59.1058%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (4,416,602,944 samples, 0.58%)</title><rect x="58.7527%" y="277" width="0.5789%" height="15" fill="rgb(217,162,53)" fg:x="448250352989" fg:w="4416602944"/><text x="59.0027%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,065,559,496 samples, 0.14%)</title><rect x="59.1919%" y="261" width="0.1397%" height="15" fill="rgb(229,93,14)" fg:x="451601396437" fg:w="1065559496"/><text x="59.4419%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,673,541,417 samples, 0.35%)</title><rect x="59.6519%" y="245" width="0.3504%" height="15" fill="rgb(209,67,49)" fg:x="455110679604" fg:w="2673541417"/><text x="59.9019%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (83,796,849 samples, 0.01%)</title><rect x="60.0028%" y="245" width="0.0110%" height="15" fill="rgb(213,87,29)" fg:x="457787454927" fg:w="83796849"/><text x="60.2528%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (298,635,863 samples, 0.04%)</title><rect x="60.0137%" y="245" width="0.0391%" height="15" fill="rgb(205,151,52)" fg:x="457871251776" fg:w="298635863"/><text x="60.2637%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1,082,290,052 samples, 0.14%)</title><rect x="61.0391%" y="229" width="0.1419%" height="15" fill="rgb(253,215,39)" fg:x="465694345692" fg:w="1082290052"/><text x="61.2891%" y="239.50"></text></g><g><title>[libc.so.6] (174,159,909,597 samples, 22.83%)</title><rect x="66.1412%" y="213" width="22.8273%" height="15" fill="rgb(221,220,41)" fg:x="504620321674" fg:w="174159909597"/><text x="66.3912%" y="223.50">[libc.so.6]</text></g><g><title>[unknown] (128,967,098 samples, 0.02%)</title><rect x="88.9516%" y="197" width="0.0169%" height="15" fill="rgb(218,133,21)" fg:x="678651264173" fg:w="128967098"/><text x="89.2016%" y="207.50"></text></g><g><title>[unknown] (111,669,774 samples, 0.01%)</title><rect x="88.9539%" y="181" width="0.0146%" height="15" fill="rgb(221,193,43)" fg:x="678668561497" fg:w="111669774"/><text x="89.2039%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (220,643,110,118 samples, 28.92%)</title><rect x="60.0529%" y="245" width="28.9200%" height="15" fill="rgb(240,128,52)" fg:x="458169887639" fg:w="220643110118"/><text x="60.3029%" y="255.50">alloc::raw_vec::finish_grow</text></g><g><title>malloc (212,036,362,013 samples, 27.79%)</title><rect x="61.1810%" y="229" width="27.7919%" height="15" fill="rgb(253,114,12)" fg:x="466776635744" fg:w="212036362013"/><text x="61.4310%" y="239.50">malloc</text></g><g><title>alloc::raw_vec::layout_array (1,767,703,685 samples, 0.23%)</title><rect x="88.9728%" y="245" width="0.2317%" height="15" fill="rgb(215,223,47)" fg:x="678812997757" fg:w="1767703685"/><text x="89.2228%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1,767,703,685 samples, 0.23%)</title><rect x="88.9728%" y="229" width="0.2317%" height="15" fill="rgb(248,225,23)" fg:x="678812997757" fg:w="1767703685"/><text x="89.2228%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (890,604,636 samples, 0.12%)</title><rect x="89.0878%" y="213" width="0.1167%" height="15" fill="rgb(250,108,0)" fg:x="679690096806" fg:w="890604636"/><text x="89.3378%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (890,604,636 samples, 0.12%)</title><rect x="89.0878%" y="197" width="0.1167%" height="15" fill="rgb(228,208,7)" fg:x="679690096806" fg:w="890604636"/><text x="89.3378%" y="207.50"></text></g><g><title>core::intrinsics::unlikely (890,604,636 samples, 0.12%)</title><rect x="89.0878%" y="181" width="0.1167%" height="15" fill="rgb(244,45,10)" fg:x="679690096806" fg:w="890604636"/><text x="89.3378%" y="191.50"></text></g><g><title>core::cmp::max (3,477,416,032 samples, 0.46%)</title><rect x="89.2045%" y="245" width="0.4558%" height="15" fill="rgb(207,125,25)" fg:x="680580701442" fg:w="3477416032"/><text x="89.4545%" y="255.50"></text></g><g><title>core::cmp::Ord::max (3,477,416,032 samples, 0.46%)</title><rect x="89.2045%" y="229" width="0.4558%" height="15" fill="rgb(210,195,18)" fg:x="680580701442" fg:w="3477416032"/><text x="89.4545%" y="239.50"></text></g><g><title>core::cmp::max_by (3,477,416,032 samples, 0.46%)</title><rect x="89.2045%" y="213" width="0.4558%" height="15" fill="rgb(249,80,12)" fg:x="680580701442" fg:w="3477416032"/><text x="89.4545%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (238,571,619,304 samples, 31.27%)</title><rect x="58.6056%" y="325" width="31.2699%" height="15" fill="rgb(221,65,9)" fg:x="447127917642" fg:w="238571619304"/><text x="58.8556%" y="335.50">alloc::vec::Vec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (238,571,619,304 samples, 31.27%)</title><rect x="58.6056%" y="309" width="31.2699%" height="15" fill="rgb(235,49,36)" fg:x="447127917642" fg:w="238571619304"/><text x="58.8556%" y="319.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (238,571,619,304 samples, 31.27%)</title><rect x="58.6056%" y="293" width="31.2699%" height="15" fill="rgb(225,32,20)" fg:x="447127917642" fg:w="238571619304"/><text x="58.8556%" y="303.50">alloc::raw_vec::RawVecInner&lt;A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (233,032,581,013 samples, 30.54%)</title><rect x="59.3316%" y="277" width="30.5439%" height="15" fill="rgb(215,141,46)" fg:x="452666955933" fg:w="233032581013"/><text x="59.5816%" y="287.50">alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reser..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (232,798,171,886 samples, 30.51%)</title><rect x="59.3623%" y="261" width="30.5131%" height="15" fill="rgb(250,160,47)" fg:x="452901365060" fg:w="232798171886"/><text x="59.6123%" y="271.50">alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1,641,419,472 samples, 0.22%)</title><rect x="89.6603%" y="245" width="0.2151%" height="15" fill="rgb(216,222,40)" fg:x="684058117474" fg:w="1641419472"/><text x="89.9103%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,320,684,861 samples, 0.96%)</title><rect x="89.8755%" y="325" width="0.9595%" height="15" fill="rgb(234,217,39)" fg:x="685699536946" fg:w="7320684861"/><text x="90.1255%" y="335.50"></text></g><g><title>[libc.so.6] (6,963,098,868 samples, 0.91%)</title><rect x="89.9223%" y="309" width="0.9127%" height="15" fill="rgb(207,178,40)" fg:x="686057122939" fg:w="6963098868"/><text x="90.1723%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (250,013,412,642 samples, 32.77%)</title><rect x="58.1533%" y="373" width="32.7696%" height="15" fill="rgb(221,136,13)" fg:x="443677227691" fg:w="250013412642"/><text x="58.4033%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::extend_from_slice</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (250,013,412,642 samples, 32.77%)</title><rect x="58.1533%" y="357" width="32.7696%" height="15" fill="rgb(249,199,10)" fg:x="443677227691" fg:w="250013412642"/><text x="58.4033%" y="367.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::Spe..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (250,013,412,642 samples, 32.77%)</title><rect x="58.1533%" y="341" width="32.7696%" height="15" fill="rgb(249,222,13)" fg:x="443677227691" fg:w="250013412642"/><text x="58.4033%" y="351.50">alloc::vec::Vec&lt;T,A&gt;::append_elements</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (670,418,526 samples, 0.09%)</title><rect x="90.8350%" y="325" width="0.0879%" height="15" fill="rgb(244,185,38)" fg:x="693020221807" fg:w="670418526"/><text x="91.0850%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10,873,686,675 samples, 1.43%)</title><rect x="90.9229%" y="373" width="1.4252%" height="15" fill="rgb(236,202,9)" fg:x="693690640333" fg:w="10873686675"/><text x="91.1729%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10,873,686,675 samples, 1.43%)</title><rect x="90.9229%" y="357" width="1.4252%" height="15" fill="rgb(250,229,37)" fg:x="693690640333" fg:w="10873686675"/><text x="91.1729%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10,873,686,675 samples, 1.43%)</title><rect x="90.9229%" y="341" width="1.4252%" height="15" fill="rgb(206,174,23)" fg:x="693690640333" fg:w="10873686675"/><text x="91.1729%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (2,217,154,399 samples, 0.29%)</title><rect x="93.5966%" y="325" width="0.2906%" height="15" fill="rgb(211,33,43)" fg:x="714089482528" fg:w="2217154399"/><text x="93.8466%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (29,982,552,294 samples, 3.93%)</title><rect x="92.5036%" y="357" width="3.9298%" height="15" fill="rgb(245,58,50)" fg:x="705750780381" fg:w="29982552294"/><text x="92.7536%" y="367.50">core..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (29,982,552,294 samples, 3.93%)</title><rect x="92.5036%" y="341" width="3.9298%" height="15" fill="rgb(244,68,36)" fg:x="705750780381" fg:w="29982552294"/><text x="92.7536%" y="351.50">core..</text></g><g><title>core::slice::memchr::memchr_naive (19,426,695,748 samples, 2.55%)</title><rect x="93.8872%" y="325" width="2.5463%" height="15" fill="rgb(232,229,15)" fg:x="716306636927" fg:w="19426695748"/><text x="94.1372%" y="335.50">co..</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (346,201,752,881 samples, 45.38%)</title><rect x="51.0639%" y="453" width="45.3771%" height="15" fill="rgb(254,30,23)" fg:x="389589275292" fg:w="346201752881"/><text x="51.3139%" y="463.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>std::io::BufRead::read_line (338,825,879,443 samples, 44.41%)</title><rect x="52.0307%" y="437" width="44.4103%" height="15" fill="rgb(235,160,14)" fg:x="396965148730" fg:w="338825879443"/><text x="52.2807%" y="447.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (338,825,879,443 samples, 44.41%)</title><rect x="52.0307%" y="421" width="44.4103%" height="15" fill="rgb(212,155,44)" fg:x="396965148730" fg:w="338825879443"/><text x="52.2807%" y="431.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::_{{closure}} (295,996,311,385 samples, 38.80%)</title><rect x="57.6444%" y="405" width="38.7966%" height="15" fill="rgb(226,2,50)" fg:x="439794716788" fg:w="295996311385"/><text x="57.8944%" y="415.50">std::io::BufRead::read_line::_{{closure}}</text></g><g><title>std::io::read_until (295,996,311,385 samples, 38.80%)</title><rect x="57.6444%" y="389" width="38.7966%" height="15" fill="rgb(234,177,6)" fg:x="439794716788" fg:w="295996311385"/><text x="57.8944%" y="399.50">std::io::read_until</text></g><g><title>core::slice::memchr::memchr (31,226,701,165 samples, 4.09%)</title><rect x="92.3481%" y="373" width="4.0929%" height="15" fill="rgb(217,24,9)" fg:x="704564327008" fg:w="31226701165"/><text x="92.5981%" y="383.50">core..</text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (1,023,220,868 samples, 0.13%)</title><rect x="96.4410%" y="421" width="0.1341%" height="15" fill="rgb(220,13,46)" fg:x="735791028173" fg:w="1023220868"/><text x="96.6910%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8,109,114,620 samples, 1.06%)</title><rect x="98.2472%" y="405" width="1.0629%" height="15" fill="rgb(239,221,27)" fg:x="749571317866" fg:w="8109114620"/><text x="98.4972%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8,109,114,620 samples, 1.06%)</title><rect x="98.2472%" y="389" width="1.0629%" height="15" fill="rgb(222,198,25)" fg:x="749571317866" fg:w="8109114620"/><text x="98.4972%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (21,648,530,978 samples, 2.84%)</title><rect x="96.5751%" y="421" width="2.8375%" height="15" fill="rgb(211,99,13)" fg:x="736814249041" fg:w="21648530978"/><text x="96.8251%" y="431.50">cr..</text></g><g><title>core::sync::atomic::AtomicUsize::load (782,347,533 samples, 0.10%)</title><rect x="99.3101%" y="405" width="0.1025%" height="15" fill="rgb(232,111,31)" fg:x="757680432486" fg:w="782347533"/><text x="99.5601%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (782,347,533 samples, 0.10%)</title><rect x="99.3101%" y="389" width="0.1025%" height="15" fill="rgb(245,82,37)" fg:x="757680432486" fg:w="782347533"/><text x="99.5601%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (300,564,904 samples, 0.04%)</title><rect x="99.5204%" y="405" width="0.0394%" height="15" fill="rgb(227,149,46)" fg:x="759284957408" fg:w="300564904"/><text x="99.7704%" y="415.50"></text></g><g><title>core::ptr::write (300,564,904 samples, 0.04%)</title><rect x="99.5204%" y="389" width="0.0394%" height="15" fill="rgb(218,36,50)" fg:x="759284957408" fg:w="300564904"/><text x="99.7704%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1,015,024,598 samples, 0.13%)</title><rect x="99.6956%" y="389" width="0.1330%" height="15" fill="rgb(226,80,48)" fg:x="760621705235" fg:w="1015024598"/><text x="99.9456%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (1,015,024,598 samples, 0.13%)</title><rect x="99.6956%" y="373" width="0.1330%" height="15" fill="rgb(238,224,15)" fg:x="760621705235" fg:w="1015024598"/><text x="99.9456%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (25,978,371,304 samples, 3.41%)</title><rect x="96.4410%" y="453" width="3.4050%" height="15" fill="rgb(241,136,10)" fg:x="735791028173" fg:w="25978371304"/><text x="96.6910%" y="463.50">cro..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (25,978,371,304 samples, 3.41%)</title><rect x="96.4410%" y="437" width="3.4050%" height="15" fill="rgb(208,32,45)" fg:x="735791028173" fg:w="25978371304"/><text x="96.6910%" y="447.50">cro..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::write (3,306,619,458 samples, 0.43%)</title><rect x="99.4126%" y="421" width="0.4334%" height="15" fill="rgb(207,135,9)" fg:x="758462780019" fg:w="3306619458"/><text x="99.6626%" y="431.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (2,155,405,643 samples, 0.28%)</title><rect x="99.5635%" y="405" width="0.2825%" height="15" fill="rgb(206,86,44)" fg:x="759613993834" fg:w="2155405643"/><text x="99.8135%" y="415.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (132,669,644 samples, 0.02%)</title><rect x="99.8286%" y="389" width="0.0174%" height="15" fill="rgb(245,177,15)" fg:x="761636729833" fg:w="132669644"/><text x="100.0786%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (132,669,644 samples, 0.02%)</title><rect x="99.8286%" y="373" width="0.0174%" height="15" fill="rgb(206,64,50)" fg:x="761636729833" fg:w="132669644"/><text x="100.0786%" y="383.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::_{{closure}} (132,669,644 samples, 0.02%)</title><rect x="99.8286%" y="357" width="0.0174%" height="15" fill="rgb(234,36,40)" fg:x="761636729833" fg:w="132669644"/><text x="100.0786%" y="367.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (129,030,028 samples, 0.02%)</title><rect x="99.8291%" y="341" width="0.0169%" height="15" fill="rgb(213,64,8)" fg:x="761640369449" fg:w="129030028"/><text x="100.0791%" y="351.50"></text></g><g><title>std::thread::Thread::unpark (129,030,028 samples, 0.02%)</title><rect x="99.8291%" y="325" width="0.0169%" height="15" fill="rgb(210,75,36)" fg:x="761640369449" fg:w="129030028"/><text x="100.0791%" y="335.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::unpark (129,030,028 samples, 0.02%)</title><rect x="99.8291%" y="309" width="0.0169%" height="15" fill="rgb(229,88,21)" fg:x="761640369449" fg:w="129030028"/><text x="100.0791%" y="319.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (122,927,493 samples, 0.02%)</title><rect x="99.8299%" y="293" width="0.0161%" height="15" fill="rgb(252,204,47)" fg:x="761646471984" fg:w="122927493"/><text x="100.0799%" y="303.50"></text></g><g><title>syscall (122,927,493 samples, 0.02%)</title><rect x="99.8299%" y="277" width="0.0161%" height="15" fill="rgb(208,77,27)" fg:x="761646471984" fg:w="122927493"/><text x="100.0799%" y="287.50"></text></g><g><title>[unknown] (122,927,493 samples, 0.02%)</title><rect x="99.8299%" y="261" width="0.0161%" height="15" fill="rgb(221,76,26)" fg:x="761646471984" fg:w="122927493"/><text x="100.0799%" y="271.50"></text></g><g><title>[unknown] (119,328,143 samples, 0.02%)</title><rect x="99.8304%" y="245" width="0.0156%" height="15" fill="rgb(225,139,18)" fg:x="761650071334" fg:w="119328143"/><text x="100.0804%" y="255.50"></text></g><g><title>[unknown] (119,328,143 samples, 0.02%)</title><rect x="99.8304%" y="229" width="0.0156%" height="15" fill="rgb(230,137,11)" fg:x="761650071334" fg:w="119328143"/><text x="100.0804%" y="239.50"></text></g><g><title>[unknown] (115,707,903 samples, 0.02%)</title><rect x="99.8309%" y="213" width="0.0152%" height="15" fill="rgb(212,28,1)" fg:x="761653691574" fg:w="115707903"/><text x="100.0809%" y="223.50"></text></g><g><title>[unknown] (115,707,903 samples, 0.02%)</title><rect x="99.8309%" y="197" width="0.0152%" height="15" fill="rgb(248,164,17)" fg:x="761653691574" fg:w="115707903"/><text x="100.0809%" y="207.50"></text></g><g><title>_start (374,087,018,289 samples, 49.03%)</title><rect x="50.8499%" y="581" width="49.0320%" height="15" fill="rgb(222,171,42)" fg:x="387956527932" fg:w="374087018289"/><text x="51.0999%" y="591.50">_start</text></g><g><title>__libc_start_main (374,087,018,289 samples, 49.03%)</title><rect x="50.8499%" y="565" width="49.0320%" height="15" fill="rgb(243,84,45)" fg:x="387956527932" fg:w="374087018289"/><text x="51.0999%" y="575.50">__libc_start_main</text></g><g><title>[libc.so.6] (374,087,018,289 samples, 49.03%)</title><rect x="50.8499%" y="549" width="49.0320%" height="15" fill="rgb(252,49,23)" fg:x="387956527932" fg:w="374087018289"/><text x="51.0999%" y="559.50">[libc.so.6]</text></g><g><title>main (374,087,018,289 samples, 49.03%)</title><rect x="50.8499%" y="533" width="49.0320%" height="15" fill="rgb(215,19,7)" fg:x="387956527932" fg:w="374087018289"/><text x="51.0999%" y="543.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (374,087,018,289 samples, 49.03%)</title><rect x="50.8499%" y="517" width="49.0320%" height="15" fill="rgb(238,81,41)" fg:x="387956527932" fg:w="374087018289"/><text x="51.0999%" y="527.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (374,087,018,289 samples, 49.03%)</title><rect x="50.8499%" y="501" width="49.0320%" height="15" fill="rgb(210,199,37)" fg:x="387956527932" fg:w="374087018289"/><text x="51.0999%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>one_brc::main (374,083,341,914 samples, 49.03%)</title><rect x="50.8504%" y="485" width="49.0316%" height="15" fill="rgb(244,192,49)" fg:x="387960204307" fg:w="374083341914"/><text x="51.1004%" y="495.50">one_brc::main</text></g><g><title>one_brc::reader::parse_file (373,625,438,873 samples, 48.97%)</title><rect x="50.9104%" y="469" width="48.9715%" height="15" fill="rgb(226,211,11)" fg:x="388418107348" fg:w="373625438873"/><text x="51.1604%" y="479.50">one_brc::reader::parse_file</text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::new (274,146,744 samples, 0.04%)</title><rect x="99.8460%" y="453" width="0.0359%" height="15" fill="rgb(236,162,54)" fg:x="761769399477" fg:w="274146744"/><text x="100.0960%" y="463.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::with_capacity (274,146,744 samples, 0.04%)</title><rect x="99.8460%" y="437" width="0.0359%" height="15" fill="rgb(220,229,9)" fg:x="761769399477" fg:w="274146744"/><text x="100.0960%" y="447.50"></text></g><g><title>cfree (510,520,992 samples, 0.07%)</title><rect x="99.8820%" y="581" width="0.0669%" height="15" fill="rgb(250,87,22)" fg:x="762043546221" fg:w="510520992"/><text x="100.1320%" y="591.50"></text></g><g><title>[libc.so.6] (510,520,992 samples, 0.07%)</title><rect x="99.8820%" y="565" width="0.0669%" height="15" fill="rgb(239,43,17)" fg:x="762043546221" fg:w="510520992"/><text x="100.1320%" y="575.50"></text></g><g><title>core::str::converts::from_utf8 (119,835,291 samples, 0.02%)</title><rect x="99.9489%" y="501" width="0.0157%" height="15" fill="rgb(231,177,25)" fg:x="762554067213" fg:w="119835291"/><text x="100.1989%" y="511.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (267,004,137 samples, 0.03%)</title><rect x="99.9489%" y="549" width="0.0350%" height="15" fill="rgb(219,179,1)" fg:x="762554067213" fg:w="267004137"/><text x="100.1989%" y="559.50"></text></g><g><title>std::io::BufRead::read_line (267,004,137 samples, 0.03%)</title><rect x="99.9489%" y="533" width="0.0350%" height="15" fill="rgb(238,219,53)" fg:x="762554067213" fg:w="267004137"/><text x="100.1989%" y="543.50"></text></g><g><title>std::io::append_to_string (267,004,137 samples, 0.03%)</title><rect x="99.9489%" y="517" width="0.0350%" height="15" fill="rgb(232,167,36)" fg:x="762554067213" fg:w="267004137"/><text x="100.1989%" y="527.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="501" width="0.0193%" height="15" fill="rgb(244,19,51)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="511.50"></text></g><g><title>std::io::read_until (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="485" width="0.0193%" height="15" fill="rgb(224,6,22)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="469" width="0.0193%" height="15" fill="rgb(224,145,5)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="453" width="0.0193%" height="15" fill="rgb(234,130,49)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="437" width="0.0193%" height="15" fill="rgb(254,6,2)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="421" width="0.0193%" height="15" fill="rgb(208,96,46)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="405" width="0.0193%" height="15" fill="rgb(239,3,39)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="389" width="0.0193%" height="15" fill="rgb(233,210,1)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="373" width="0.0193%" height="15" fill="rgb(244,137,37)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="357" width="0.0193%" height="15" fill="rgb(240,136,2)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="341" width="0.0193%" height="15" fill="rgb(239,18,37)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="351.50"></text></g><g><title>malloc (147,168,846 samples, 0.02%)</title><rect x="99.9646%" y="325" width="0.0193%" height="15" fill="rgb(218,185,22)" fg:x="762673902504" fg:w="147168846"/><text x="100.2146%" y="335.50"></text></g><g><title>one_brc::main (281,578,927 samples, 0.04%)</title><rect x="99.9489%" y="581" width="0.0369%" height="15" fill="rgb(225,218,4)" fg:x="762554067213" fg:w="281578927"/><text x="100.1989%" y="591.50"></text></g><g><title>one_brc::reader::parse_file (281,578,927 samples, 0.04%)</title><rect x="99.9489%" y="565" width="0.0369%" height="15" fill="rgb(230,182,32)" fg:x="762554067213" fg:w="281578927"/><text x="100.1989%" y="575.50"></text></g><g><title>all (762,944,084,793 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="762944084793"/><text x="0.2500%" y="623.50"></text></g><g><title>one_brc (762,944,084,793 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="762944084793"/><text x="0.2500%" y="607.50">one_brc</text></g><g><title>syscall (104,545,238 samples, 0.01%)</title><rect x="99.9863%" y="581" width="0.0137%" height="15" fill="rgb(234,209,42)" fg:x="762839539555" fg:w="104545238"/><text x="100.2363%" y="591.50"></text></g><g><title>[unknown] (104,545,238 samples, 0.01%)</title><rect x="99.9863%" y="565" width="0.0137%" height="15" fill="rgb(227,7,12)" fg:x="762839539555" fg:w="104545238"/><text x="100.2363%" y="575.50"></text></g><g><title>[unknown] (80,164,836 samples, 0.01%)</title><rect x="99.9895%" y="549" width="0.0105%" height="15" fill="rgb(245,203,43)" fg:x="762863919957" fg:w="80164836"/><text x="100.2395%" y="559.50"></text></g></svg></svg>