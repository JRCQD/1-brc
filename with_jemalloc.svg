<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="366837026768"><g><title>[libc.so.6] (58,169,444 samples, 0.02%)</title><rect x="0.0376%" y="581" width="0.0159%" height="15" fill="rgb(227,0,7)" fg:x="137849598" fg:w="58169444"/><text x="0.2876%" y="591.50"></text></g><g><title>[unknown] (58,169,444 samples, 0.02%)</title><rect x="0.0376%" y="565" width="0.0159%" height="15" fill="rgb(217,0,24)" fg:x="137849598" fg:w="58169444"/><text x="0.2876%" y="575.50"></text></g><g><title>[unknown] (173,282,595 samples, 0.05%)</title><rect x="0.0069%" y="613" width="0.0472%" height="15" fill="rgb(221,193,54)" fg:x="25156623" fg:w="173282595"/><text x="0.2569%" y="623.50"></text></g><g><title>[unknown] (60,589,620 samples, 0.02%)</title><rect x="0.0376%" y="597" width="0.0165%" height="15" fill="rgb(248,212,6)" fg:x="137849598" fg:w="60589620"/><text x="0.2876%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1,019,507,259 samples, 0.28%)</title><rect x="5.0701%" y="437" width="0.2779%" height="15" fill="rgb(208,68,35)" fg:x="18599154007" fg:w="1019507259"/><text x="5.3201%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1,019,507,259 samples, 0.28%)</title><rect x="5.0701%" y="421" width="0.2779%" height="15" fill="rgb(232,128,0)" fg:x="18599154007" fg:w="1019507259"/><text x="5.3201%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (5,180,839,515 samples, 1.41%)</title><rect x="5.0701%" y="453" width="1.4123%" height="15" fill="rgb(207,160,47)" fg:x="18599154007" fg:w="5180839515"/><text x="5.3201%" y="463.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (4,161,332,256 samples, 1.13%)</title><rect x="5.3481%" y="437" width="1.1344%" height="15" fill="rgb(228,23,34)" fg:x="19618661266" fg:w="4161332256"/><text x="5.5981%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (4,161,332,256 samples, 1.13%)</title><rect x="5.3481%" y="421" width="1.1344%" height="15" fill="rgb(218,30,26)" fg:x="19618661266" fg:w="4161332256"/><text x="5.5981%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2,361,429,645 samples, 0.64%)</title><rect x="5.8387%" y="405" width="0.6437%" height="15" fill="rgb(220,122,19)" fg:x="21418563877" fg:w="2361429645"/><text x="6.0887%" y="415.50"></text></g><g><title>[libc.so.6] (468,104,152 samples, 0.13%)</title><rect x="6.5922%" y="181" width="0.1276%" height="15" fill="rgb(250,228,42)" fg:x="24182576942" fg:w="468104152"/><text x="6.8422%" y="191.50"></text></g><g><title>cache_bin_finish_flush (508,877,824 samples, 0.14%)</title><rect x="6.5871%" y="197" width="0.1387%" height="15" fill="rgb(240,193,28)" fg:x="24164020811" fg:w="508877824"/><text x="6.8371%" y="207.50"></text></g><g><title>extent_deactivate_locked (58,745,545 samples, 0.02%)</title><rect x="6.9200%" y="133" width="0.0160%" height="15" fill="rgb(216,20,37)" fg:x="25385272587" fg:w="58745545"/><text x="7.1700%" y="143.50"></text></g><g><title>extent_deactivate_locked_impl (58,745,545 samples, 0.02%)</title><rect x="6.9200%" y="117" width="0.0160%" height="15" fill="rgb(206,188,39)" fg:x="25385272587" fg:w="58745545"/><text x="7.1700%" y="127.50"></text></g><g><title>_rjem_je_eset_insert (58,745,545 samples, 0.02%)</title><rect x="6.9200%" y="101" width="0.0160%" height="15" fill="rgb(217,207,13)" fg:x="25385272587" fg:w="58745545"/><text x="7.1700%" y="111.50"></text></g><g><title>_rjem_je_extent_record (65,867,647 samples, 0.02%)</title><rect x="6.9200%" y="149" width="0.0180%" height="15" fill="rgb(231,73,38)" fg:x="25385272587" fg:w="65867647"/><text x="7.1700%" y="159.50"></text></g><g><title>_rjem_je_arena_slab_dalloc (108,610,633 samples, 0.03%)</title><rect x="6.9104%" y="181" width="0.0296%" height="15" fill="rgb(225,20,46)" fg:x="25350000526" fg:w="108610633"/><text x="7.1604%" y="191.50"></text></g><g><title>pac_dalloc_impl (76,474,627 samples, 0.02%)</title><rect x="6.9192%" y="165" width="0.0208%" height="15" fill="rgb(210,31,41)" fg:x="25382136532" fg:w="76474627"/><text x="7.1692%" y="175.50"></text></g><g><title>arena_bin_lower_slab (168,045,142 samples, 0.05%)</title><rect x="7.2257%" y="149" width="0.0458%" height="15" fill="rgb(221,200,47)" fg:x="26506616776" fg:w="168045142"/><text x="7.4757%" y="159.50"></text></g><g><title>edata_snad_comp (107,296,282 samples, 0.03%)</title><rect x="7.2423%" y="133" width="0.0292%" height="15" fill="rgb(226,26,5)" fg:x="26567365636" fg:w="107296282"/><text x="7.4923%" y="143.50"></text></g><g><title>edata_cmp_summary_get (99,814,728 samples, 0.03%)</title><rect x="7.2443%" y="117" width="0.0272%" height="15" fill="rgb(249,33,26)" fg:x="26574847190" fg:w="99814728"/><text x="7.4943%" y="127.50"></text></g><g><title>edata_sn_get (99,814,728 samples, 0.03%)</title><rect x="7.2443%" y="101" width="0.0272%" height="15" fill="rgb(235,183,28)" fg:x="26574847190" fg:w="99814728"/><text x="7.4943%" y="111.50"></text></g><g><title>_rjem_je_arena_dalloc_bin_locked_handle_newly_nonempty (182,975,553 samples, 0.05%)</title><rect x="7.2246%" y="165" width="0.0499%" height="15" fill="rgb(221,5,38)" fg:x="26502556081" fg:w="182975553"/><text x="7.4746%" y="175.50"></text></g><g><title>arena_slab_regind (175,921,272 samples, 0.05%)</title><rect x="7.2848%" y="165" width="0.0480%" height="15" fill="rgb(247,18,42)" fg:x="26723344440" fg:w="175921272"/><text x="7.5348%" y="175.50"></text></g><g><title>div_compute (175,921,272 samples, 0.05%)</title><rect x="7.2848%" y="149" width="0.0480%" height="15" fill="rgb(241,131,45)" fg:x="26723344440" fg:w="175921272"/><text x="7.5348%" y="159.50"></text></g><g><title>bitmap_unset (1,055,117,462 samples, 0.29%)</title><rect x="7.3328%" y="165" width="0.2876%" height="15" fill="rgb(249,31,29)" fg:x="26899265712" fg:w="1055117462"/><text x="7.5828%" y="175.50"></text></g><g><title>edata_nfree_get (240,618,494 samples, 0.07%)</title><rect x="7.6204%" y="165" width="0.0656%" height="15" fill="rgb(225,111,53)" fg:x="27954383174" fg:w="240618494"/><text x="7.8704%" y="175.50"></text></g><g><title>arena_dalloc_bin_locked_step (6,273,607,963 samples, 1.71%)</title><rect x="6.9400%" y="181" width="1.7102%" height="15" fill="rgb(238,160,17)" fg:x="25458611159" fg:w="6273607963"/><text x="7.1900%" y="191.50"></text></g><g><title>edata_nfree_inc (3,537,217,454 samples, 0.96%)</title><rect x="7.6860%" y="165" width="0.9642%" height="15" fill="rgb(214,148,48)" fg:x="28195001668" fg:w="3537217454"/><text x="7.9360%" y="175.50"></text></g><g><title>_rjem_je_pac_maybe_decay_purge (82,375,119 samples, 0.02%)</title><rect x="8.6531%" y="117" width="0.0225%" height="15" fill="rgb(232,36,49)" fg:x="31742851272" fg:w="82375119"/><text x="8.9031%" y="127.50"></text></g><g><title>_rjem_je_pac_maybe_decay_purge (74,442,694 samples, 0.02%)</title><rect x="8.6553%" y="101" width="0.0203%" height="15" fill="rgb(209,103,24)" fg:x="31750783697" fg:w="74442694"/><text x="8.9053%" y="111.50"></text></g><g><title>_rjem_je_nstime_init_update (70,814,289 samples, 0.02%)</title><rect x="8.6563%" y="85" width="0.0193%" height="15" fill="rgb(229,88,8)" fg:x="31754412102" fg:w="70814289"/><text x="8.9063%" y="95.50"></text></g><g><title>nstime_update_impl (70,814,289 samples, 0.02%)</title><rect x="8.6563%" y="69" width="0.0193%" height="15" fill="rgb(213,181,19)" fg:x="31754412102" fg:w="70814289"/><text x="8.9063%" y="79.50"></text></g><g><title>nstime_get (70,814,289 samples, 0.02%)</title><rect x="8.6563%" y="53" width="0.0193%" height="15" fill="rgb(254,191,54)" fg:x="31754412102" fg:w="70814289"/><text x="8.9063%" y="63.50"></text></g><g><title>clock_gettime (59,857,329 samples, 0.02%)</title><rect x="8.6593%" y="37" width="0.0163%" height="15" fill="rgb(241,83,37)" fg:x="31765369062" fg:w="59857329"/><text x="8.9093%" y="47.50"></text></g><g><title>arena_decay_dirty (129,999,393 samples, 0.04%)</title><rect x="8.6522%" y="149" width="0.0354%" height="15" fill="rgb(233,36,39)" fg:x="31739373973" fg:w="129999393"/><text x="8.9022%" y="159.50"></text></g><g><title>arena_decay_impl (129,999,393 samples, 0.04%)</title><rect x="8.6522%" y="133" width="0.0354%" height="15" fill="rgb(226,3,54)" fg:x="31739373973" fg:w="129999393"/><text x="8.9022%" y="143.50"></text></g><g><title>_rjem_je_arena_decay (151,808,129 samples, 0.04%)</title><rect x="8.6522%" y="165" width="0.0414%" height="15" fill="rgb(245,192,40)" fg:x="31739373973" fg:w="151808129"/><text x="8.9022%" y="175.50"></text></g><g><title>arena_decay_ticks (188,159,007 samples, 0.05%)</title><rect x="8.6502%" y="181" width="0.0513%" height="15" fill="rgb(238,167,29)" fg:x="31732219122" fg:w="188159007"/><text x="8.9002%" y="191.50"></text></g><g><title>arena_get (161,985,288 samples, 0.04%)</title><rect x="8.7015%" y="181" width="0.0442%" height="15" fill="rgb(232,182,51)" fg:x="31920378129" fg:w="161985288"/><text x="8.9515%" y="191.50"></text></g><g><title>atomic_load_p (161,985,288 samples, 0.04%)</title><rect x="8.7015%" y="165" width="0.0442%" height="15" fill="rgb(231,60,39)" fg:x="31920378129" fg:w="161985288"/><text x="8.9515%" y="175.50"></text></g><g><title>pthread_mutex_trylock (50,428,164 samples, 0.01%)</title><rect x="8.8012%" y="117" width="0.0137%" height="15" fill="rgb(208,69,12)" fg:x="32286209542" fg:w="50428164"/><text x="9.0512%" y="127.50"></text></g><g><title>malloc_mutex_lock (202,482,421 samples, 0.06%)</title><rect x="8.7607%" y="165" width="0.0552%" height="15" fill="rgb(235,93,37)" fg:x="32137663542" fg:w="202482421"/><text x="9.0107%" y="175.50"></text></g><g><title>_rjem_je_malloc_mutex_lock_slow (202,482,421 samples, 0.06%)</title><rect x="8.7607%" y="149" width="0.0552%" height="15" fill="rgb(213,116,39)" fg:x="32137663542" fg:w="202482421"/><text x="9.0107%" y="159.50"></text></g><g><title>malloc_mutex_trylock_final (53,936,421 samples, 0.01%)</title><rect x="8.8012%" y="133" width="0.0147%" height="15" fill="rgb(222,207,29)" fg:x="32286209542" fg:w="53936421"/><text x="9.0512%" y="143.50"></text></g><g><title>malloc_mutex_lock (1,614,557,678 samples, 0.44%)</title><rect x="8.7575%" y="181" width="0.4401%" height="15" fill="rgb(206,96,30)" fg:x="32125829572" fg:w="1614557678"/><text x="9.0075%" y="191.50"></text></g><g><title>malloc_mutex_trylock_final (1,400,241,287 samples, 0.38%)</title><rect x="8.8159%" y="165" width="0.3817%" height="15" fill="rgb(218,138,4)" fg:x="32340145963" fg:w="1400241287"/><text x="9.0659%" y="175.50"></text></g><g><title>pthread_mutex_trylock (1,377,117,152 samples, 0.38%)</title><rect x="8.8222%" y="149" width="0.3754%" height="15" fill="rgb(250,191,14)" fg:x="32363270098" fg:w="1377117152"/><text x="9.0722%" y="159.50"></text></g><g><title>[libc.so.6] (229,436,279 samples, 0.06%)</title><rect x="9.2083%" y="165" width="0.0625%" height="15" fill="rgb(239,60,40)" fg:x="33779386106" fg:w="229436279"/><text x="9.4583%" y="175.50"></text></g><g><title>pthread_mutex_unlock (90,518,737 samples, 0.02%)</title><rect x="9.2708%" y="165" width="0.0247%" height="15" fill="rgb(206,27,48)" fg:x="34008822385" fg:w="90518737"/><text x="9.5208%" y="175.50"></text></g><g><title>malloc_mutex_unlock (366,150,408 samples, 0.10%)</title><rect x="9.1977%" y="181" width="0.0998%" height="15" fill="rgb(225,35,8)" fg:x="33740387250" fg:w="366150408"/><text x="9.4477%" y="191.50"></text></g><g><title>rtree_cache_direct_map (392,521,181 samples, 0.11%)</title><rect x="10.1645%" y="133" width="0.1070%" height="15" fill="rgb(250,213,24)" fg:x="37287035099" fg:w="392521181"/><text x="10.4145%" y="143.50"></text></g><g><title>rtree_leaf_elm_lookup (2,970,708,773 samples, 0.81%)</title><rect x="9.5547%" y="149" width="0.8098%" height="15" fill="rgb(247,123,22)" fg:x="35050300682" fg:w="2970708773"/><text x="9.8047%" y="159.50"></text></g><g><title>rtree_leafkey (341,453,175 samples, 0.09%)</title><rect x="10.2715%" y="133" width="0.0931%" height="15" fill="rgb(231,138,38)" fg:x="37679556280" fg:w="341453175"/><text x="10.5215%" y="143.50"></text></g><g><title>rtree_leaf_elm_bits_decode (388,029,524 samples, 0.11%)</title><rect x="10.3646%" y="133" width="0.1058%" height="15" fill="rgb(231,145,46)" fg:x="38021009455" fg:w="388029524"/><text x="10.6146%" y="143.50"></text></g><g><title>rtree_leaf_elm_read (503,303,126 samples, 0.14%)</title><rect x="10.3646%" y="149" width="0.1372%" height="15" fill="rgb(251,118,11)" fg:x="38021009455" fg:w="503303126"/><text x="10.6146%" y="159.50"></text></g><g><title>rtree_leaf_elm_bits_read (115,273,602 samples, 0.03%)</title><rect x="10.4703%" y="133" width="0.0314%" height="15" fill="rgb(217,147,25)" fg:x="38409038979" fg:w="115273602"/><text x="10.7203%" y="143.50"></text></g><g><title>atomic_load_p (115,273,602 samples, 0.03%)</title><rect x="10.4703%" y="117" width="0.0314%" height="15" fill="rgb(247,81,37)" fg:x="38409038979" fg:w="115273602"/><text x="10.7203%" y="127.50"></text></g><g><title>tcache_bin_flush_metadata_visitor (1,760,810,482 samples, 0.48%)</title><rect x="10.5018%" y="149" width="0.4800%" height="15" fill="rgb(209,12,38)" fg:x="38524312581" fg:w="1760810482"/><text x="10.7518%" y="159.50"></text></g><g><title>util_prefetch_write_range (1,760,810,482 samples, 0.48%)</title><rect x="10.5018%" y="133" width="0.4800%" height="15" fill="rgb(227,1,9)" fg:x="38524312581" fg:w="1760810482"/><text x="10.7518%" y="143.50"></text></g><g><title>util_prefetch_write (1,760,810,482 samples, 0.48%)</title><rect x="10.5018%" y="117" width="0.4800%" height="15" fill="rgb(248,47,43)" fg:x="38524312581" fg:w="1760810482"/><text x="10.7518%" y="127.50"></text></g><g><title>tcache_bin_flush_edatas_lookup (6,379,928,267 samples, 1.74%)</title><rect x="9.2975%" y="181" width="1.7392%" height="15" fill="rgb(221,10,30)" fg:x="34106537658" fg:w="6379928267"/><text x="9.5475%" y="191.50"></text></g><g><title>emap_edata_lookup_batch (6,340,337,508 samples, 1.73%)</title><rect x="9.3083%" y="165" width="1.7284%" height="15" fill="rgb(210,229,1)" fg:x="34146128417" fg:w="6340337508"/><text x="9.5583%" y="175.50"></text></g><g><title>tcache_bin_flush_ptr_getter (201,342,862 samples, 0.05%)</title><rect x="10.9817%" y="149" width="0.0549%" height="15" fill="rgb(222,148,37)" fg:x="40285123063" fg:w="201342862"/><text x="11.2317%" y="159.50"></text></g><g><title>edata_arena_ind_get (821,072,941 samples, 0.22%)</title><rect x="11.2617%" y="165" width="0.2238%" height="15" fill="rgb(234,67,33)" fg:x="41311949327" fg:w="821072941"/><text x="11.5117%" y="175.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (18,055,050,575 samples, 4.92%)</title><rect x="6.5692%" y="229" width="4.9218%" height="15" fill="rgb(247,98,35)" fg:x="24098116824" fg:w="18055050575"/><text x="6.8192%" y="239.50">_rjem_..</text></g><g><title>tcache_bin_flush_bottom (18,014,911,182 samples, 4.91%)</title><rect x="6.5801%" y="213" width="4.9109%" height="15" fill="rgb(247,138,52)" fg:x="24138256217" fg:w="18014911182"/><text x="6.8301%" y="223.50">tcache..</text></g><g><title>tcache_bin_flush_impl (17,439,904,562 samples, 4.75%)</title><rect x="6.7369%" y="197" width="4.7541%" height="15" fill="rgb(213,79,30)" fg:x="24713262837" fg:w="17439904562"/><text x="6.9869%" y="207.50">tcache..</text></g><g><title>tcache_bin_flush_match (1,666,701,474 samples, 0.45%)</title><rect x="11.0366%" y="181" width="0.4543%" height="15" fill="rgb(246,177,23)" fg:x="40486465925" fg:w="1666701474"/><text x="11.2866%" y="191.50"></text></g><g><title>cache_bin_dalloc_easy (142,310,843 samples, 0.04%)</title><rect x="11.4910%" y="229" width="0.0388%" height="15" fill="rgb(230,62,27)" fg:x="42153167399" fg:w="142310843"/><text x="11.7410%" y="239.50"></text></g><g><title>isdalloct (18,368,164,507 samples, 5.01%)</title><rect x="6.5257%" y="277" width="5.0072%" height="15" fill="rgb(216,154,8)" fg:x="23938500550" fg:w="18368164507"/><text x="6.7757%" y="287.50">isdall..</text></g><g><title>arena_sdalloc (18,368,164,507 samples, 5.01%)</title><rect x="6.5257%" y="261" width="5.0072%" height="15" fill="rgb(244,35,45)" fg:x="23938500550" fg:w="18368164507"/><text x="6.7757%" y="271.50">arena_..</text></g><g><title>tcache_dalloc_small (18,315,499,510 samples, 4.99%)</title><rect x="6.5400%" y="245" width="4.9928%" height="15" fill="rgb(251,115,12)" fg:x="23991165547" fg:w="18315499510"/><text x="6.7900%" y="255.50">tcache..</text></g><g><title>_rjem_je_tcache_gc_dalloc_event_handler (45,641,458 samples, 0.01%)</title><rect x="11.5458%" y="245" width="0.0124%" height="15" fill="rgb(240,54,50)" fg:x="42354351099" fg:w="45641458"/><text x="11.7958%" y="255.50"></text></g><g><title>tsd_thread_deallocated_last_eventp_get (37,225,953 samples, 0.01%)</title><rect x="11.5661%" y="229" width="0.0101%" height="15" fill="rgb(233,84,52)" fg:x="42428701791" fg:w="37225953"/><text x="11.8161%" y="239.50"></text></g><g><title>tsd_thread_deallocated_last_eventp_get_unsafe (37,225,953 samples, 0.01%)</title><rect x="11.5661%" y="213" width="0.0101%" height="15" fill="rgb(207,117,47)" fg:x="42428701791" fg:w="37225953"/><text x="11.8161%" y="223.50"></text></g><g><title>isfree (18,531,504,458 samples, 5.05%)</title><rect x="6.5257%" y="293" width="5.0517%" height="15" fill="rgb(249,43,39)" fg:x="23938500550" fg:w="18531504458"/><text x="6.7757%" y="303.50">isfree</text></g><g><title>thread_dalloc_event (141,796,468 samples, 0.04%)</title><rect x="11.5387%" y="277" width="0.0387%" height="15" fill="rgb(209,38,44)" fg:x="42328208540" fg:w="141796468"/><text x="11.7887%" y="287.50"></text></g><g><title>te_event_advance (141,796,468 samples, 0.04%)</title><rect x="11.5387%" y="261" width="0.0387%" height="15" fill="rgb(236,212,23)" fg:x="42328208540" fg:w="141796468"/><text x="11.7887%" y="271.50"></text></g><g><title>te_ctx_get (41,303,217 samples, 0.01%)</title><rect x="11.5661%" y="245" width="0.0113%" height="15" fill="rgb(242,79,21)" fg:x="42428701791" fg:w="41303217"/><text x="11.8161%" y="255.50"></text></g><g><title>_rjem_je_sdallocx_default (18,640,962,380 samples, 5.08%)</title><rect x="6.5128%" y="309" width="5.0815%" height="15" fill="rgb(211,96,35)" fg:x="23891436099" fg:w="18640962380"/><text x="6.7628%" y="319.50">_rjem_..</text></g><g><title>tsd_fetch_min (38,196,133 samples, 0.01%)</title><rect x="11.5839%" y="293" width="0.0104%" height="15" fill="rgb(253,215,40)" fg:x="42494202346" fg:w="38196133"/><text x="11.8339%" y="303.50"></text></g><g><title>tsd_fetch_impl (38,196,133 samples, 0.01%)</title><rect x="11.5839%" y="277" width="0.0104%" height="15" fill="rgb(211,81,21)" fg:x="42494202346" fg:w="38196133"/><text x="11.8339%" y="287.50"></text></g><g><title>cache_bin_dalloc_easy (1,122,910,682 samples, 0.31%)</title><rect x="12.1997%" y="277" width="0.3061%" height="15" fill="rgb(208,190,38)" fg:x="44753026918" fg:w="1122910682"/><text x="12.4497%" y="287.50"></text></g><g><title>cache_bin_full (1,010,478,428 samples, 0.28%)</title><rect x="12.2304%" y="261" width="0.2755%" height="15" fill="rgb(235,213,38)" fg:x="44865459172" fg:w="1010478428"/><text x="12.4804%" y="271.50"></text></g><g><title>sz_size2index_lookup (1,031,436,558 samples, 0.28%)</title><rect x="12.5087%" y="277" width="0.2812%" height="15" fill="rgb(237,122,38)" fg:x="45886723860" fg:w="1031436558"/><text x="12.7587%" y="287.50"></text></g><g><title>sz_size2index_lookup_impl (1,031,436,558 samples, 0.28%)</title><rect x="12.5087%" y="261" width="0.2812%" height="15" fill="rgb(244,218,35)" fg:x="45886723860" fg:w="1031436558"/><text x="12.7587%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="453" width="6.3094%" height="15" fill="rgb(240,68,47)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="463.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="437" width="6.3094%" height="15" fill="rgb(210,16,53)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="447.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="421" width="6.3094%" height="15" fill="rgb(235,124,12)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="431.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="405" width="6.3094%" height="15" fill="rgb(224,169,11)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="415.50">&lt;alloc::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="389" width="6.3094%" height="15" fill="rgb(250,166,2)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="399.50">alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="373" width="6.3094%" height="15" fill="rgb(242,216,29)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="383.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="357" width="6.3094%" height="15" fill="rgb(230,116,27)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="367.50">alloc::a..</text></g><g><title>__rust_dealloc (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="341" width="6.3094%" height="15" fill="rgb(228,99,48)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="351.50">__rust_d..</text></g><g><title>&lt;tikv_jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23,145,228,880 samples, 6.31%)</title><rect x="6.4834%" y="325" width="6.3094%" height="15" fill="rgb(253,11,6)" fg:x="23783647892" fg:w="23145228880"/><text x="6.7334%" y="335.50">&lt;tikv_je..</text></g><g><title>_rjem_sdallocx (4,396,478,293 samples, 1.20%)</title><rect x="11.5944%" y="309" width="1.1985%" height="15" fill="rgb(247,143,39)" fg:x="42532398479" fg:w="4396478293"/><text x="11.8444%" y="319.50"></text></g><g><title>free_fastpath (3,461,022,119 samples, 0.94%)</title><rect x="11.8494%" y="293" width="0.9435%" height="15" fill="rgb(236,97,10)" fg:x="43467854653" fg:w="3461022119"/><text x="12.0994%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (51,003,807 samples, 0.01%)</title><rect x="13.3518%" y="437" width="0.0139%" height="15" fill="rgb(233,208,19)" fg:x="48979415936" fg:w="51003807"/><text x="13.6018%" y="447.50"></text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (151,768,129 samples, 0.04%)</title><rect x="13.6437%" y="421" width="0.0414%" height="15" fill="rgb(216,164,2)" fg:x="50050075161" fg:w="151768129"/><text x="13.8937%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (41,303,473 samples, 0.01%)</title><rect x="13.6851%" y="421" width="0.0113%" height="15" fill="rgb(220,129,5)" fg:x="50201843290" fg:w="41303473"/><text x="13.9351%" y="431.50"></text></g><g><title>std::thread::Thread::park (84,382,558 samples, 0.02%)</title><rect x="13.6963%" y="309" width="0.0230%" height="15" fill="rgb(242,17,10)" fg:x="50243146775" fg:w="84382558"/><text x="13.9463%" y="319.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (84,382,558 samples, 0.02%)</title><rect x="13.6963%" y="293" width="0.0230%" height="15" fill="rgb(242,107,0)" fg:x="50243146775" fg:w="84382558"/><text x="13.9463%" y="303.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (84,382,558 samples, 0.02%)</title><rect x="13.6963%" y="277" width="0.0230%" height="15" fill="rgb(251,28,31)" fg:x="50243146775" fg:w="84382558"/><text x="13.9463%" y="287.50"></text></g><g><title>syscall (80,817,902 samples, 0.02%)</title><rect x="13.6973%" y="261" width="0.0220%" height="15" fill="rgb(233,223,10)" fg:x="50246711431" fg:w="80817902"/><text x="13.9473%" y="271.50"></text></g><g><title>[unknown] (80,817,902 samples, 0.02%)</title><rect x="13.6973%" y="245" width="0.0220%" height="15" fill="rgb(215,21,27)" fg:x="50246711431" fg:w="80817902"/><text x="13.9473%" y="255.50"></text></g><g><title>[unknown] (80,817,902 samples, 0.02%)</title><rect x="13.6973%" y="229" width="0.0220%" height="15" fill="rgb(232,23,21)" fg:x="50246711431" fg:w="80817902"/><text x="13.9473%" y="239.50"></text></g><g><title>[unknown] (80,817,902 samples, 0.02%)</title><rect x="13.6973%" y="213" width="0.0220%" height="15" fill="rgb(244,5,23)" fg:x="50246711431" fg:w="80817902"/><text x="13.9473%" y="223.50"></text></g><g><title>[unknown] (80,817,902 samples, 0.02%)</title><rect x="13.6973%" y="197" width="0.0220%" height="15" fill="rgb(226,81,46)" fg:x="50246711431" fg:w="80817902"/><text x="13.9473%" y="207.50"></text></g><g><title>[unknown] (80,817,902 samples, 0.02%)</title><rect x="13.6973%" y="181" width="0.0220%" height="15" fill="rgb(247,70,30)" fg:x="50246711431" fg:w="80817902"/><text x="13.9473%" y="191.50"></text></g><g><title>[unknown] (80,817,902 samples, 0.02%)</title><rect x="13.6973%" y="165" width="0.0220%" height="15" fill="rgb(212,68,19)" fg:x="50246711431" fg:w="80817902"/><text x="13.9473%" y="175.50"></text></g><g><title>[unknown] (70,450,988 samples, 0.02%)</title><rect x="13.7001%" y="149" width="0.0192%" height="15" fill="rgb(240,187,13)" fg:x="50257078345" fg:w="70450988"/><text x="13.9501%" y="159.50"></text></g><g><title>[unknown] (56,002,562 samples, 0.02%)</title><rect x="13.7040%" y="133" width="0.0153%" height="15" fill="rgb(223,113,26)" fg:x="50271526771" fg:w="56002562"/><text x="13.9540%" y="143.50"></text></g><g><title>[unknown] (37,846,675 samples, 0.01%)</title><rect x="13.7090%" y="117" width="0.0103%" height="15" fill="rgb(206,192,2)" fg:x="50289682658" fg:w="37846675"/><text x="13.9590%" y="127.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (87,876,305 samples, 0.02%)</title><rect x="13.6963%" y="341" width="0.0240%" height="15" fill="rgb(241,108,4)" fg:x="50243146773" fg:w="87876305"/><text x="13.9463%" y="351.50"></text></g><g><title>std::thread::park (87,876,304 samples, 0.02%)</title><rect x="13.6963%" y="325" width="0.0240%" height="15" fill="rgb(247,173,49)" fg:x="50243146774" fg:w="87876304"/><text x="13.9463%" y="335.50"></text></g><g><title>crossbeam_channel::context::Context::with (90,746,416 samples, 0.02%)</title><rect x="13.6963%" y="421" width="0.0247%" height="15" fill="rgb(224,114,35)" fg:x="50243146763" fg:w="90746416"/><text x="13.9463%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (90,746,416 samples, 0.02%)</title><rect x="13.6963%" y="405" width="0.0247%" height="15" fill="rgb(245,159,27)" fg:x="50243146763" fg:w="90746416"/><text x="13.9463%" y="415.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (90,746,416 samples, 0.02%)</title><rect x="13.6963%" y="389" width="0.0247%" height="15" fill="rgb(245,172,44)" fg:x="50243146763" fg:w="90746416"/><text x="13.9463%" y="399.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (90,746,406 samples, 0.02%)</title><rect x="13.6963%" y="373" width="0.0247%" height="15" fill="rgb(236,23,11)" fg:x="50243146773" fg:w="90746406"/><text x="13.9463%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::_{{closure}} (90,746,406 samples, 0.02%)</title><rect x="13.6963%" y="357" width="0.0247%" height="15" fill="rgb(205,117,38)" fg:x="50243146773" fg:w="90746406"/><text x="13.9463%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (3,342,672,492 samples, 0.91%)</title><rect x="13.7211%" y="421" width="0.9112%" height="15" fill="rgb(237,72,25)" fg:x="50333893179" fg:w="3342672492"/><text x="13.9711%" y="431.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (3,275,410,954 samples, 0.89%)</title><rect x="13.7394%" y="405" width="0.8929%" height="15" fill="rgb(244,70,9)" fg:x="50401154717" fg:w="3275410954"/><text x="13.9894%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2,143,381,151 samples, 0.58%)</title><rect x="14.0480%" y="389" width="0.5843%" height="15" fill="rgb(217,125,39)" fg:x="51533184520" fg:w="2143381151"/><text x="14.2980%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (2,143,381,151 samples, 0.58%)</title><rect x="14.0480%" y="373" width="0.5843%" height="15" fill="rgb(235,36,10)" fg:x="51533184520" fg:w="2143381151"/><text x="14.2980%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (51,146,463 samples, 0.01%)</title><rect x="25.6667%" y="405" width="0.0139%" height="15" fill="rgb(251,123,47)" fg:x="94154925839" fg:w="51146463"/><text x="25.9167%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (51,146,463 samples, 0.01%)</title><rect x="25.6667%" y="389" width="0.0139%" height="15" fill="rgb(221,13,13)" fg:x="94154925839" fg:w="51146463"/><text x="25.9167%" y="399.50"></text></g><g><title>core::slice::index::get_noubcheck (51,146,463 samples, 0.01%)</title><rect x="25.6667%" y="373" width="0.0139%" height="15" fill="rgb(238,131,9)" fg:x="94154925839" fg:w="51146463"/><text x="25.9167%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,585,517,317 samples, 0.43%)</title><rect x="25.6806%" y="405" width="0.4322%" height="15" fill="rgb(211,50,8)" fg:x="94206072302" fg:w="1585517317"/><text x="25.9306%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1,585,517,317 samples, 0.43%)</title><rect x="25.6806%" y="389" width="0.4322%" height="15" fill="rgb(245,182,24)" fg:x="94206072302" fg:w="1585517317"/><text x="25.9306%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_recv (42,391,177,677 samples, 11.56%)</title><rect x="14.6323%" y="421" width="11.5559%" height="15" fill="rgb(242,14,37)" fg:x="53676565671" fg:w="42391177677"/><text x="14.8823%" y="431.50">crossbeam_channel..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (276,153,729 samples, 0.08%)</title><rect x="26.1128%" y="405" width="0.0753%" height="15" fill="rgb(246,228,12)" fg:x="95791589619" fg:w="276153729"/><text x="26.3628%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (257,131,930 samples, 0.07%)</title><rect x="26.1180%" y="389" width="0.0701%" height="15" fill="rgb(213,55,15)" fg:x="95810611418" fg:w="257131930"/><text x="26.3680%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (257,131,930 samples, 0.07%)</title><rect x="26.1180%" y="373" width="0.0701%" height="15" fill="rgb(209,9,3)" fg:x="95810611418" fg:w="257131930"/><text x="26.3680%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (246,400,556 samples, 0.07%)</title><rect x="26.1210%" y="357" width="0.0672%" height="15" fill="rgb(230,59,30)" fg:x="95821342792" fg:w="246400556"/><text x="26.3710%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,276,368,019 samples, 2.26%)</title><rect x="26.1881%" y="405" width="2.2561%" height="15" fill="rgb(209,121,21)" fg:x="96067743348" fg:w="8276368019"/><text x="26.4381%" y="415.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,276,368,019 samples, 2.26%)</title><rect x="26.1881%" y="389" width="2.2561%" height="15" fill="rgb(220,109,13)" fg:x="96067743348" fg:w="8276368019"/><text x="26.4381%" y="399.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (7,780,766,249 samples, 2.12%)</title><rect x="26.3232%" y="373" width="2.1210%" height="15" fill="rgb(232,18,1)" fg:x="96563345118" fg:w="7780766249"/><text x="26.5732%" y="383.50">c..</text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (57,723,861,759 samples, 15.74%)</title><rect x="12.7928%" y="453" width="15.7356%" height="15" fill="rgb(215,41,42)" fg:x="46928876772" fg:w="57723861759"/><text x="13.0428%" y="463.50">crossbeam_channel::chann..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (55,622,318,788 samples, 15.16%)</title><rect x="13.3657%" y="437" width="15.1627%" height="15" fill="rgb(224,123,36)" fg:x="49030419743" fg:w="55622318788"/><text x="13.6157%" y="447.50">crossbeam_channel::flav..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (8,584,995,183 samples, 2.34%)</title><rect x="26.1881%" y="421" width="2.3403%" height="15" fill="rgb(240,125,3)" fg:x="96067743348" fg:w="8584995183"/><text x="26.4381%" y="431.50">c..</text></g><g><title>std::thread::yield_now (308,627,164 samples, 0.08%)</title><rect x="28.4443%" y="405" width="0.0841%" height="15" fill="rgb(205,98,50)" fg:x="104344111367" fg:w="308627164"/><text x="28.6943%" y="415.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (308,627,164 samples, 0.08%)</title><rect x="28.4443%" y="389" width="0.0841%" height="15" fill="rgb(205,185,37)" fg:x="104344111367" fg:w="308627164"/><text x="28.6943%" y="399.50"></text></g><g><title>__sched_yield (308,627,164 samples, 0.08%)</title><rect x="28.4443%" y="373" width="0.0841%" height="15" fill="rgb(238,207,15)" fg:x="104344111367" fg:w="308627164"/><text x="28.6943%" y="383.50"></text></g><g><title>[unknown] (300,768,094 samples, 0.08%)</title><rect x="28.4464%" y="357" width="0.0820%" height="15" fill="rgb(213,199,42)" fg:x="104351970437" fg:w="300768094"/><text x="28.6964%" y="367.50"></text></g><g><title>[unknown] (290,384,297 samples, 0.08%)</title><rect x="28.4492%" y="341" width="0.0792%" height="15" fill="rgb(235,201,11)" fg:x="104362354234" fg:w="290384297"/><text x="28.6992%" y="351.50"></text></g><g><title>[unknown] (266,859,101 samples, 0.07%)</title><rect x="28.4557%" y="325" width="0.0727%" height="15" fill="rgb(207,46,11)" fg:x="104385879430" fg:w="266859101"/><text x="28.7057%" y="335.50"></text></g><g><title>[unknown] (244,740,086 samples, 0.07%)</title><rect x="28.4617%" y="309" width="0.0667%" height="15" fill="rgb(241,35,35)" fg:x="104407998445" fg:w="244740086"/><text x="28.7117%" y="319.50"></text></g><g><title>[unknown] (211,023,936 samples, 0.06%)</title><rect x="28.4709%" y="293" width="0.0575%" height="15" fill="rgb(243,32,47)" fg:x="104441714595" fg:w="211023936"/><text x="28.7209%" y="303.50"></text></g><g><title>[unknown] (180,916,289 samples, 0.05%)</title><rect x="28.4791%" y="277" width="0.0493%" height="15" fill="rgb(247,202,23)" fg:x="104471822242" fg:w="180916289"/><text x="28.7291%" y="287.50"></text></g><g><title>[unknown] (121,304,565 samples, 0.03%)</title><rect x="28.4953%" y="261" width="0.0331%" height="15" fill="rgb(219,102,11)" fg:x="104531433966" fg:w="121304565"/><text x="28.7453%" y="271.50"></text></g><g><title>[unknown] (104,876,292 samples, 0.03%)</title><rect x="28.4998%" y="245" width="0.0286%" height="15" fill="rgb(243,110,44)" fg:x="104547862239" fg:w="104876292"/><text x="28.7498%" y="255.50"></text></g><g><title>[unknown] (66,128,583 samples, 0.02%)</title><rect x="28.5104%" y="229" width="0.0180%" height="15" fill="rgb(222,74,54)" fg:x="104586609948" fg:w="66128583"/><text x="28.7604%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (14,962,464,251 samples, 4.08%)</title><rect x="28.5284%" y="437" width="4.0788%" height="15" fill="rgb(216,99,12)" fg:x="104652738531" fg:w="14962464251"/><text x="28.7784%" y="447.50">core..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (14,962,464,251 samples, 4.08%)</title><rect x="28.5284%" y="421" width="4.0788%" height="15" fill="rgb(226,22,26)" fg:x="104652738531" fg:w="14962464251"/><text x="28.7784%" y="431.50">&lt;usi..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,678,531,211 samples, 1.28%)</title><rect x="34.5174%" y="325" width="1.2754%" height="15" fill="rgb(217,163,10)" fg:x="126622563814" fg:w="4678531211"/><text x="34.7674%" y="335.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (1,288,729,403 samples, 0.35%)</title><rect x="35.7928%" y="309" width="0.3513%" height="15" fill="rgb(213,25,53)" fg:x="131301095025" fg:w="1288729403"/><text x="36.0428%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,780,272,576 samples, 1.03%)</title><rect x="36.1441%" y="309" width="1.0305%" height="15" fill="rgb(252,105,26)" fg:x="132589824428" fg:w="3780272576"/><text x="36.3941%" y="319.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (6,791,065,135 samples, 1.85%)</title><rect x="35.7928%" y="325" width="1.8512%" height="15" fill="rgb(220,39,43)" fg:x="131301095025" fg:w="6791065135"/><text x="36.0428%" y="335.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1,722,063,156 samples, 0.47%)</title><rect x="37.1746%" y="309" width="0.4694%" height="15" fill="rgb(229,68,48)" fg:x="136370097004" fg:w="1722063156"/><text x="37.4246%" y="319.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (14,897,653,880 samples, 4.06%)</title><rect x="33.6455%" y="373" width="4.0611%" height="15" fill="rgb(252,8,32)" fg:x="123424165103" fg:w="14897653880"/><text x="33.8955%" y="383.50">&lt;fxh..</text></g><g><title>fxhash::write (14,897,653,880 samples, 4.06%)</title><rect x="33.6455%" y="357" width="4.0611%" height="15" fill="rgb(223,20,43)" fg:x="123424165103" fg:w="14897653880"/><text x="33.8955%" y="367.50">fxha..</text></g><g><title>fxhash::write64 (14,897,653,880 samples, 4.06%)</title><rect x="33.6455%" y="341" width="4.0611%" height="15" fill="rgb(229,81,49)" fg:x="123424165103" fg:w="14897653880"/><text x="33.8955%" y="351.50">fxha..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (229,658,823 samples, 0.06%)</title><rect x="37.6440%" y="325" width="0.0626%" height="15" fill="rgb(236,28,36)" fg:x="138092160160" fg:w="229658823"/><text x="37.8940%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (229,658,823 samples, 0.06%)</title><rect x="37.6440%" y="309" width="0.0626%" height="15" fill="rgb(249,185,26)" fg:x="138092160160" fg:w="229658823"/><text x="37.8940%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (229,658,823 samples, 0.06%)</title><rect x="37.6440%" y="293" width="0.0626%" height="15" fill="rgb(249,174,33)" fg:x="138092160160" fg:w="229658823"/><text x="37.8940%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (229,658,823 samples, 0.06%)</title><rect x="37.6440%" y="277" width="0.0626%" height="15" fill="rgb(233,201,37)" fg:x="138092160160" fg:w="229658823"/><text x="37.8940%" y="287.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (676,392,135 samples, 0.18%)</title><rect x="37.7066%" y="341" width="0.1844%" height="15" fill="rgb(221,78,26)" fg:x="138321818983" fg:w="676392135"/><text x="37.9566%" y="351.50"></text></g><g><title>one_brc::container::Container::get_mut (34,709,777,008 samples, 9.46%)</title><rect x="28.5284%" y="453" width="9.4619%" height="15" fill="rgb(250,127,30)" fg:x="104652738531" fg:w="34709777008"/><text x="28.7784%" y="463.50">one_brc::conta..</text></g><g><title>one_brc::container::Container::compute_index (19,747,312,757 samples, 5.38%)</title><rect x="32.6072%" y="437" width="5.3831%" height="15" fill="rgb(230,49,44)" fg:x="119615202782" fg:w="19747312757"/><text x="32.8572%" y="447.50">one_brc..</text></g><g><title>fxhash::hash (15,938,350,436 samples, 4.34%)</title><rect x="33.6455%" y="421" width="4.3448%" height="15" fill="rgb(229,67,23)" fg:x="123424165103" fg:w="15938350436"/><text x="33.8955%" y="431.50">fxhas..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (15,938,350,436 samples, 4.34%)</title><rect x="33.6455%" y="405" width="4.3448%" height="15" fill="rgb(249,83,47)" fg:x="123424165103" fg:w="15938350436"/><text x="33.8955%" y="415.50">core:..</text></g><g><title>core::hash::Hasher::write_str (15,938,350,436 samples, 4.34%)</title><rect x="33.6455%" y="389" width="4.3448%" height="15" fill="rgb(215,43,3)" fg:x="123424165103" fg:w="15938350436"/><text x="33.8955%" y="399.50">core:..</text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (1,040,696,556 samples, 0.28%)</title><rect x="37.7066%" y="373" width="0.2837%" height="15" fill="rgb(238,154,13)" fg:x="138321818983" fg:w="1040696556"/><text x="37.9566%" y="383.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (1,040,696,556 samples, 0.28%)</title><rect x="37.7066%" y="357" width="0.2837%" height="15" fill="rgb(219,56,2)" fg:x="138321818983" fg:w="1040696556"/><text x="37.9566%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (364,304,421 samples, 0.10%)</title><rect x="37.8910%" y="341" width="0.0993%" height="15" fill="rgb(233,0,4)" fg:x="138998211118" fg:w="364304421"/><text x="38.1410%" y="351.50"></text></g><g><title>core::cmp::max (633,406,819 samples, 0.17%)</title><rect x="38.9210%" y="437" width="0.1727%" height="15" fill="rgb(235,30,7)" fg:x="142776798036" fg:w="633406819"/><text x="39.1710%" y="447.50"></text></g><g><title>core::cmp::Ord::max (633,406,819 samples, 0.17%)</title><rect x="38.9210%" y="421" width="0.1727%" height="15" fill="rgb(250,79,13)" fg:x="142776798036" fg:w="633406819"/><text x="39.1710%" y="431.50"></text></g><g><title>core::cmp::max_by (633,406,819 samples, 0.17%)</title><rect x="38.9210%" y="405" width="0.1727%" height="15" fill="rgb(211,146,34)" fg:x="142776798036" fg:w="633406819"/><text x="39.1710%" y="415.50"></text></g><g><title>one_brc::station::StationAverage::update_values (6,717,533,729 samples, 1.83%)</title><rect x="37.9903%" y="453" width="1.8312%" height="15" fill="rgb(228,22,38)" fg:x="139362515539" fg:w="6717533729"/><text x="38.2403%" y="463.50">o..</text></g><g><title>core::cmp::min (2,669,844,413 samples, 0.73%)</title><rect x="39.0937%" y="437" width="0.7278%" height="15" fill="rgb(235,168,5)" fg:x="143410204855" fg:w="2669844413"/><text x="39.3437%" y="447.50"></text></g><g><title>core::cmp::Ord::min (2,669,844,413 samples, 0.73%)</title><rect x="39.0937%" y="421" width="0.7278%" height="15" fill="rgb(221,155,16)" fg:x="143410204855" fg:w="2669844413"/><text x="39.3437%" y="431.50"></text></g><g><title>core::cmp::min_by (2,669,844,413 samples, 0.73%)</title><rect x="39.0937%" y="405" width="0.7278%" height="15" fill="rgb(215,215,53)" fg:x="143410204855" fg:w="2669844413"/><text x="39.3437%" y="415.50"></text></g><g><title>one_brc::worker_pool::Worker::get_sep (24,440,554,864 samples, 6.66%)</title><rect x="39.8215%" y="453" width="6.6625%" height="15" fill="rgb(223,4,10)" fg:x="146080049268" fg:w="24440554864"/><text x="40.0715%" y="463.50">one_brc::..</text></g><g><title>one_brc::worker_pool::Worker::parse_string_to_int (14,412,818,886 samples, 3.93%)</title><rect x="46.4840%" y="453" width="3.9289%" height="15" fill="rgb(234,103,6)" fg:x="170520604132" fg:w="14412818886"/><text x="46.7340%" y="463.50">one_..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="613" width="50.3580%" height="15" fill="rgb(227,97,0)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="597" width="50.3580%" height="15" fill="rgb(234,150,53)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="607.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="581" width="50.3580%" height="15" fill="rgb(228,201,54)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="565" width="50.3580%" height="15" fill="rgb(222,22,37)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="549" width="50.3580%" height="15" fill="rgb(237,53,32)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="559.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="533" width="50.3580%" height="15" fill="rgb(233,25,53)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="543.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="517" width="50.3580%" height="15" fill="rgb(210,40,34)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="527.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="501" width="50.3580%" height="15" fill="rgb(241,220,44)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="511.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_brc::main::_{{closure}} (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="485" width="50.3580%" height="15" fill="rgb(235,28,35)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="495.50">one_brc::main::_{{closure}}</text></g><g><title>one_brc::worker_pool::Worker::listen (184,731,651,280 samples, 50.36%)</title><rect x="0.0560%" y="469" width="50.3580%" height="15" fill="rgb(210,56,17)" fg:x="205452196" fg:w="184731651280"/><text x="0.3060%" y="479.50">one_brc::worker_pool::Worker::listen</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (312,919,494 samples, 0.09%)</title><rect x="50.4140%" y="389" width="0.0853%" height="15" fill="rgb(224,130,29)" fg:x="184937103476" fg:w="312919494"/><text x="50.6640%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (312,919,494 samples, 0.09%)</title><rect x="50.4140%" y="373" width="0.0853%" height="15" fill="rgb(235,212,8)" fg:x="184937103476" fg:w="312919494"/><text x="50.6640%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (312,919,494 samples, 0.09%)</title><rect x="50.4140%" y="357" width="0.0853%" height="15" fill="rgb(223,33,50)" fg:x="184937103476" fg:w="312919494"/><text x="50.6640%" y="367.50"></text></g><g><title>core::ptr::write (312,919,494 samples, 0.09%)</title><rect x="50.4140%" y="341" width="0.0853%" height="15" fill="rgb(219,149,13)" fg:x="184937103476" fg:w="312919494"/><text x="50.6640%" y="351.50"></text></g><g><title>[unknown] (163,968,734 samples, 0.04%)</title><rect x="50.4546%" y="325" width="0.0447%" height="15" fill="rgb(250,156,29)" fg:x="185086054236" fg:w="163968734"/><text x="50.7046%" y="335.50"></text></g><g><title>[unknown] (161,137,245 samples, 0.04%)</title><rect x="50.4553%" y="309" width="0.0439%" height="15" fill="rgb(216,193,19)" fg:x="185088885725" fg:w="161137245"/><text x="50.7053%" y="319.50"></text></g><g><title>[unknown] (161,133,849 samples, 0.04%)</title><rect x="50.4553%" y="293" width="0.0439%" height="15" fill="rgb(216,135,14)" fg:x="185088889121" fg:w="161133849"/><text x="50.7053%" y="303.50"></text></g><g><title>[unknown] (152,033,351 samples, 0.04%)</title><rect x="50.4578%" y="277" width="0.0414%" height="15" fill="rgb(241,47,5)" fg:x="185097989619" fg:w="152033351"/><text x="50.7078%" y="287.50"></text></g><g><title>[unknown] (110,018,281 samples, 0.03%)</title><rect x="50.4693%" y="261" width="0.0300%" height="15" fill="rgb(233,42,35)" fg:x="185140004689" fg:w="110018281"/><text x="50.7193%" y="271.50"></text></g><g><title>crossbeam_channel::channel::bounded (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="597" width="0.0951%" height="15" fill="rgb(231,13,6)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="607.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::with_capacity (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="581" width="0.0951%" height="15" fill="rgb(207,181,40)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="565" width="0.0951%" height="15" fill="rgb(254,173,49)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="575.50"></text></g><g><title>alloc::boxed::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;I&gt; for alloc::boxed::Box&lt;[I]&gt;&gt;::from_iter (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="549" width="0.0951%" height="15" fill="rgb(221,1,38)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="533" width="0.0951%" height="15" fill="rgb(206,124,46)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="517" width="0.0951%" height="15" fill="rgb(249,21,11)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="501" width="0.0951%" height="15" fill="rgb(222,201,40)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="485" width="0.0951%" height="15" fill="rgb(235,61,29)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="469" width="0.0951%" height="15" fill="rgb(219,207,3)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="453" width="0.0951%" height="15" fill="rgb(222,56,46)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="437" width="0.0951%" height="15" fill="rgb(239,76,54)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="421" width="0.0951%" height="15" fill="rgb(231,124,27)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (349,018,263 samples, 0.10%)</title><rect x="50.4140%" y="405" width="0.0951%" height="15" fill="rgb(249,195,6)" fg:x="184937103476" fg:w="349018263"/><text x="50.6640%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (168,322,803 samples, 0.05%)</title><rect x="52.6133%" y="565" width="0.0459%" height="15" fill="rgb(237,174,47)" fg:x="193004975177" fg:w="168322803"/><text x="52.8633%" y="575.50"></text></g><g><title>alloc::string::String::as_str (168,322,803 samples, 0.05%)</title><rect x="52.6133%" y="549" width="0.0459%" height="15" fill="rgb(206,201,31)" fg:x="193004975177" fg:w="168322803"/><text x="52.8633%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (168,322,803 samples, 0.05%)</title><rect x="52.6133%" y="533" width="0.0459%" height="15" fill="rgb(231,57,52)" fg:x="193004975177" fg:w="168322803"/><text x="52.8633%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (168,322,803 samples, 0.05%)</title><rect x="52.6133%" y="517" width="0.0459%" height="15" fill="rgb(248,177,22)" fg:x="193004975177" fg:w="168322803"/><text x="52.8633%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (168,322,803 samples, 0.05%)</title><rect x="52.6133%" y="501" width="0.0459%" height="15" fill="rgb(215,211,37)" fg:x="193004975177" fg:w="168322803"/><text x="52.8633%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (168,322,803 samples, 0.05%)</title><rect x="52.6133%" y="485" width="0.0459%" height="15" fill="rgb(241,128,51)" fg:x="193004975177" fg:w="168322803"/><text x="52.8633%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (168,322,803 samples, 0.05%)</title><rect x="52.6133%" y="469" width="0.0459%" height="15" fill="rgb(227,165,31)" fg:x="193004975177" fg:w="168322803"/><text x="52.8633%" y="479.50"></text></g><g><title>alloc::string::String::new (1,102,837,170 samples, 0.30%)</title><rect x="52.6610%" y="565" width="0.3006%" height="15" fill="rgb(228,167,24)" fg:x="193180227607" fg:w="1102837170"/><text x="52.9110%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (1,544,092,003 samples, 0.42%)</title><rect x="52.9617%" y="565" width="0.4209%" height="15" fill="rgb(228,143,12)" fg:x="194283064777" fg:w="1544092003"/><text x="53.2117%" y="575.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (1,544,092,003 samples, 0.42%)</title><rect x="52.9617%" y="549" width="0.4209%" height="15" fill="rgb(249,149,8)" fg:x="194283064777" fg:w="1544092003"/><text x="53.2117%" y="559.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,544,092,003 samples, 0.42%)</title><rect x="52.9617%" y="533" width="0.4209%" height="15" fill="rgb(243,35,44)" fg:x="194283064777" fg:w="1544092003"/><text x="53.2117%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,544,092,003 samples, 0.42%)</title><rect x="52.9617%" y="517" width="0.4209%" height="15" fill="rgb(246,89,9)" fg:x="194283064777" fg:w="1544092003"/><text x="53.2117%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (282,892,444 samples, 0.08%)</title><rect x="53.3055%" y="501" width="0.0771%" height="15" fill="rgb(233,213,13)" fg:x="195544264336" fg:w="282892444"/><text x="53.5555%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (282,892,444 samples, 0.08%)</title><rect x="53.3055%" y="485" width="0.0771%" height="15" fill="rgb(233,141,41)" fg:x="195544264336" fg:w="282892444"/><text x="53.5555%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (282,892,444 samples, 0.08%)</title><rect x="53.3055%" y="469" width="0.0771%" height="15" fill="rgb(239,167,4)" fg:x="195544264336" fg:w="282892444"/><text x="53.5555%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (115,443,051 samples, 0.03%)</title><rect x="54.6568%" y="533" width="0.0315%" height="15" fill="rgb(209,217,16)" fg:x="200501229530" fg:w="115443051"/><text x="54.9068%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (115,443,051 samples, 0.03%)</title><rect x="54.6568%" y="517" width="0.0315%" height="15" fill="rgb(219,88,35)" fg:x="200501229530" fg:w="115443051"/><text x="54.9068%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (696,120,695 samples, 0.19%)</title><rect x="64.1681%" y="501" width="0.1898%" height="15" fill="rgb(220,193,23)" fg:x="235392366893" fg:w="696120695"/><text x="64.4181%" y="511.50"></text></g><g><title>core::str::converts::from_utf8 (35,792,086,246 samples, 9.76%)</title><rect x="54.6882%" y="533" width="9.7569%" height="15" fill="rgb(230,90,52)" fg:x="200616672581" fg:w="35792086246"/><text x="54.9382%" y="543.50">core::str::con..</text></g><g><title>core::str::validations::run_utf8_validation (28,731,367,721 samples, 7.83%)</title><rect x="56.6130%" y="517" width="7.8322%" height="15" fill="rgb(252,106,19)" fg:x="207677391106" fg:w="28731367721"/><text x="56.8630%" y="527.50">core::str::..</text></g><g><title>core::str::validations::utf8_char_width (320,271,239 samples, 0.09%)</title><rect x="64.3579%" y="501" width="0.0873%" height="15" fill="rgb(206,74,20)" fg:x="236088487588" fg:w="320271239"/><text x="64.6079%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1,078,660,050 samples, 0.29%)</title><rect x="65.8903%" y="501" width="0.2940%" height="15" fill="rgb(230,138,44)" fg:x="241709916882" fg:w="1078660050"/><text x="66.1403%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1,078,660,050 samples, 0.29%)</title><rect x="65.8903%" y="485" width="0.2940%" height="15" fill="rgb(235,182,43)" fg:x="241709916882" fg:w="1078660050"/><text x="66.1403%" y="495.50"></text></g><g><title>core::cmp::min (813,309,793 samples, 0.22%)</title><rect x="65.9626%" y="469" width="0.2217%" height="15" fill="rgb(242,16,51)" fg:x="241975267139" fg:w="813309793"/><text x="66.2126%" y="479.50"></text></g><g><title>core::cmp::Ord::min (813,309,793 samples, 0.22%)</title><rect x="65.9626%" y="453" width="0.2217%" height="15" fill="rgb(248,9,4)" fg:x="241975267139" fg:w="813309793"/><text x="66.2126%" y="463.50"></text></g><g><title>core::cmp::min_by (813,309,793 samples, 0.22%)</title><rect x="65.9626%" y="437" width="0.2217%" height="15" fill="rgb(210,31,22)" fg:x="241975267139" fg:w="813309793"/><text x="66.2126%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2,789,776,300 samples, 0.76%)</title><rect x="66.1843%" y="501" width="0.7605%" height="15" fill="rgb(239,54,39)" fg:x="242788576932" fg:w="2789776300"/><text x="66.4343%" y="511.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2,789,776,300 samples, 0.76%)</title><rect x="66.1843%" y="485" width="0.7605%" height="15" fill="rgb(230,99,41)" fg:x="242788576932" fg:w="2789776300"/><text x="66.4343%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1,862,577,693 samples, 0.51%)</title><rect x="66.4371%" y="469" width="0.5077%" height="15" fill="rgb(253,106,12)" fg:x="243715775539" fg:w="1862577693"/><text x="66.6871%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1,862,577,693 samples, 0.51%)</title><rect x="66.4371%" y="453" width="0.5077%" height="15" fill="rgb(213,46,41)" fg:x="243715775539" fg:w="1862577693"/><text x="66.6871%" y="463.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1,862,577,693 samples, 0.51%)</title><rect x="66.4371%" y="437" width="0.5077%" height="15" fill="rgb(215,133,35)" fg:x="243715775539" fg:w="1862577693"/><text x="66.6871%" y="447.50"></text></g><g><title>std::sys::pal::unix::fs::File::read_buf (1,862,577,693 samples, 0.51%)</title><rect x="66.4371%" y="421" width="0.5077%" height="15" fill="rgb(213,28,5)" fg:x="243715775539" fg:w="1862577693"/><text x="66.6871%" y="431.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (1,862,577,693 samples, 0.51%)</title><rect x="66.4371%" y="405" width="0.5077%" height="15" fill="rgb(215,77,49)" fg:x="243715775539" fg:w="1862577693"/><text x="66.6871%" y="415.50"></text></g><g><title>read (1,855,691,294 samples, 0.51%)</title><rect x="66.4389%" y="389" width="0.5059%" height="15" fill="rgb(248,100,22)" fg:x="243722661938" fg:w="1855691294"/><text x="66.6889%" y="399.50"></text></g><g><title>[libc.so.6] (1,838,299,139 samples, 0.50%)</title><rect x="66.4437%" y="373" width="0.5011%" height="15" fill="rgb(208,67,9)" fg:x="243740054093" fg:w="1838299139"/><text x="66.6937%" y="383.50"></text></g><g><title>[libc.so.6] (1,838,299,139 samples, 0.50%)</title><rect x="66.4437%" y="357" width="0.5011%" height="15" fill="rgb(219,133,21)" fg:x="243740054093" fg:w="1838299139"/><text x="66.6937%" y="367.50"></text></g><g><title>[libc.so.6] (1,818,480,490 samples, 0.50%)</title><rect x="66.4491%" y="341" width="0.4957%" height="15" fill="rgb(246,46,29)" fg:x="243759872742" fg:w="1818480490"/><text x="66.6991%" y="351.50"></text></g><g><title>[unknown] (1,815,017,036 samples, 0.49%)</title><rect x="66.4500%" y="325" width="0.4948%" height="15" fill="rgb(246,185,52)" fg:x="243763336196" fg:w="1815017036"/><text x="66.7000%" y="335.50"></text></g><g><title>[unknown] (1,611,098,708 samples, 0.44%)</title><rect x="66.5056%" y="309" width="0.4392%" height="15" fill="rgb(252,136,11)" fg:x="243967254524" fg:w="1611098708"/><text x="66.7556%" y="319.50"></text></g><g><title>[unknown] (1,556,254,887 samples, 0.42%)</title><rect x="66.5206%" y="293" width="0.4242%" height="15" fill="rgb(219,138,53)" fg:x="244022098345" fg:w="1556254887"/><text x="66.7706%" y="303.50"></text></g><g><title>[unknown] (1,436,105,471 samples, 0.39%)</title><rect x="66.5533%" y="277" width="0.3915%" height="15" fill="rgb(211,51,23)" fg:x="244142247761" fg:w="1436105471"/><text x="66.8033%" y="287.50"></text></g><g><title>[unknown] (1,182,369,290 samples, 0.32%)</title><rect x="66.6225%" y="261" width="0.3223%" height="15" fill="rgb(247,221,28)" fg:x="244395983942" fg:w="1182369290"/><text x="66.8725%" y="271.50"></text></g><g><title>[unknown] (722,505,424 samples, 0.20%)</title><rect x="66.7479%" y="245" width="0.1970%" height="15" fill="rgb(251,222,45)" fg:x="244855847808" fg:w="722505424"/><text x="66.9979%" y="255.50"></text></g><g><title>[unknown] (617,472,388 samples, 0.17%)</title><rect x="66.7765%" y="229" width="0.1683%" height="15" fill="rgb(217,162,53)" fg:x="244960880844" fg:w="617472388"/><text x="67.0265%" y="239.50"></text></g><g><title>[unknown] (317,652,020 samples, 0.09%)</title><rect x="66.8582%" y="213" width="0.0866%" height="15" fill="rgb(229,93,14)" fg:x="245260701212" fg:w="317652020"/><text x="67.1082%" y="223.50"></text></g><g><title>[unknown] (55,951,464 samples, 0.02%)</title><rect x="66.9296%" y="197" width="0.0153%" height="15" fill="rgb(209,67,49)" fg:x="245522401768" fg:w="55951464"/><text x="67.1796%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,131,698,792 samples, 0.31%)</title><rect x="67.1579%" y="453" width="0.3085%" height="15" fill="rgb(213,87,29)" fg:x="246359903326" fg:w="1131698792"/><text x="67.4079%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,131,698,792 samples, 0.31%)</title><rect x="67.1579%" y="437" width="0.3085%" height="15" fill="rgb(205,151,52)" fg:x="246359903326" fg:w="1131698792"/><text x="67.4079%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,131,698,792 samples, 0.31%)</title><rect x="67.1579%" y="421" width="0.3085%" height="15" fill="rgb(253,215,39)" fg:x="246359903326" fg:w="1131698792"/><text x="67.4079%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,131,698,792 samples, 0.31%)</title><rect x="67.1579%" y="405" width="0.3085%" height="15" fill="rgb(221,220,41)" fg:x="246359903326" fg:w="1131698792"/><text x="67.4079%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (47,794,861 samples, 0.01%)</title><rect x="67.4664%" y="453" width="0.0130%" height="15" fill="rgb(218,133,21)" fg:x="247491602118" fg:w="47794861"/><text x="67.7164%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (2,571,866,359 samples, 0.70%)</title><rect x="67.9740%" y="389" width="0.7011%" height="15" fill="rgb(221,193,43)" fg:x="249353707271" fg:w="2571866359"/><text x="68.2240%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (3,699,430,159 samples, 1.01%)</title><rect x="67.7348%" y="405" width="1.0085%" height="15" fill="rgb(240,128,52)" fg:x="248476147111" fg:w="3699430159"/><text x="67.9848%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (250,003,640 samples, 0.07%)</title><rect x="68.6751%" y="389" width="0.0682%" height="15" fill="rgb(253,114,12)" fg:x="251925573630" fg:w="250003640"/><text x="68.9251%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6,818,249,753 samples, 1.86%)</title><rect x="69.7832%" y="373" width="1.8587%" height="15" fill="rgb(215,223,47)" fg:x="255990554497" fg:w="6818249753"/><text x="70.0332%" y="383.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (127,013,121 samples, 0.03%)</title><rect x="71.6418%" y="373" width="0.0346%" height="15" fill="rgb(248,225,23)" fg:x="262808804250" fg:w="127013121"/><text x="71.8918%" y="383.50"></text></g><g><title>ph_merge_aux (319,945,999 samples, 0.09%)</title><rect x="75.3998%" y="149" width="0.0872%" height="15" fill="rgb(250,108,0)" fg:x="276594349541" fg:w="319945999"/><text x="75.6498%" y="159.50"></text></g><g><title>arena_bin_refill_slabcur_no_fresh_slab (423,089,991 samples, 0.12%)</title><rect x="75.3905%" y="213" width="0.1153%" height="15" fill="rgb(228,208,7)" fg:x="276560270481" fg:w="423089991"/><text x="75.6405%" y="223.50"></text></g><g><title>arena_bin_slabs_nonfull_tryget (398,749,852 samples, 0.11%)</title><rect x="75.3971%" y="197" width="0.1087%" height="15" fill="rgb(244,45,10)" fg:x="276584610620" fg:w="398749852"/><text x="75.6471%" y="207.50"></text></g><g><title>_rjem_je_edata_heap_remove_first (398,749,852 samples, 0.11%)</title><rect x="75.3971%" y="181" width="0.1087%" height="15" fill="rgb(207,125,25)" fg:x="276584610620" fg:w="398749852"/><text x="75.6471%" y="191.50"></text></g><g><title>ph_remove_first (395,233,982 samples, 0.11%)</title><rect x="75.3981%" y="165" width="0.1077%" height="15" fill="rgb(210,195,18)" fg:x="276588126490" fg:w="395233982"/><text x="75.6481%" y="175.50"></text></g><g><title>ph_merge_children (69,064,932 samples, 0.02%)</title><rect x="75.4870%" y="149" width="0.0188%" height="15" fill="rgb(249,80,12)" fg:x="276914295540" fg:w="69064932"/><text x="75.7370%" y="159.50"></text></g><g><title>phn_merge_siblings (58,673,715 samples, 0.02%)</title><rect x="75.4898%" y="133" width="0.0160%" height="15" fill="rgb(221,65,9)" fg:x="276924686757" fg:w="58673715"/><text x="75.7398%" y="143.50"></text></g><g><title>_rjem_je_eset_fit (42,180,583 samples, 0.01%)</title><rect x="75.5163%" y="85" width="0.0115%" height="15" fill="rgb(235,49,36)" fg:x="277021900239" fg:w="42180583"/><text x="75.7663%" y="95.50"></text></g><g><title>extent_recycle_extract (100,905,104 samples, 0.03%)</title><rect x="75.5154%" y="101" width="0.0275%" height="15" fill="rgb(225,32,20)" fg:x="277018348954" fg:w="100905104"/><text x="75.7654%" y="111.50"></text></g><g><title>extent_activate_locked (55,173,236 samples, 0.02%)</title><rect x="75.5278%" y="85" width="0.0150%" height="15" fill="rgb(215,141,46)" fg:x="277064080822" fg:w="55173236"/><text x="75.7778%" y="95.50"></text></g><g><title>_rjem_je_eset_remove (41,350,852 samples, 0.01%)</title><rect x="75.5316%" y="69" width="0.0113%" height="15" fill="rgb(250,160,47)" fg:x="277077903206" fg:w="41350852"/><text x="75.7816%" y="79.50"></text></g><g><title>_rjem_je_pa_alloc (128,744,425 samples, 0.04%)</title><rect x="75.5106%" y="197" width="0.0351%" height="15" fill="rgb(216,222,40)" fg:x="277000887666" fg:w="128744425"/><text x="75.7606%" y="207.50"></text></g><g><title>pai_alloc (111,283,137 samples, 0.03%)</title><rect x="75.5154%" y="181" width="0.0303%" height="15" fill="rgb(234,217,39)" fg:x="277018348954" fg:w="111283137"/><text x="75.7654%" y="191.50"></text></g><g><title>pac_alloc_impl (111,283,137 samples, 0.03%)</title><rect x="75.5154%" y="165" width="0.0303%" height="15" fill="rgb(207,178,40)" fg:x="277018348954" fg:w="111283137"/><text x="75.7654%" y="175.50"></text></g><g><title>pac_alloc_real (111,283,137 samples, 0.03%)</title><rect x="75.5154%" y="149" width="0.0303%" height="15" fill="rgb(221,136,13)" fg:x="277018348954" fg:w="111283137"/><text x="75.7654%" y="159.50"></text></g><g><title>_rjem_je_ecache_alloc (111,283,137 samples, 0.03%)</title><rect x="75.5154%" y="133" width="0.0303%" height="15" fill="rgb(249,199,10)" fg:x="277018348954" fg:w="111283137"/><text x="75.7654%" y="143.50"></text></g><g><title>extent_recycle (111,283,137 samples, 0.03%)</title><rect x="75.5154%" y="117" width="0.0303%" height="15" fill="rgb(249,222,13)" fg:x="277018348954" fg:w="111283137"/><text x="75.7654%" y="127.50"></text></g><g><title>arena_slab_alloc (139,269,998 samples, 0.04%)</title><rect x="75.5087%" y="213" width="0.0380%" height="15" fill="rgb(244,185,38)" fg:x="276993911908" fg:w="139269998"/><text x="75.7587%" y="223.50"></text></g><g><title>cfs_lu (1,168,468,357 samples, 0.32%)</title><rect x="76.6457%" y="197" width="0.3185%" height="15" fill="rgb(236,202,9)" fg:x="281164637829" fg:w="1168468357"/><text x="76.8957%" y="207.50"></text></g><g><title>arena_slab_reg_alloc_batch (5,491,158,988 samples, 1.50%)</title><rect x="75.5467%" y="213" width="1.4969%" height="15" fill="rgb(250,229,37)" fg:x="277133181906" fg:w="5491158988"/><text x="75.7967%" y="223.50"></text></g><g><title>popcount_lu (274,950,836 samples, 0.07%)</title><rect x="76.9686%" y="197" width="0.0750%" height="15" fill="rgb(206,174,23)" fg:x="282349390058" fg:w="274950836"/><text x="77.2186%" y="207.50"></text></g><g><title>__popcountdi2 (254,469,837 samples, 0.07%)</title><rect x="76.9742%" y="181" width="0.0694%" height="15" fill="rgb(211,33,43)" fg:x="282369871057" fg:w="254469837"/><text x="77.2242%" y="191.50"></text></g><g><title>edata_nfree_get (431,222,516 samples, 0.12%)</title><rect x="77.0511%" y="213" width="0.1176%" height="15" fill="rgb(245,58,50)" fg:x="282651980417" fg:w="431222516"/><text x="77.3011%" y="223.50"></text></g><g><title>malloc_mutex_lock (382,569,467 samples, 0.10%)</title><rect x="77.1687%" y="197" width="0.1043%" height="15" fill="rgb(244,68,36)" fg:x="283083202933" fg:w="382569467"/><text x="77.4187%" y="207.50"></text></g><g><title>_rjem_je_malloc_mutex_lock_slow (375,161,820 samples, 0.10%)</title><rect x="77.1707%" y="181" width="0.1023%" height="15" fill="rgb(232,229,15)" fg:x="283090610580" fg:w="375161820"/><text x="77.4207%" y="191.50"></text></g><g><title>malloc_mutex_trylock_final (73,636,798 samples, 0.02%)</title><rect x="77.2529%" y="165" width="0.0201%" height="15" fill="rgb(254,30,23)" fg:x="283392135602" fg:w="73636798"/><text x="77.5029%" y="175.50"></text></g><g><title>pthread_mutex_trylock (73,636,798 samples, 0.02%)</title><rect x="77.2529%" y="149" width="0.0201%" height="15" fill="rgb(235,160,14)" fg:x="283392135602" fg:w="73636798"/><text x="77.5029%" y="159.50"></text></g><g><title>pthread_mutex_trylock (1,242,656,463 samples, 0.34%)</title><rect x="77.2729%" y="181" width="0.3387%" height="15" fill="rgb(212,155,44)" fg:x="283465772400" fg:w="1242656463"/><text x="77.5229%" y="191.50"></text></g><g><title>malloc_mutex_lock (1,628,742,795 samples, 0.44%)</title><rect x="77.1687%" y="213" width="0.4440%" height="15" fill="rgb(226,2,50)" fg:x="283083202933" fg:w="1628742795"/><text x="77.4187%" y="223.50"></text></g><g><title>malloc_mutex_trylock_final (1,246,173,328 samples, 0.34%)</title><rect x="77.2729%" y="197" width="0.3397%" height="15" fill="rgb(234,177,6)" fg:x="283465772400" fg:w="1246173328"/><text x="77.5229%" y="207.50"></text></g><g><title>[libc.so.6] (142,422,662 samples, 0.04%)</title><rect x="77.6151%" y="197" width="0.0388%" height="15" fill="rgb(217,24,9)" fg:x="284721026086" fg:w="142422662"/><text x="77.8651%" y="207.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (8,590,522,320 samples, 2.34%)</title><rect x="75.3160%" y="229" width="2.3418%" height="15" fill="rgb(220,13,46)" fg:x="276286804463" fg:w="8590522320"/><text x="75.5660%" y="239.50">_..</text></g><g><title>malloc_mutex_unlock (165,381,055 samples, 0.05%)</title><rect x="77.6127%" y="213" width="0.0451%" height="15" fill="rgb(239,221,27)" fg:x="284711945728" fg:w="165381055"/><text x="77.8627%" y="223.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (8,712,769,154 samples, 2.38%)</title><rect x="75.2913%" y="245" width="2.3751%" height="15" fill="rgb(222,198,25)" fg:x="276196412525" fg:w="8712769154"/><text x="75.5413%" y="255.50">_r..</text></g><g><title>_rjem_je_tcache_bin_flush_stashed (66,079,025 samples, 0.02%)</title><rect x="77.6664%" y="245" width="0.0180%" height="15" fill="rgb(211,99,13)" fg:x="284909181679" fg:w="66079025"/><text x="77.9164%" y="255.50"></text></g><g><title>arena_choose (65,842,917 samples, 0.02%)</title><rect x="77.6844%" y="245" width="0.0179%" height="15" fill="rgb(232,111,31)" fg:x="284975260704" fg:w="65842917"/><text x="77.9344%" y="255.50"></text></g><g><title>arena_choose_impl (65,842,917 samples, 0.02%)</title><rect x="77.6844%" y="229" width="0.0179%" height="15" fill="rgb(245,82,37)" fg:x="284975260704" fg:w="65842917"/><text x="77.9344%" y="239.50"></text></g><g><title>imalloc_no_sample (9,080,453,607 samples, 2.48%)</title><rect x="75.2543%" y="309" width="2.4753%" height="15" fill="rgb(227,149,46)" fg:x="276060726649" fg:w="9080453607"/><text x="75.5043%" y="319.50">im..</text></g><g><title>iallocztm (9,080,453,607 samples, 2.48%)</title><rect x="75.2543%" y="293" width="2.4753%" height="15" fill="rgb(218,36,50)" fg:x="276060726649" fg:w="9080453607"/><text x="75.5043%" y="303.50">ia..</text></g><g><title>arena_malloc (9,080,453,607 samples, 2.48%)</title><rect x="75.2543%" y="277" width="2.4753%" height="15" fill="rgb(226,80,48)" fg:x="276060726649" fg:w="9080453607"/><text x="75.5043%" y="287.50">ar..</text></g><g><title>tcache_alloc_small (9,080,453,607 samples, 2.48%)</title><rect x="75.2543%" y="261" width="2.4753%" height="15" fill="rgb(238,224,15)" fg:x="276060726649" fg:w="9080453607"/><text x="75.5043%" y="271.50">tc..</text></g><g><title>cache_bin_alloc (100,076,635 samples, 0.03%)</title><rect x="77.7024%" y="245" width="0.0273%" height="15" fill="rgb(241,136,10)" fg:x="285041103621" fg:w="100076635"/><text x="77.9524%" y="255.50"></text></g><g><title>cache_bin_alloc_impl (100,076,635 samples, 0.03%)</title><rect x="77.7024%" y="229" width="0.0273%" height="15" fill="rgb(208,32,45)" fg:x="285041103621" fg:w="100076635"/><text x="77.9524%" y="239.50"></text></g><g><title>_rjem_je_te_event_trigger (66,163,093 samples, 0.02%)</title><rect x="77.7372%" y="277" width="0.0180%" height="15" fill="rgb(207,135,9)" fg:x="285168659464" fg:w="66163093"/><text x="77.9872%" y="287.50"></text></g><g><title>imalloc_body (9,222,646,632 samples, 2.51%)</title><rect x="75.2448%" y="325" width="2.5141%" height="15" fill="rgb(206,86,44)" fg:x="276025926708" fg:w="9222646632"/><text x="75.4948%" y="335.50">im..</text></g><g><title>thread_alloc_event (107,393,084 samples, 0.03%)</title><rect x="77.7297%" y="309" width="0.0293%" height="15" fill="rgb(245,177,15)" fg:x="285141180256" fg:w="107393084"/><text x="77.9797%" y="319.50"></text></g><g><title>te_event_advance (107,393,084 samples, 0.03%)</title><rect x="77.7297%" y="293" width="0.0293%" height="15" fill="rgb(206,64,50)" fg:x="285141180256" fg:w="107393084"/><text x="77.9797%" y="303.50"></text></g><g><title>_rjem_je_malloc_default (9,407,810,216 samples, 2.56%)</title><rect x="75.2048%" y="357" width="2.5646%" height="15" fill="rgb(234,36,40)" fg:x="275879096470" fg:w="9407810216"/><text x="75.4548%" y="367.50">_r..</text></g><g><title>imalloc (9,260,979,978 samples, 2.52%)</title><rect x="75.2448%" y="341" width="2.5245%" height="15" fill="rgb(213,64,8)" fg:x="276025926708" fg:w="9260979978"/><text x="75.4948%" y="351.50">im..</text></g><g><title>tsd_fetch (38,333,346 samples, 0.01%)</title><rect x="77.7589%" y="325" width="0.0104%" height="15" fill="rgb(210,75,36)" fg:x="285248573340" fg:w="38333346"/><text x="78.0089%" y="335.50"></text></g><g><title>tsd_fetch_impl (38,333,346 samples, 0.01%)</title><rect x="77.7589%" y="309" width="0.0104%" height="15" fill="rgb(229,88,21)" fg:x="285248573340" fg:w="38333346"/><text x="78.0089%" y="319.50"></text></g><g><title>cache_bin_alloc (162,537,541 samples, 0.04%)</title><rect x="80.3177%" y="325" width="0.0443%" height="15" fill="rgb(252,204,47)" fg:x="294635198039" fg:w="162537541"/><text x="80.5677%" y="335.50"></text></g><g><title>cache_bin_alloc_impl (162,537,541 samples, 0.04%)</title><rect x="80.3177%" y="309" width="0.0443%" height="15" fill="rgb(208,77,27)" fg:x="294635198039" fg:w="162537541"/><text x="80.5677%" y="319.50"></text></g><g><title>cache_bin_alloc_easy (5,050,862,739 samples, 1.38%)</title><rect x="80.3620%" y="325" width="1.3769%" height="15" fill="rgb(221,76,26)" fg:x="294797735580" fg:w="5050862739"/><text x="80.6120%" y="335.50"></text></g><g><title>cache_bin_alloc_impl (5,050,862,739 samples, 1.38%)</title><rect x="80.3620%" y="309" width="1.3769%" height="15" fill="rgb(225,139,18)" fg:x="294797735580" fg:w="5050862739"/><text x="80.6120%" y="319.50"></text></g><g><title>_rjem_malloc (14,706,525,605 samples, 4.01%)</title><rect x="77.7694%" y="357" width="4.0090%" height="15" fill="rgb(230,137,11)" fg:x="285286906686" fg:w="14706525605"/><text x="78.0194%" y="367.50">_rje..</text></g><g><title>imalloc_fastpath (14,699,635,287 samples, 4.01%)</title><rect x="77.7713%" y="341" width="4.0071%" height="15" fill="rgb(212,28,1)" fg:x="285293797004" fg:w="14699635287"/><text x="78.0213%" y="351.50">imal..</text></g><g><title>fastpath_success_finish (144,833,972 samples, 0.04%)</title><rect x="81.7389%" y="325" width="0.0395%" height="15" fill="rgb(248,164,17)" fg:x="299848598319" fg:w="144833972"/><text x="81.9889%" y="335.50"></text></g><g><title>thread_allocated_set (144,833,972 samples, 0.04%)</title><rect x="81.7389%" y="309" width="0.0395%" height="15" fill="rgb(222,171,42)" fg:x="299848598319" fg:w="144833972"/><text x="81.9889%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (38,866,496,109 samples, 10.60%)</title><rect x="71.6793%" y="373" width="10.5950%" height="15" fill="rgb(243,84,45)" fg:x="262946244138" fg:w="38866496109"/><text x="71.9293%" y="383.50">alloc::raw_vec:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1,819,307,956 samples, 0.50%)</title><rect x="81.7784%" y="357" width="0.4959%" height="15" fill="rgb(252,49,23)" fg:x="299993432291" fg:w="1819307956"/><text x="82.0284%" y="367.50"></text></g><g><title>alloc::raw_vec::layout_array (1,687,084,893 samples, 0.46%)</title><rect x="82.2743%" y="373" width="0.4599%" height="15" fill="rgb(215,19,7)" fg:x="301812740247" fg:w="1687084893"/><text x="82.5243%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1,687,084,893 samples, 0.46%)</title><rect x="82.2743%" y="357" width="0.4599%" height="15" fill="rgb(238,81,41)" fg:x="301812740247" fg:w="1687084893"/><text x="82.5243%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (878,504,348 samples, 0.24%)</title><rect x="82.4948%" y="341" width="0.2395%" height="15" fill="rgb(210,199,37)" fg:x="302621320792" fg:w="878504348"/><text x="82.7448%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (878,504,348 samples, 0.24%)</title><rect x="82.4948%" y="325" width="0.2395%" height="15" fill="rgb(244,192,49)" fg:x="302621320792" fg:w="878504348"/><text x="82.7448%" y="335.50"></text></g><g><title>core::intrinsics::unlikely (878,504,348 samples, 0.24%)</title><rect x="82.4948%" y="309" width="0.2395%" height="15" fill="rgb(226,211,11)" fg:x="302621320792" fg:w="878504348"/><text x="82.7448%" y="319.50"></text></g><g><title>core::cmp::max (3,474,908,910 samples, 0.95%)</title><rect x="82.7342%" y="373" width="0.9473%" height="15" fill="rgb(236,162,54)" fg:x="303499825140" fg:w="3474908910"/><text x="82.9842%" y="383.50"></text></g><g><title>core::cmp::Ord::max (3,474,908,910 samples, 0.95%)</title><rect x="82.7342%" y="357" width="0.9473%" height="15" fill="rgb(220,229,9)" fg:x="303499825140" fg:w="3474908910"/><text x="82.9842%" y="367.50"></text></g><g><title>core::cmp::max_by (3,474,908,910 samples, 0.95%)</title><rect x="82.7342%" y="341" width="0.9473%" height="15" fill="rgb(250,87,22)" fg:x="303499825140" fg:w="3474908910"/><text x="82.9842%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (60,468,097,591 samples, 16.48%)</title><rect x="67.4794%" y="453" width="16.4836%" height="15" fill="rgb(239,43,17)" fg:x="247539396979" fg:w="60468097591"/><text x="67.7294%" y="463.50">alloc::vec::Vec&lt;T,A&gt;::res..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (60,468,097,591 samples, 16.48%)</title><rect x="67.4794%" y="437" width="16.4836%" height="15" fill="rgb(231,177,25)" fg:x="247539396979" fg:w="60468097591"/><text x="67.7294%" y="447.50">alloc::raw_vec::RawVec&lt;T,..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (60,468,097,591 samples, 16.48%)</title><rect x="67.4794%" y="421" width="16.4836%" height="15" fill="rgb(219,179,1)" fg:x="247539396979" fg:w="60468097591"/><text x="67.7294%" y="431.50">alloc::raw_vec::RawVecInn..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (55,831,917,300 samples, 15.22%)</title><rect x="68.7432%" y="405" width="15.2198%" height="15" fill="rgb(238,219,53)" fg:x="252175577270" fg:w="55831917300"/><text x="68.9932%" y="415.50">alloc::raw_vec::RawVecI..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (55,777,075,832 samples, 15.20%)</title><rect x="68.7582%" y="389" width="15.2049%" height="15" fill="rgb(232,167,36)" fg:x="252230418738" fg:w="55777075832"/><text x="69.0082%" y="399.50">alloc::raw_vec::RawVecI..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1,032,760,520 samples, 0.28%)</title><rect x="83.6815%" y="373" width="0.2815%" height="15" fill="rgb(244,19,51)" fg:x="306974734050" fg:w="1032760520"/><text x="83.9315%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,268,595,996 samples, 1.44%)</title><rect x="83.9630%" y="453" width="1.4362%" height="15" fill="rgb(224,6,22)" fg:x="308007494570" fg:w="5268595996"/><text x="84.2130%" y="463.50"></text></g><g><title>[libc.so.6] (4,290,635,812 samples, 1.17%)</title><rect x="84.2296%" y="437" width="1.1696%" height="15" fill="rgb(224,145,5)" fg:x="308985454754" fg:w="4290635812"/><text x="84.4796%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (67,725,124,433 samples, 18.46%)</title><rect x="66.9448%" y="501" width="18.4619%" height="15" fill="rgb(234,130,49)" fg:x="245578353232" fg:w="67725124433"/><text x="67.1948%" y="511.50">alloc::vec::Vec&lt;T,A&gt;::extend_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (67,725,124,433 samples, 18.46%)</title><rect x="66.9448%" y="485" width="18.4619%" height="15" fill="rgb(254,6,2)" fg:x="245578353232" fg:w="67725124433"/><text x="67.1948%" y="495.50">&lt;alloc::vec::Vec&lt;T,A&gt; as allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (67,725,124,433 samples, 18.46%)</title><rect x="66.9448%" y="469" width="18.4619%" height="15" fill="rgb(208,96,46)" fg:x="245578353232" fg:w="67725124433"/><text x="67.1948%" y="479.50">alloc::vec::Vec&lt;T,A&gt;::append_..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (765,019,550 samples, 0.21%)</title><rect x="88.3516%" y="453" width="0.2085%" height="15" fill="rgb(239,3,39)" fg:x="324106534195" fg:w="765019550"/><text x="88.6016%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11,574,949,374 samples, 3.16%)</title><rect x="85.4067%" y="501" width="3.1553%" height="15" fill="rgb(233,210,1)" fg:x="313303477665" fg:w="11574949374"/><text x="85.6567%" y="511.50">cor..</text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11,574,949,374 samples, 3.16%)</title><rect x="85.4067%" y="485" width="3.1553%" height="15" fill="rgb(244,137,37)" fg:x="313303477665" fg:w="11574949374"/><text x="85.6567%" y="495.50">&lt;co..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11,574,949,374 samples, 3.16%)</title><rect x="85.4067%" y="469" width="3.1553%" height="15" fill="rgb(240,136,2)" fg:x="313303477665" fg:w="11574949374"/><text x="85.6567%" y="479.50">&lt;co..</text></g><g><title>core::slice::memchr::contains_zero_byte (1,743,851,022 samples, 0.48%)</title><rect x="90.5435%" y="453" width="0.4754%" height="15" fill="rgb(239,18,37)" fg:x="332147025526" fg:w="1743851022"/><text x="90.7935%" y="463.50"></text></g><g><title>core::slice::memchr::memchr_aligned (24,582,298,493 samples, 6.70%)</title><rect x="88.5640%" y="485" width="6.7011%" height="15" fill="rgb(218,185,22)" fg:x="324885462627" fg:w="24582298493"/><text x="88.8140%" y="495.50">core::sli..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (24,582,298,493 samples, 6.70%)</title><rect x="88.5640%" y="469" width="6.7011%" height="15" fill="rgb(225,218,4)" fg:x="324885462627" fg:w="24582298493"/><text x="88.8140%" y="479.50">core::sli..</text></g><g><title>core::slice::memchr::memchr_naive (15,576,884,572 samples, 4.25%)</title><rect x="91.0189%" y="453" width="4.2463%" height="15" fill="rgb(230,182,32)" fg:x="333890876548" fg:w="15576884572"/><text x="91.2689%" y="463.50">core:..</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (163,057,116,229 samples, 44.45%)</title><rect x="50.8265%" y="581" width="44.4495%" height="15" fill="rgb(242,56,43)" fg:x="186450345160" fg:w="163057116229"/><text x="51.0765%" y="591.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>std::io::BufRead::read_line (153,680,304,609 samples, 41.89%)</title><rect x="53.3826%" y="565" width="41.8933%" height="15" fill="rgb(233,99,24)" fg:x="195827156780" fg:w="153680304609"/><text x="53.6326%" y="575.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (153,680,304,609 samples, 41.89%)</title><rect x="53.3826%" y="549" width="41.8933%" height="15" fill="rgb(234,209,42)" fg:x="195827156780" fg:w="153680304609"/><text x="53.6326%" y="559.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::_{{closure}} (113,098,702,562 samples, 30.83%)</title><rect x="64.4452%" y="533" width="30.8308%" height="15" fill="rgb(227,7,12)" fg:x="236408758827" fg:w="113098702562"/><text x="64.6952%" y="543.50">std::io::BufRead::read_line::_{{closure}}</text></g><g><title>std::io::read_until (113,098,702,562 samples, 30.83%)</title><rect x="64.4452%" y="517" width="30.8308%" height="15" fill="rgb(245,203,43)" fg:x="236408758827" fg:w="113098702562"/><text x="64.6952%" y="527.50">std::io::read_until</text></g><g><title>core::slice::memchr::memchr (24,629,034,350 samples, 6.71%)</title><rect x="88.5621%" y="501" width="6.7139%" height="15" fill="rgb(238,205,33)" fg:x="324878427039" fg:w="24629034350"/><text x="88.8121%" y="511.50">core::sli..</text></g><g><title>core::slice::memchr::memchr_naive (39,700,269 samples, 0.01%)</title><rect x="95.2651%" y="485" width="0.0108%" height="15" fill="rgb(231,56,7)" fg:x="349467761120" fg:w="39700269"/><text x="95.5151%" y="495.50"></text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (779,203,386 samples, 0.21%)</title><rect x="95.2760%" y="549" width="0.2124%" height="15" fill="rgb(244,186,29)" fg:x="349507463380" fg:w="779203386"/><text x="95.5260%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (6,137,785,865 samples, 1.67%)</title><rect x="97.1753%" y="533" width="1.6732%" height="15" fill="rgb(234,111,31)" fg:x="356474845624" fg:w="6137785865"/><text x="97.4253%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6,137,785,865 samples, 1.67%)</title><rect x="97.1753%" y="517" width="1.6732%" height="15" fill="rgb(241,149,10)" fg:x="356474845624" fg:w="6137785865"/><text x="97.4253%" y="527.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (13,004,201,566 samples, 3.54%)</title><rect x="95.4884%" y="549" width="3.5450%" height="15" fill="rgb(249,206,44)" fg:x="350286666766" fg:w="13004201566"/><text x="95.7384%" y="559.50">cros..</text></g><g><title>core::sync::atomic::AtomicUsize::load (678,236,843 samples, 0.18%)</title><rect x="98.8484%" y="533" width="0.1849%" height="15" fill="rgb(251,153,30)" fg:x="362612631489" fg:w="678236843"/><text x="99.0984%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (678,236,843 samples, 0.18%)</title><rect x="98.8484%" y="517" width="0.1849%" height="15" fill="rgb(239,152,38)" fg:x="362612631489" fg:w="678236843"/><text x="99.0984%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (92,926,557 samples, 0.03%)</title><rect x="99.2781%" y="533" width="0.0253%" height="15" fill="rgb(249,139,47)" fg:x="364188731073" fg:w="92926557"/><text x="99.5281%" y="543.50"></text></g><g><title>core::ptr::write (92,926,557 samples, 0.03%)</title><rect x="99.2781%" y="517" width="0.0253%" height="15" fill="rgb(244,64,35)" fg:x="364188731073" fg:w="92926557"/><text x="99.5281%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (66,429,467 samples, 0.02%)</title><rect x="99.3034%" y="533" width="0.0181%" height="15" fill="rgb(216,46,15)" fg:x="364281657630" fg:w="66429467"/><text x="99.5534%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_store (66,429,467 samples, 0.02%)</title><rect x="99.3034%" y="517" width="0.0181%" height="15" fill="rgb(250,74,19)" fg:x="364281657630" fg:w="66429467"/><text x="99.5534%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1,053,988,240 samples, 0.29%)</title><rect x="99.6043%" y="517" width="0.2873%" height="15" fill="rgb(249,42,33)" fg:x="365385436690" fg:w="1053988240"/><text x="99.8543%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (1,053,988,240 samples, 0.29%)</title><rect x="99.6043%" y="501" width="0.2873%" height="15" fill="rgb(242,149,17)" fg:x="365385436690" fg:w="1053988240"/><text x="99.8543%" y="511.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (17,097,044,471 samples, 4.66%)</title><rect x="95.2760%" y="581" width="4.6607%" height="15" fill="rgb(244,29,21)" fg:x="349507463380" fg:w="17097044471"/><text x="95.5260%" y="591.50">cross..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (17,097,044,471 samples, 4.66%)</title><rect x="95.2760%" y="565" width="4.6607%" height="15" fill="rgb(220,130,37)" fg:x="349507463380" fg:w="17097044471"/><text x="95.5260%" y="575.50">cross..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::write (3,313,639,519 samples, 0.90%)</title><rect x="99.0333%" y="549" width="0.9033%" height="15" fill="rgb(211,67,2)" fg:x="363290868332" fg:w="3313639519"/><text x="99.2833%" y="559.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (2,256,420,754 samples, 0.62%)</title><rect x="99.3215%" y="533" width="0.6151%" height="15" fill="rgb(235,68,52)" fg:x="364348087097" fg:w="2256420754"/><text x="99.5715%" y="543.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (165,082,921 samples, 0.05%)</title><rect x="99.8916%" y="517" width="0.0450%" height="15" fill="rgb(246,142,3)" fg:x="366439424930" fg:w="165082921"/><text x="100.1416%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (165,082,921 samples, 0.05%)</title><rect x="99.8916%" y="501" width="0.0450%" height="15" fill="rgb(241,25,7)" fg:x="366439424930" fg:w="165082921"/><text x="100.1416%" y="511.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::_{{closure}} (165,082,921 samples, 0.05%)</title><rect x="99.8916%" y="485" width="0.0450%" height="15" fill="rgb(242,119,39)" fg:x="366439424930" fg:w="165082921"/><text x="100.1416%" y="495.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (158,263,866 samples, 0.04%)</title><rect x="99.8935%" y="469" width="0.0431%" height="15" fill="rgb(241,98,45)" fg:x="366446243985" fg:w="158263866"/><text x="100.1435%" y="479.50"></text></g><g><title>std::thread::Thread::unpark (158,263,866 samples, 0.04%)</title><rect x="99.8935%" y="453" width="0.0431%" height="15" fill="rgb(254,28,30)" fg:x="366446243985" fg:w="158263866"/><text x="100.1435%" y="463.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::unpark (158,263,866 samples, 0.04%)</title><rect x="99.8935%" y="437" width="0.0431%" height="15" fill="rgb(241,142,54)" fg:x="366446243985" fg:w="158263866"/><text x="100.1435%" y="447.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (144,162,903 samples, 0.04%)</title><rect x="99.8973%" y="421" width="0.0393%" height="15" fill="rgb(222,85,15)" fg:x="366460344948" fg:w="144162903"/><text x="100.1473%" y="431.50"></text></g><g><title>syscall (138,019,214 samples, 0.04%)</title><rect x="99.8990%" y="405" width="0.0376%" height="15" fill="rgb(210,85,47)" fg:x="366466488637" fg:w="138019214"/><text x="100.1490%" y="415.50"></text></g><g><title>[unknown] (138,019,214 samples, 0.04%)</title><rect x="99.8990%" y="389" width="0.0376%" height="15" fill="rgb(224,206,25)" fg:x="366466488637" fg:w="138019214"/><text x="100.1490%" y="399.50"></text></g><g><title>[unknown] (128,180,837 samples, 0.03%)</title><rect x="99.9017%" y="373" width="0.0349%" height="15" fill="rgb(243,201,19)" fg:x="366476327014" fg:w="128180837"/><text x="100.1517%" y="383.50"></text></g><g><title>[unknown] (117,772,262 samples, 0.03%)</title><rect x="99.9045%" y="357" width="0.0321%" height="15" fill="rgb(236,59,4)" fg:x="366486735589" fg:w="117772262"/><text x="100.1545%" y="367.50"></text></g><g><title>[unknown] (117,755,319 samples, 0.03%)</title><rect x="99.9045%" y="341" width="0.0321%" height="15" fill="rgb(254,179,45)" fg:x="366486752532" fg:w="117755319"/><text x="100.1545%" y="351.50"></text></g><g><title>[unknown] (114,266,710 samples, 0.03%)</title><rect x="99.9055%" y="325" width="0.0311%" height="15" fill="rgb(226,14,10)" fg:x="366490241141" fg:w="114266710"/><text x="100.1555%" y="335.50"></text></g><g><title>[unknown] (79,342,048 samples, 0.02%)</title><rect x="99.9150%" y="309" width="0.0216%" height="15" fill="rgb(244,27,41)" fg:x="366525165803" fg:w="79342048"/><text x="100.1650%" y="319.50"></text></g><g><title>one_brc::reader::parse_file (181,499,367,191 samples, 49.48%)</title><rect x="50.5091%" y="597" width="49.4768%" height="15" fill="rgb(235,35,32)" fg:x="185286121739" fg:w="181499367191"/><text x="50.7591%" y="607.50">one_brc::reader::parse_file</text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::new (180,981,079 samples, 0.05%)</title><rect x="99.9366%" y="581" width="0.0493%" height="15" fill="rgb(218,68,31)" fg:x="366604507851" fg:w="180981079"/><text x="100.1866%" y="591.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::with_capacity (180,981,079 samples, 0.05%)</title><rect x="99.9366%" y="565" width="0.0493%" height="15" fill="rgb(207,120,37)" fg:x="366604507851" fg:w="180981079"/><text x="100.1866%" y="575.50"></text></g><g><title>one_brc::main (181,849,385,460 samples, 49.57%)</title><rect x="50.4140%" y="613" width="49.5723%" height="15" fill="rgb(227,98,0)" fg:x="184937103476" fg:w="181849385460"/><text x="50.6640%" y="623.50">one_brc::main</text></g><g><title>all (366,837,026,768 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(207,7,3)" fg:x="0" fg:w="366837026768"/><text x="0.2500%" y="655.50"></text></g><g><title>one_brc (366,837,026,768 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="366837026768"/><text x="0.2500%" y="639.50">one_brc</text></g><g><title>syscall (50,537,832 samples, 0.01%)</title><rect x="99.9862%" y="613" width="0.0138%" height="15" fill="rgb(217,5,26)" fg:x="366786488936" fg:w="50537832"/><text x="100.2362%" y="623.50"></text></g><g><title>[unknown] (50,537,832 samples, 0.01%)</title><rect x="99.9862%" y="597" width="0.0138%" height="15" fill="rgb(235,190,38)" fg:x="366786488936" fg:w="50537832"/><text x="100.2362%" y="607.50"></text></g></svg></svg>